{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Chicago public schools analytic file\n","## Sandra Tilmon\n","## 9/20/2023\n","\n","\n","#### Change log:\n","Date        Change\n","\n","10/26/2023 final merged file is Sociome/Data/CPS/School_locations_metrics_0910_2324.csv\n"],"metadata":{"id":"Rynj1MbDGPuZ"}},{"cell_type":"markdown","source":["**Data sources**\n","\n","School addresses: https://www.chicago.gov/city/en/depts/other/dataset/schools.html\n","\n","School budgets (download only): https://biportal.efs.cps.edu/analytics/saw.dll?Dashboard\n","\n","School metrics (download only): https://www.cps.edu/about/district-data/metrics/accountability-reports/\n","\n"],"metadata":{"id":"sELDRp36GRvV"}},{"cell_type":"markdown","source":["# Setup"],"metadata":{"id":"wup_QgEwHurD"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","import geopandas as gpd\n","from shapely.geometry import shape\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","import json\n","import os\n","import requests\n","\n","pd.set_option('display.max_rows', 50)\n","pd.set_option('display.max_columns', None)"],"metadata":{"id":"LsOUrBy9HvjR","executionInfo":{"status":"ok","timestamp":1727192827534,"user_tz":300,"elapsed":1392,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# Mount drive\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r7bs2x6ia-WB","executionInfo":{"status":"ok","timestamp":1727192853209,"user_tz":300,"elapsed":25677,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"9beb6af7-a4f0-497a-fe9c-40ae87bc433a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["# Raw data sources\n","dir = '/content/gdrive/My Drive/Sociome_Folder/Data/'\n","\n","# Output curated datasets\n","curated = '/content/gdrive/My Drive/Sociome_Folder/Data Commons/Curated datasets/'"],"metadata":{"id":"g2dR5_V6a-Zi","executionInfo":{"status":"ok","timestamp":1727192853209,"user_tz":300,"elapsed":2,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["# GIS"],"metadata":{"id":"dwcpihj1-8tx"}},{"cell_type":"markdown","source":["## Set CRS"],"metadata":{"id":"apVDzWfwooMq"}},{"cell_type":"code","source":["crs = {'init' :'epsg:3435'}"],"metadata":{"id":"bc3sjS92olH3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Census tracts\n","\n","https://data.cityofchicago.org/Facilities-Geographic-Boundaries/Boundaries-Census-Tracts-2010/5jrd-6zik"],"metadata":{"id":"eGdJiQrW_pBN"}},{"cell_type":"code","source":["# Census tracts\n","\n","r = requests.get(\"https://data.cityofchicago.org/resource/74p9-q2aq.json\")\n","r.raise_for_status()\n","\n","data = r.json()\n","for d in data:\n","    d['the_geom'] = shape(d['the_geom'])\n","\n","tracts_shp = gpd.GeoDataFrame(data).set_geometry('the_geom', crs=crs)\n","\n","tracts_shp = tracts_shp.drop(columns=['statefp10', 'countyfp10', 'tractce10',\t'name10', 'namelsad10',\n","                                      'notes'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IqMm4AQB-_gJ","executionInfo":{"status":"ok","timestamp":1726780435722,"user_tz":300,"elapsed":1379,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"eed1b741-56d7-4eb7-ad81-4f151d3639cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}]},{"cell_type":"code","source":["# Reload dataframe\n","\n","tractsdf = pd.read_csv(dir + \"1 Chicago datamart/tracts.csv\")"],"metadata":{"id":"pvbEwilbOD77","executionInfo":{"status":"ok","timestamp":1727192858794,"user_tz":300,"elapsed":4578,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["## Functions"],"metadata":{"id":"E3KVcRb4mrp_"}},{"cell_type":"code","source":["# Lat/long coordinates to census tract\n","\n","def LatLongTract(infile, lat, long):\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)\n","\n","\n","\n","# One line street address to lat/long coordinates and census tract\n","\n","def AddLatLongTract(infile):\n","\n","  # Create \"oneline\" address in cleaning \"123 N Main Street Chicago, IL 60000\"\n","  # Field names vary so not bothering to include here\n","\n","  g = geocoders.GoogleV3(api_key='')\n","\n","  def Gv3_latlong (address):\n","      location = g.geocode(address)\n","      lat = location.latitude\n","      long = location.longitude\n","      # Perform additional steps to obtain census tract from coordinates\n","      # census_tract = get_census_tract_from_coordinates(latitude, longitude)\n","      return lat, long, location\n","\n","  infile[['lat', 'long', 'Location']] = infile['oneline'].apply(Gv3_latlong).apply(pd.Series)\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID10 to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)"],"metadata":{"id":"E2G9ttQymsY_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# School districts - go to reload\n","\n","https://data.cityofchicago.org/browse?q=school%20attendance%20boundaries&sortBy=relevance"],"metadata":{"id":"f30iq8Sz_sG4"}},{"cell_type":"markdown","source":["## Function"],"metadata":{"id":"5nQw-IdoG2LX"}},{"cell_type":"code","source":["## Districts\n","# Stack API calls for multiple years of school districts\n","def districty(api_endpoints, years, cats):\n","\n","  dataframes=[]\n","\n","  for endpoint, year, cat in zip(api_endpoints, years, cats):\n","      response = requests.get(endpoint)\n","      data=response.json()\n","\n","      df = pd.DataFrame(data)\n","      df['SchoolYear'] = year\n","      df['grade_cat'] = cat\n","      dataframes.append(df)\n","\n","  combined = pd.concat(dataframes, ignore_index=True)\n","  return(combined)"],"metadata":{"id":"hhBrYWQPG4VK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Process"],"metadata":{"id":"aBiPDh54G4to"}},{"cell_type":"markdown","source":["### High school"],"metadata":{"id":"w_1wr3f74C25"}},{"cell_type":"code","source":["# Define the APIs and category fields\n","api_endpoints = [\n","    \"https://data.cityofchicago.org/resource/up9a-4856.json\",\n","    \"https://data.cityofchicago.org/resource/it84-h78n.json\",\n","    \"https://data.cityofchicago.org/resource/sp5c-ihm9.json\",\n","    \"https://data.cityofchicago.org/resource/s2in-k2mg.json\",\n","    \"https://data.cityofchicago.org/resource/kuh7-icv2.json\",\n","    \"https://data.cityofchicago.org/resource/94tp-gppc.json\",\n","    \"https://data.cityofchicago.org/resource/i8xf-caea.json\",\n","    \"https://data.cityofchicago.org/resource/negq-mr8b.json\",\n","    \"https://data.cityofchicago.org/resource/juf9-y87b.json\",\n","    \"https://data.cityofchicago.org/resource/se26-22jn.json\",\n","    \"https://data.cityofchicago.org/resource/d95y-ue9h.json\",\n","    \"https://data.cityofchicago.org/resource/da2c-wnfg.json\",\n","# 2122\n","    \"https://data.cityofchicago.org/resource/is3f-j4ke.json\",\n","\n","    \"https://data.cityofchicago.org/resource/4m25-hh4h.json\",\n","\n","# 2324\n","    \"https://data.cityofchicago.org/resource/gba7-ip5a.json\"\n","]\n","\n","# Indicator variable for school year of API calls\n","years = [\"2009-2010\", \"2010-2011\", \"2011-2012\", \"2012-2013\", \"2013-2014\",\n","        \"2014-2015\", \"2015-2016\", \"2016-2017\", \"2017-2018\", \"2018-2019\",\n","        \"2019-2020\", \"2020-2021\", \"2021-2022\", \"2022-2023\", \"2023-2024\"\n","        ]\n","\n","# Elementary, middle, or high school\n","cats = [\"HS\", \"HS\", \"HS\", \"HS\", \"HS\",\n","        \"HS\", \"HS\", \"HS\", \"HS\", \"HS\",\n","        \"HS\", \"HS\", \"HS\", \"HS\", \"HS\"]"],"metadata":{"id":"iH_vQnCyHUsx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Stack the API calls\n","\n","HSDistricts = districty(api_endpoints, years, cats)"],"metadata":{"id":"cbrKSJ7Qo2rO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Elementary"],"metadata":{"id":"EJ5RZ2y84GkX"}},{"cell_type":"code","source":["# Elementary\n","\n","# Define the APIs and category fields\n","api_endpoints = [\n","    #2009-2010\n","    \"https://data.cityofchicago.org/resource/j9ch-yf5i.json\",\n","    #2010-2011 \\\\\\\n","    \"https://data.cityofchicago.org/resource/d5vw-2kcs.json\",\n","    #2011-2012\n","    \"https://data.cityofchicago.org/resource/hr9c-szde.json\",\n","    #2012-2013\n","    \"https://data.cityofchicago.org/resource/h8qh-dq5s.json\",\n","    #2013-2014\n","    \"https://data.cityofchicago.org/resource/sege-i4a9.json\",\n","    #2014-2015\n","    \"https://data.cityofchicago.org/resource/mvv3-naxt.json\",\n","    #2015-2016\n","    \"https://data.cityofchicago.org/resource/ppjj-9kn7.json\",\n","    #2016-2017\n","    \"https://data.cityofchicago.org/resource/ciye-b75s.json\",\n","    #2017-2018\n","    \"https://data.cityofchicago.org/resource/n45m-yz4n.json\",\n","    #2018-2019\n","    \"https://data.cityofchicago.org/resource/rau8-hz9p.json\",\n","    #2019-2020\n","    \"https://data.cityofchicago.org/resource/abk6-gwwr.json\",\n","    #2020-2021\n","    \"https://data.cityofchicago.org/resource/gaak-qc7r.json\",\n","    #2021-2022\n","    \"https://data.cityofchicago.org/resource/a3xm-ett9.json\",\n","    #2022-2023\n","    \"https://data.cityofchicago.org/resource/d8hd-y5ce.json\",\n","    #2023-2024\n","    \"https://data.cityofchicago.org/resource/8k6e-w34s.json\"\n","\n","]\n","\n","# Indicator variable for school year of API calls\n","years = [\"2009-2010\", \"2010-2011\", \"2011-2012\", \"2012-2013\", \"2013-2014\",\n","        \"2014-2015\", \"2015-2016\", \"2016-2017\", \"2017-2018\", \"2018-2019\",\n","        \"2019-2020\", \"2020-2021\", \"2021-2022\", \"2022-2023\", \"2023-2024\"\n","        ]\n","\n","# Elementary, middle, or high school\n","cats = [\"ES\", \"ES\", \"ES\", \"ES\", \"ES\",\n","        \"ES\", \"ES\", \"ES\", \"ES\", \"ES\",\n","        \"ES\", \"ES\", \"ES\", \"ES\", \"ES\"]"],"metadata":{"id":"faXfPducuNYt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Stack the API calls\n","\n","ESDistricts = districty(api_endpoints, years, cats)"],"metadata":{"id":"TaHukcFf4OjW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Middle school (more rare)"],"metadata":{"id":"D-Leq0O74U_j"}},{"cell_type":"code","source":["# Define the APIs and category fields\n","api_endpoints = [\n","    #2009-2010\n","    \"https://data.cityofchicago.org/resource/8ak6-a24r.json\",\n","    #2010-2011\n","    \"https://data.cityofchicago.org/resource/u68q-ccjt.json\",\n","    #2011-2012\n","    \"https://data.cityofchicago.org/resource/tb2x-zdvr.json\",\n","    #2012-2013\n","    \"https://data.cityofchicago.org/resource/m7h2-r4sq.json\",\n","    #2013-2014\n","    \"https://data.cityofchicago.org/resource/t9i2-i6vu.json\",\n","    #2014-2015\n","    \"https://data.cityofchicago.org/resource/8dsi-desh.json\",\n","    #2015-2016\n","    \"https://data.cityofchicago.org/resource/yc36-jwii.json\",\n","    #2016-2017\n","    \"https://data.cityofchicago.org/resource/xq8e-2w28.json\",\n","    #2017-2018\n","    \"https://data.cityofchicago.org/resource/i9fz-kj24.json\",\n","    #2018-2019\n","    \"https://data.cityofchicago.org/resource/msv2-rz76.json\",\n","    #2019-2020\n","    \"https://data.cityofchicago.org/resource/68rq-5b3g.json\",\n","    #2020-2021\n","    \"https://data.cityofchicago.org/resource/t5zs-fzmq.json\",\n","    #2021-2022\n","    \"https://data.cityofchicago.org/resource/mq3s-cgin.json\",\n","    #2022-2023\n","    \"https://data.cityofchicago.org/resource/w9ky-kbav.json\",\n","    #2023-2024\n","    \"https://data.cityofchicago.org/resource/njaf-gekg.json\"\n","\n","]\n","\n","# Indicator variable for school year of API calls\n","years = [\"2009-2010\", \"2010-2011\", \"2011-2012\", \"2012-2013\", \"2013-2014\",\n","        \"2014-2015\", \"2015-2016\", \"2016-2017\", \"2017-2018\", \"2018-2019\",\n","        \"2019-2020\", \"2020-2021\", \"2021-2022\", \"2022-2023\", \"2023-2024\"\n","        ]\n","\n","# Elementary, middle, or high school\n","cats = [\"MS\", \"MS\", \"MS\", \"MS\", \"MS\",\n","        \"MS\", \"MS\", \"MS\", \"MS\", \"MS\",\n","        \"MS\", \"MS\", \"MS\", \"MS\", \"MS\"]"],"metadata":{"id":"dOi1U7qL4cY_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Stack the API calls\n","\n","MSDistricts = districty(api_endpoints, years, cats)"],"metadata":{"id":"dJoQaWPc4cg2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["MSDistricts['short_name'] = \"\"\n","\n","cols = MSDistricts.columns"],"metadata":{"id":"rEeqNiXX88E4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["HSDistricts['objectid'] = \"\"\n","HSDistricts['short_name'] = \"\""],"metadata":{"id":"g6ILJRdG9bAH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ESDistricts['school_nam'] = \"\"\n","\n","cols2 = ESDistricts.columns"],"metadata":{"id":"PZ_YWtVQ9OTB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["collies = cols2"],"metadata":{"id":"rsahzc0VMEJc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reorder columns\n","\n","MSDistricts2 = MSDistricts[collies]\n","HSDistricts2 = HSDistricts[collies]"],"metadata":{"id":"tJ22a8Qn8stz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cols2 = ESDistricts.columns"],"metadata":{"id":"rolK1tZlTBTX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cols = MSDistricts2.columns"],"metadata":{"id":"VrXpt249PmEL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cols3 = HSDistricts2.columns"],"metadata":{"id":"kkHfmwhdPpg-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ESDistricts = ESDistricts.reset_index()\n","MSDistricts = MSDistricts.reset_index(drop=True)\n","HSDistricts = HSDistricts.reset_index(drop=True)\n","\n","sets = [ESDistricts, MSDistricts2, HSDistricts2]\n","\n","Districts = pd.concat(sets, ignore_index=True)"],"metadata":{"id":"JlxUUfuQ3-3a"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Multiple school name fields, all inconsistent.\n","\n","school_nm, schoolname, short_name, school_nam"],"metadata":{"id":"sgaLAN2qtrNz"}},{"cell_type":"code","source":["# Replace NULL school_nm and then by other values\n","\n","Districts['SchoolNameCombo']  = Districts['school_nm'].combine_first(\n","    Districts['short_name']).combine_first(\n","        Districts['schoolname']).combine_first(\n","            Districts['school_nam']\n","            )"],"metadata":{"id":"_kMjPRngurLr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Stragglers\n","\n","Districts['SchoolNameCombo'] = np.where(Districts['SchoolNameCombo'] == \"\",\n","                                        Districts['school_nam'],\n","                                        Districts['SchoolNameCombo'])\n","\n","Districts['SchoolNameCombo'] = np.where(Districts['SchoolNameCombo'].isnull(),\n","                                        Districts['schoolname'],\n","                                        Districts['SchoolNameCombo'])"],"metadata":{"id":"yzswoxfly1eM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Multiple school ID fields\n","\n","Districts['SchoolIDCombo'] = np.where(Districts['school_id'].isnull(),\n","                                        Districts['schoolid'],\n","                                        Districts['school_id'])"],"metadata":{"id":"Wp_PQb1W0vWE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Districts.drop(columns=['school_id', 'school_nm', 'brd_rpt',\n","                        'schoolname', 'schoolid', 'schooladdr', 'sch_year', 'objectid',\n","                        'short_name', 'school_nam'], inplace=True)\n","\n","Districts = Districts.rename(columns={\"the_geom\": \"District_geom\",\n","                                      \"shape_leng\": \"District_len\",\n","                                      \"shape_area\": \"District_area\"}\n","                             )\n","\n","# Reorder\n","Districts = Districts[[\n","    'SchoolIDCombo', 'unit_id', 'SchoolNameCombo', 'SchoolYear', 'school_add',\n","    'grade_cat', 'boundarygr', 'sch_type',\n","    'District_geom',  'District_len', 'District_area'\n","       ]]\n","cols = Districts.columns"],"metadata":{"id":"tu5hA4PqyDv1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Export and reload"],"metadata":{"id":"r6XCzQKlD0pI"}},{"cell_type":"code","source":["# Export\n","\n","with open(dir + \"1 Chicago datamart/CPS/Districts_stacked.csv\", 'w') as f:\n","  Districts.to_csv(f)"],"metadata":{"id":"0cEb3hxkDydy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","Districts = pd.read_csv(dir + '1 Chicago datamart/CPS/Districts_stacked.csv')\n","\n","Districts = Districts.drop(columns=['Unnamed: 0'])\n","\n","cols = Districts.columns"],"metadata":{"id":"PNgGVXpKDwq_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Drop columns with NULLs\n","Districts2 = Districts.dropna(axis=1)"],"metadata":{"id":"u4d2Bf9Q1d-7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# School addresses - go to reload after GIS\n","https://data.cityofchicago.org/browse?category=Education&q=%22Chicago+Public+Schools%22&sortBy=relevance\n","### API"],"metadata":{"id":"Lh66bxdLSHKC"}},{"cell_type":"markdown","source":["## Function"],"metadata":{"id":"dzbQSvyEZc-m"}},{"cell_type":"code","source":["## ADDRESSES\n","# Stack API calls for multiple years of school addresses\n","def stacky(api_endpoints, indicators):\n","\n","  dataframes=[]\n","\n","  for endpoint, indicator in zip(api_endpoints, indicators):\n","      response = requests.get(endpoint)\n","      data=response.json()\n","\n","      df = pd.DataFrame(data)\n","      df['SchoolYear'] = indicator\n","      dataframes.append(df)\n","\n","  combined = pd.concat(dataframes, ignore_index=True)\n","  return(combined)"],"metadata":{"id":"Lg0h5l1Z9Qlc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Process"],"metadata":{"id":"ZYPU2XBDZf9u"}},{"cell_type":"code","source":["# Define the APIs and category fields\n","api_endpoints = [\n","    \"https://data.cityofchicago.org/resource/3pjd-kfu4.json\",\n","    \"https://data.cityofchicago.org/resource/7xqa-efsz.json\",\n","    \"https://data.cityofchicago.org/resource/anck-gptm.json\",\n","    \"https://data.cityofchicago.org/resource/98wb-ks45.json\",\n","    \"https://data.cityofchicago.org/resource/dgq3-i7xm.json\",\n","    \"https://data.cityofchicago.org/resource/mntu-576c.json\",\n","    \"https://data.cityofchicago.org/resource/mb74-gx3g.json\",\n","    \"https://data.cityofchicago.org/resource/75e5-35kf.json\",\n","    \"https://data.cityofchicago.org/resource/d2h8-2upd.json\",\n","    \"https://data.cityofchicago.org/resource/95e9-uzwt.json\",\n","    \"https://data.cityofchicago.org/resource/tz49-n8ze.json\",\n","    \"https://data.cityofchicago.org/resource/p83k-txqt.json\",\n","    \"https://data.cityofchicago.org/resource/vfmh-nkyk.json\",\n","    \"https://data.cityofchicago.org/resource/gqgn-ekwj.json\",\n","    \"https://data.cityofchicago.org/resource/mv87-m4mi.json\"\n","]\n","\n","# Indicator variable for school year of API calls\n","indicators = [\"2009-2010\", \"2010-2011\", \"2011-2012\", \"2012-2013\", \"2013-2014\",\n","              \"2014-2015\", \"2015-2016\", \"2016-2017\", \"2017-2018\", \"2018-2019\",\n","              \"2019-2020\", \"2020-2021\", \"2021-2022\", \"2022-2023\", \"2023-2024\"]"],"metadata":{"id":"_ldXPwQqIqr7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Stack the API calls\n","\n","addresses = stacky(api_endpoints, indicators)"],"metadata":{"id":"Uosr1WfzYYPD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Extract coordinates into separate columns\n","addresses['longitude'] = addresses['the_geom'].apply(lambda x: x['coordinates'][0])\n","addresses['latitude'] = addresses['the_geom'].apply(lambda x: x['coordinates'][1])"],"metadata":{"id":"ZRuyUM4gjAvJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Multiple school type fields\n","\n","addresses['SchoolTypeCombo'] = np.where(addresses['sch_type'].isnull(),\n","                                        addresses['school_typ'],\n","                                        addresses['sch_type'])"],"metadata":{"id":"SCgY6owI5ofl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Drop select columns\n","\n","addresses = addresses[addresses.columns.drop(list(addresses.filter(regex='computed')))]\n","\n","addresses = addresses.drop(columns=['x', 'y', 'sch_type', 'school_typ'])"],"metadata":{"id":"LXyTaxCm4zNs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Export csv backup"],"metadata":{"id":"73iJ_jqcXNal"}},{"cell_type":"code","source":["# Export\n","\n","with open(dir + \"1 Chicago datamart/CPS/School_locations_stacked.csv\", 'w') as f:\n","  addresses.to_csv(f)"],"metadata":{"id":"uw-2rwDeXMtU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## To GIS"],"metadata":{"id":"ORjcJG6qMMoF"}},{"cell_type":"code","source":["# Drop columns with NULLs\n","addresses2 = addresses.dropna(axis=1)"],"metadata":{"id":"2SGeEsksig_t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["add_shp = gpd.GeoDataFrame(addresses2,\n","                           geometry=gpd.points_from_xy(addresses2.longitude, addresses2.latitude),\n","                           crs=crs)"],"metadata":{"id":"4tZger-MJceL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Join to census tract"],"metadata":{"id":"LlubvHP56x1j"}},{"cell_type":"code","source":["merge1 = gpd.sjoin(add_shp, tracts_shp, how='left', predicate='within')\n","merge1.drop(columns=['index_right'], inplace=True)"],"metadata":{"id":"8qQwRvB2EQ04"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Export and reload"],"metadata":{"id":"cH7g_zPQJ9On"}},{"cell_type":"code","source":["with open(dir + \"1 Chicago datamart/CPS/School_locations_stacked_ward.csv\", 'w') as f:\n","  merge1.to_csv(f)"],"metadata":{"id":"MvjH02JjGhXD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","SchoolTractWard = pd.read_csv(dir + '1 Chicago datamart/CPS/School_locations_stacked_ward.csv')\n","SchoolTractWard.drop(columns=[\"Unnamed: 0\"], inplace=True)"],"metadata":{"id":"v4h0y7eYGjSL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# School metrics - go to reload\n","\n","Download: https://www.cps.edu/about/district-data/metrics/accountability-reports/\n","\n","See also: https://www.cps.edu/about/district-data/metrics/ and https://www.cps.edu/about/district-data/metrics/assessment-reports/"],"metadata":{"id":"ssm_hpU7fTzQ"}},{"cell_type":"markdown","source":["## Functions: elem, high, combo, options"],"metadata":{"id":"ZSmgrTv3BqAI"}},{"cell_type":"code","source":["## METRICS\n","# Stack excel files for school ratings, ELEMENTARY tab only\n","def elem(filenames, years):\n","\n","  dataframes=[]\n","\n","  for filename, year in zip(filenames, years):\n","      data = pd.read_excel(dir + 'CPS/raw/' + filename,\n","                         sheet_name=(\"Elem Schools (grds PreK-8 only)\"),\n","                           dtype=str,\n","                           skiprows=4,\n","                           header=None,\n","                           usecols=(0,1,2,3,4,5,\n","                                    6,10,14,\n","                                    50,54,\n","                                    70,73)\n","                           )\n","\n","      data.columns=['SchoolID', 'SchoolName', 'Network', 'ElemSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                  'GrowthReadingPct', 'GrowthMathPct', 'MeetExceedNationalGrowthPct',\n","                  'AttainReadingPct3to8', 'AttainMathPct3to8',\n","                  'AvgDailyAttendance', 'MyVoiceMySchoolScore'\n","                  ]\n","\n","      data['SchoolYear'] = year\n","      data['OriginFile'] = 'accountability_sqrpratings, elem'\n","      data['Level'] = 'ES'\n","\n","      dataframes.append(data)\n","\n","  combined = pd.concat(dataframes, ignore_index=True)\n","  return(combined)\n","\n","\n","\n","# Stack excel files for school ratings, HIGH SCHOOL tab only\n","def high(filenames, years):\n","\n","  dataframes=[]\n","\n","  for filename, year in zip(filenames, years):\n","      data = pd.read_excel(dir + 'CPS/raw/' + filename,\n","                         sheet_name=(\"High Schools (grds 9-12 only)\"),\n","                           dtype=str,\n","                           skiprows=4,\n","                           header=None,\n","                           usecols=(0,1,2,\n","                                    3,4,5,\n","                                    6,26,\n","                                    30,33,36,\n","                                    39,42,45,\n","                                    48,51)\n","                          )\n","      data.columns=['SchoolID', 'SchoolName', 'Network',\n","                  'HSSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                  'ACTGrowthPct', 'ACTAttainPct',\n","                  'Freshmen', 'CohortGrad', 'Dropout1Yr',\n","                  'CollegeEnroll', 'CollegePersist', 'AP_IB_CollCredit_CareerCred',\n","                  'AvgDailyAttendanceHS', 'MyVoiceMySchoolScoreHS'\n","                  ]\n","\n","      data['SchoolYear'] = year\n","      data['OriginFile'] = 'accountability_sqrpratings, HS'\n","      data['Level'] = 'HS'\n","\n","\n","      dataframes.append(data)\n","\n","  combined = pd.concat(dataframes, ignore_index=True)\n","  return(combined)\n","\n","\n","\n","# Stack excel files for school ratings, COMBO tab only\n","def combo(filenames, years):\n","\n","  elemframes=[]\n","  hsframes=[]\n","\n","  for filename, year in zip(filenames, years):\n","      data = pd.read_excel(dir + 'CPS/raw/' + filename,\n","                         sheet_name=(\"Combo Schools (grds PreK-12)\"),\n","                           dtype=str,\n","                           skiprows=4,\n","                           header=None,\n","                           usecols=(0,1,2,\n","                                    # elem\n","                                    3,\n","\n","                                    # hs\n","                                    5,\n","\n","                                    # both\n","                                    8,9,\n","\n","                                    # Elem\n","                                    10,14,18,\n","                                    54,58,\n","                                    74,77,\n","\n","                                    # High school\n","                                    83, 103,\n","                                    107,110,113,\n","                                    116,119,122,\n","                                    125,128)\n","                           )\n","      data.columns=['SchoolID', 'SchoolName', 'Network',\n","                    'ElemSQRPPts',\n","                    'HSSQRPPts',\n","                    'SQRPRating', 'AccountabilityStatus',\n","\n","                    # Elementary\n","\n","                    'GrowthReadingPct', 'GrowthMathPct', 'MeetExceedNationalGrowthPct',\n","                    'AttainReadingPct3to8', 'AttainMathPct3to8',\n","                    'AvgDailyAttendance', 'MyVoiceMySchoolScore',\n","\n","                    # High school\n","\n","                    'ACTGrowthPct', 'ACTAttainPct',\n","                    'Freshmen', 'CohortGrad', 'Dropout1Yr',\n","                    'CollegeEnroll', 'CollegePersist', 'AP_IB_CollCredit_CareerCred',\n","                    'AvgDailyAttendanceHS', 'MyVoiceMySchoolScoreHS'\n","                    ]\n","\n","      data['SchoolYear'] = year\n","      data['OriginFile'] = 'accountability_sqrpratings, combo'\n","\n","      #dataframes.append(data)\n","\n","      elem = data.loc[:, ('SchoolID', 'SchoolName', 'Network', 'ElemSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                  'GrowthReadingPct', 'GrowthMathPct', 'MeetExceedNationalGrowthPct',\n","                  'AttainReadingPct3to8', 'AttainMathPct3to8',\n","                  'AvgDailyAttendance', 'MyVoiceMySchoolScore', 'SchoolYear',\n","                  'OriginFile')\n","      ]\n","      elem['Level'] = 'ES'\n","\n","      elemframes.append(elem)\n","\n","      hs = data.loc[:, ('SchoolID', 'SchoolName', 'Network',\n","                  'HSSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                  'ACTGrowthPct', 'ACTAttainPct',\n","                  'Freshmen', 'CohortGrad', 'Dropout1Yr',\n","                  'CollegeEnroll', 'CollegePersist', 'AP_IB_CollCredit_CareerCred',\n","                  'AvgDailyAttendanceHS', 'MyVoiceMySchoolScoreHS', 'SchoolYear',\n","                  'OriginFile')\n","      ]\n","      hs['Level'] = 'HS'\n","\n","      hsframes.append(hs)\n","\n","  elemdf = pd.concat(elemframes, ignore_index=True)\n","  hsdf = pd.concat(hsframes, ignore_index=True)\n","  return(elemdf, hsdf)\n","\n","\n","\n","\n","# Stack excel files for school ratings, OPTIONS tab only\n","def options(filenames, years):\n","\n","  elemframes=[]\n","  hsframes=[]\n","\n","  for filename, year in zip(filenames, years):\n","      data = pd.read_excel(dir + 'CPS/raw/' + filename,\n","                         sheet_name=(\"Option Schools\"),\n","                           dtype=str,\n","                           skiprows=4,\n","                           header=None,\n","                           usecols=(0,1,2,\n","                                    3,4,5,\n","                                    31\n","                                    )\n","                         )\n","      data.columns=['SchoolID', 'SchoolName', 'Network',\n","                  'SQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                  'AvgDailyAttendance'\n","                  ]\n","\n","      data['MyVoiceMySchoolScore'] = 'Options'\n","\n","      data['SchoolYear'] = year\n","      data['OriginFile'] = 'accountability_sqrpratings, options'\n","\n","      data['Level'] = data['SchoolName'].apply(lambda x: 'HS' if 'HS' in x else 'ES')\n","\n","      elem = data[data['Level'] == 'ES']\n","      elemframes.append(elem)\n","\n","      hs = data[data['Level'] == 'HS']\n","      hsframes.append(hs)\n","\n","  elemdf = pd.concat(elemframes, ignore_index=True)\n","  # Rename\n","  elemdf = elemdf.rename(columns={'SQRPPts': 'ElemSQRPPts'})\n","  # Add missing columns\n","  elemdf['GrowthReadingPct'] = ''\n","  elemdf['GrowthMathPct'] = ''\n","  elemdf['MeetExceedNationalGrowthPct'] = ''\n","  elemdf['AttainReadingPct3to8'] = ''\n","  elemdf['AttainMathPct3to8'] = ''\n","  # reorder\n","  elemdf = elemdf[['SchoolID', 'SchoolName', 'Network', 'ElemSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                   'GrowthReadingPct', 'GrowthMathPct', 'MeetExceedNationalGrowthPct',\n","                   'AttainReadingPct3to8', 'AttainMathPct3to8',\n","                   'AvgDailyAttendance', 'MyVoiceMySchoolScore',\n","                   'SchoolYear',\n","                   'OriginFile', 'Level'\n","                   ]]\n","\n","  hsdf = pd.concat(hsframes, ignore_index=True)\n","  # Rename\n","  hsdf = hsdf.rename(columns={'SQRPPts': 'HSSQRPPts', 'AvgDailyAttendance': 'AvgDailyAttendanceHS',\n","                              'MyVoiceMySchoolScore': 'MyVoiceMySchoolScoreHS'})\n","  # Add missing columns\n","  hsdf['ACTGrowthPct'] = ''\n","  hsdf['ACTAttainPct'] = ''\n","  hsdf['Freshmen'] = ''\n","  hsdf['CohortGrad'] = ''\n","  hsdf['Dropout1Yr'] = ''\n","  hsdf['CollegeEnroll'] = ''\n","  hsdf['CollegePersist'] = ''\n","  hsdf['AP_IB_CollCredit_CareerCred'] = ''\n","  hsdf['MyVoiceMySchoolScoreHS'] = ''\n","\n","  # Reorder\n","  hsdf = hsdf[['SchoolID', 'SchoolName', 'Network',\n","               'HSSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","               'ACTGrowthPct', 'ACTAttainPct',\n","               'Freshmen', 'CohortGrad', 'Dropout1Yr',\n","               'CollegeEnroll', 'CollegePersist', 'AP_IB_CollCredit_CareerCred',\n","               'AvgDailyAttendanceHS', 'MyVoiceMySchoolScoreHS',\n","               'SchoolYear',\n","               'OriginFile', 'Level'\n","               ]]\n","  return(elemdf, hsdf)"],"metadata":{"id":"P2ll_2_1ZWLF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Historical file functions (elemhist, hshist)"],"metadata":{"id":"2jxADw1qPWpB"}},{"cell_type":"code","source":["# Extract from historical files\n","# Stack excel file TABS for ELEMENTARY\n","\n","def elemhist(tab, years):\n","  elemframes=[]\n","\n","  for tab, year in zip(tabs, years):\n","    data = pd.read_excel(dir + \"1 Chicago datamart/CPS/raw/2013_performancepolicy_results_03262014.xls\",\n","                         dtype=str,\n","                         sheet_name=(tab),\n","                         skiprows=2,\n","                         header=None,\n","                         usecols=(0,2,3,5,7,\n","                                  14,24,\n","                                  65)\n","                         )\n","\n","    # No accountability status, no growth, no my voice my school\n","    # Different order\n","    data.columns=['SchoolID', 'SchoolName', 'Network', 'SQRPRating', 'ElemSQRPPts',\n","                  'AttainMathPct3to8', 'AttainReadingPct3to8',\n","                  'AvgDailyAttendance'\n","                  ]\n","    data['SchoolYear'] = year\n","    data['OriginFile'] = 'historical, elem, limited metrics'\n","    data['Level'] = 'ES'\n","\n","\n","\n","    elemframes.append(data)\n","\n","  elemdf = pd.concat(elemframes, ignore_index=True)\n","\n","  # Add missing columns\n","  elemdf['AccountabilityStatus'] = ''\n","  elemdf['GrowthReadingPct']  = ''\n","  elemdf['GrowthMathPct']  = ''\n","  elemdf['MeetExceedNationalGrowthPct']  = ''\n","  elemdf['MyVoiceMySchoolScore']  = ''\n","\n","  # Reorder\n","  elemdf = elemdf[['SchoolID', 'SchoolName', 'Network', 'ElemSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                'GrowthReadingPct', 'GrowthMathPct', 'MeetExceedNationalGrowthPct',\n","                'AttainReadingPct3to8', 'AttainMathPct3to8',\n","                'AvgDailyAttendance', 'MyVoiceMySchoolScore',\n","                'SchoolYear',\n","                'OriginFile',  'Level'\n","                ]]\n","  return(elemdf)\n","\n","# Stack excel file TABS for HIGH SCHOOL\n","\n","def hshist(tabs, years):\n","  hsframes=[]\n","\n","  for tab, year in zip(tabs, years):\n","    data = pd.read_excel(dir + \"CPS/raw/2013_performancepolicy_results_03262014.xls\",\n","                         dtype=str,\n","                         sheet_name=(tab),\n","                         skiprows=2,\n","                         header=None,\n","                         usecols=(0,2,3,\n","                                  5,7,\n","                                  24,34,\n","                                  44\n","                                  )\n","                         )\n","    # No ACT, no college, no my voice my school\n","    data.columns=['SchoolID', 'SchoolName', 'Network',\n","                  'SQRPRating', 'HSSQRPPts',\n","                  'Dropout1Yr', 'Freshmen',\n","                  'AvgDailyAttendanceHS'\n","                  ]\n","\n","    data['SchoolYear'] = year\n","    data['Level'] = 'High school'\n","    data['OriginFile'] = 'historical, hs, limited metrics'\n","\n","    hsframes.append(data)\n","\n","  hsdf = pd.concat(hsframes, ignore_index=True)\n","\n","  # Add missing columns\n","  hsdf['AccountabilityStatus'] = ''\n","  hsdf['ACTGrowthPct']  = ''\n","  hsdf['ACTAttainPct']  = ''\n","  hsdf['CohortGrad']  = ''\n","  hsdf['CollegeEnroll']  = ''\n","  hsdf['CollegePersist']  = ''\n","  hsdf['AP_IB_CollCredit_CareerCred']  = ''\n","  hsdf['CohortGrad']  = ''\n","  hsdf['MyVoiceMySchoolScoreHS']  = ''\n","\n","  # Reorder\n","  hsdf = hsdf[['SchoolID', 'SchoolName', 'Network',\n","                'HSSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                'ACTGrowthPct', 'ACTAttainPct',\n","                'Freshmen', 'CohortGrad', 'Dropout1Yr',\n","                'CollegeEnroll', 'CollegePersist', 'AP_IB_CollCredit_CareerCred',\n","                'AvgDailyAttendanceHS', 'MyVoiceMySchoolScoreHS',\n","                'SchoolYear',\n","                'OriginFile', 'Level'\n","                ]]\n","\n","  return(hsdf)"],"metadata":{"id":"vuVPlJlMLyx3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Process"],"metadata":{"id":"F1MC3tk5Z7cS"}},{"cell_type":"code","source":["# Define the filenames and school years - not historical\n","\n","metric_files = [\n","    \"accountability_sqrpratings_2019-2020_schoollevel_v20200305.xls\",\n","    \"accountability_sqrpratings_2018-2019_schoollevel.xls\",\n","    \"accountability_sqrpratings_2017-2018_schoollevel.xls\",\n","    \"accountability_sqrpratings_2016-2017_schoollevel.xls\",\n","    \"sy15_sqrp_report_cpsedu_final_20151110_full.xlsx\",\n","    \"sy14_sqrp_report_cpsedu_final_20141204.xlsx\"\n","]\n","\n","# Indicator variable for school year of API calls\n","indicators = [\"2019-2020\", \"2018-2019\", \"2017-2018\", \"2016-2017\", \"2015-2016\",\n","              \"2014-2015\"]"],"metadata":{"id":"zFwcKxeSwVsP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["el = elem(metric_files, indicators)"],"metadata":{"id":"1_La5RhVjTL6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["hs = high(metric_files, indicators)"],"metadata":{"id":"JwcsR1KhjeaH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Combination"],"metadata":{"id":"UbxjHtKqWc6p"}},{"cell_type":"code","source":["# Stack the elementary and high school metrics from the combination tab\n","\n","elem_combo, hs_combo = combo(metric_files, indicators)"],"metadata":{"id":"7XTbV_Aq6XE4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Options"],"metadata":{"id":"xVOkCUylWgsk"}},{"cell_type":"code","source":["elemopt, hsopt = options(metric_files, indicators)"],"metadata":{"id":"O0SFL_iAWjTW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Add in Historical"],"metadata":{"id":"geqo5Lydbrom"}},{"cell_type":"code","source":["# Define years and tabs\n","\n","tabs = [\n","    \"Elem 2009\", \"Elem 2010\", \"Elem 2011\", \"Elem 2012\", \"Elem 2013\"\n","    ]\n","\n","# Indicator variable for school year of tabs\n","years = [\"2009-2010\", \"2010-2011\", \"2011-2012\", \"2012-2013\", \"2013-2014\"]"],"metadata":{"id":"aMvyG1x9ov-x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Stack the elementary tabs\n","\n","elhx = elemhist(tabs, years)"],"metadata":{"id":"Vz3ilT2thFjf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tabs = [\n","    \"HS 2009\", \"HS 2010\", \"HS 2011\", \"HS 2012\", \"High 2013\"\n","    ]\n","\n","# Indicator variable for school year of tabs\n","years = [\"2009-2010\", \"2010-2011\", \"2011-2012\", \"2012-2013\", \"2013-2014\"]"],"metadata":{"id":"5G7M7eA9sSk5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Stack the high school tabs\n","\n","hshx = hshist(tabs, years)"],"metadata":{"id":"djK4i8ekb1gF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Elementary - stack"],"metadata":{"id":"vft_lur8Wj_L"}},{"cell_type":"code","source":["from pandas.core.frame import frame_sub_kwargs\n","# Stack the elementary sheets\n","\n","# Combine elementary, options, and combo file\n","frames = [el, elem_combo, elemopt, elhx]\n","elemetrics = pd.concat(frames, ignore_index=True)"],"metadata":{"id":"HWRwq5xYwVyS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Save elementary\n","\n","with open(dir + \"/CPS/Elem_metrics_stacked.csv\", 'w') as f:\n","  elemetrics.to_csv(f)"],"metadata":{"id":"q6srgzsj3t5b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","elemetrics = pd.read_csv(dir + '/CPS/Elem_metrics_stacked.csv')\n","elemetrics = elemetrics.drop(columns=[\"Unnamed: 0\"])"],"metadata":{"id":"VNHx-yzA2JQ-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## High school - stack"],"metadata":{"id":"Zs7hubmpg9_F"}},{"cell_type":"code","source":["# Combine hs, options, combo, and hx file file\n","frames = [hs, hs_combo, hsopt, hshx]\n","highmetrics = pd.concat(frames, ignore_index=True)"],"metadata":{"id":"QOV7of1xcZa8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Save high school\n","\n","with open(dir + \"/CPS/HS_metrics_stacked1424.csv\", 'w') as f:\n","  highmetrics.to_csv(f)"],"metadata":{"id":"ZZGax69g6W-E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","highmetrics = pd.read_csv(dir + '/CPS/HS_metrics_stacked1424.csv')\n","highmetrics = highmetrics.drop(columns=[\"Unnamed: 0\"])"],"metadata":{"id":"8XbuyryP2D5Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["hscols = highmetrics.columns.tolist()"],"metadata":{"id":"iWM0V8Ldcvc1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### All: Common metrics"],"metadata":{"id":"EETF1ExgWqxt"}},{"cell_type":"code","source":["# Stack common elementary and high school common metrics\n","\n","## Elementary\n","elemin = elemetrics[['SchoolID', 'SchoolName', 'Network', 'ElemSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                     'AvgDailyAttendance', 'MyVoiceMySchoolScore',\t'SchoolYear', 'Level',\n","                     'OriginFile']]\n","### Rename - had separate names b/c of combo file\n","elemin = elemin.rename(columns={\"ElemSQRPPts\": \"SQRPPts\"})\n","\n","## High school\n","hsmin = highmetrics[['SchoolID', 'SchoolName', 'Network', 'HSSQRPPts', 'SQRPRating', 'AccountabilityStatus',\n","                     'AvgDailyAttendanceHS','MyVoiceMySchoolScoreHS', 'SchoolYear', 'Level',\n","                     'OriginFile']]\n","### Rename - had separate names b/c of combo file\n","hsmin = hsmin.rename(columns={\"HSSQRPPts\": \"SQRPPts\", 'AvgDailyAttendanceHS': \"AvgDailyAttendance\",\n","                             'MyVoiceMySchoolScoreHS': 'MyVoiceMySchoolScore'})\n","\n","## Stack\n","allmetrics = pd.concat([elemin, hsmin], ignore_index=True)"],"metadata":{"id":"NkT3Azo9_v11"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Export and reload line listings"],"metadata":{"id":"jT3gfQbmaF6n"}},{"cell_type":"code","source":["# Save all metrics (elementary and high school)\n","\n","allmetrics['school_id'] = allmetrics['SchoolID']\n","\n","with open(dir + \"1 Chicago datamart/CPS/ALL_metrics_stacked0920.csv\", 'w') as f:\n","  allmetrics.to_csv(f)"],"metadata":{"id":"gqwrpGoxBGfE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","allmetrics = pd.read_csv(dir + '1 Chicago datamart/CPS/ALL_metrics_stacked0920.csv')\n","allmetrics.drop(columns=[\"Unnamed: 0\", 'SchoolID'], inplace=True)\n","allmetrics = allmetrics.rename(columns={'Level': 'grade_cat'})"],"metadata":{"id":"9yH1dABVaKos"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"Ktzew0EtPZqB"}},{"cell_type":"markdown","source":["# Import and limit national data"],"metadata":{"id":"Xig_2GNkN52Q"}},{"cell_type":"code","source":["# Reload\n","natl = pd.read_csv(curated + \"00080_Schools_National.csv\")\n","\n","natl = pd.merge(tractsdf, natl, on='GEOID10', how='left')"],"metadata":{"id":"VDP_wJyXOAgT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Aggregate to tract"],"metadata":{"id":"sF1ArxJcjAmh"}},{"cell_type":"code","source":["# Reload\n","\n","Schools = pd.read_csv(curated + '00082_Schools_Chicago_line.csv')\n","Schools = Schools.drop(columns=[\"Unnamed: 0\", 'SCHL_IDX'])"],"metadata":{"id":"e-W3T5AqQE56"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Schools.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":469},"id":"_L6o25JZQAuz","executionInfo":{"status":"ok","timestamp":1726782398439,"user_tz":300,"elapsed":3,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"97644954-6398-4eec-8655-f348f5ae87c8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   school_id  unit_id SchoolNameCombo grade_cat                 boundarygr  \\\n","0   609971.0   3800.0         HARVARD        ES  K, 1, 2, 3, 4, 5, 6, 7, 8   \n","1   610019.0      NaN             NaN        ES                        NaN   \n","2   610102.0   5170.0         OGLESBY        ES  K, 1, 2, 3, 4, 5, 6, 7, 8   \n","3   610112.0   5270.0          PARKER        ES  K, 1, 2, 3, 4, 5, 6, 7, 8   \n","4   610112.0   5270.0          PARKER        ES                          K   \n","\n","                    sch_type Network         school_add  longitude   latitude  \\\n","0  District, non-alternative      28  7525 S HARVARD AV -87.632700  41.757319   \n","1                        NaN      14                NaN -87.640931  41.776545   \n","2  District, non-alternative      14    7646 S GREEN ST -87.645508  41.754744   \n","3  District, non-alternative      14  6800 S STEWART AV -87.635349  41.770745   \n","4  District, non-alternative      14  6800 S STEWART AV -87.635349  41.770745   \n","\n","       GEOID10  commarea  commarea_n  ward  \\\n","0  17031691200        69          69     6   \n","1  17031680900        68          68    20   \n","2  17031710200        71          71    17   \n","3  17031681200        68          68     6   \n","4  17031681200        68          68     6   \n","\n","                                       District_geom  District_len  \\\n","0  {'type': 'MultiPolygon', 'coordinates': [[[[-8...  17107.781835   \n","1                                                NaN           NaN   \n","2  {'type': 'MultiPolygon', 'coordinates': [[[[-8...  14270.235591   \n","3  {'type': 'MultiPolygon', 'coordinates': [[[[-8...  13743.115324   \n","4  {'type': 'MultiPolygon', 'coordinates': [[[[-8...   5566.795332   \n","\n","   District_area SchoolYear SQRPPts SQRPRating AccountabilityStatus  \\\n","0   1.184031e+07  2009-2010      42      0.595                  NaN   \n","1            NaN  2009-2010      42      0.405                  NaN   \n","2   8.249756e+06  2009-2010      42      0.167                  NaN   \n","3   7.696067e+06  2009-2010      42       0.19                  NaN   \n","4   1.616534e+06  2009-2010      42       0.19                  NaN   \n","\n","  AvgDailyAttendance MyVoiceMySchoolScore                         OriginFile  \n","0                  4                  NaN  historical, elem, limited metrics  \n","1                1.5                  NaN  historical, elem, limited metrics  \n","2               -1.1                  NaN  historical, elem, limited metrics  \n","3                0.3                  NaN  historical, elem, limited metrics  \n","4                0.3                  NaN  historical, elem, limited metrics  "],"text/html":["\n","  <div id=\"df-237995ee-9997-4f3b-a1ad-d589ea4eba24\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>school_id</th>\n","      <th>unit_id</th>\n","      <th>SchoolNameCombo</th>\n","      <th>grade_cat</th>\n","      <th>boundarygr</th>\n","      <th>sch_type</th>\n","      <th>Network</th>\n","      <th>school_add</th>\n","      <th>longitude</th>\n","      <th>latitude</th>\n","      <th>GEOID10</th>\n","      <th>commarea</th>\n","      <th>commarea_n</th>\n","      <th>ward</th>\n","      <th>District_geom</th>\n","      <th>District_len</th>\n","      <th>District_area</th>\n","      <th>SchoolYear</th>\n","      <th>SQRPPts</th>\n","      <th>SQRPRating</th>\n","      <th>AccountabilityStatus</th>\n","      <th>AvgDailyAttendance</th>\n","      <th>MyVoiceMySchoolScore</th>\n","      <th>OriginFile</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>609971.0</td>\n","      <td>3800.0</td>\n","      <td>HARVARD</td>\n","      <td>ES</td>\n","      <td>K, 1, 2, 3, 4, 5, 6, 7, 8</td>\n","      <td>District, non-alternative</td>\n","      <td>28</td>\n","      <td>7525 S HARVARD AV</td>\n","      <td>-87.632700</td>\n","      <td>41.757319</td>\n","      <td>17031691200</td>\n","      <td>69</td>\n","      <td>69</td>\n","      <td>6</td>\n","      <td>{'type': 'MultiPolygon', 'coordinates': [[[[-8...</td>\n","      <td>17107.781835</td>\n","      <td>1.184031e+07</td>\n","      <td>2009-2010</td>\n","      <td>42</td>\n","      <td>0.595</td>\n","      <td>NaN</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>historical, elem, limited metrics</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>610019.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>ES</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>14</td>\n","      <td>NaN</td>\n","      <td>-87.640931</td>\n","      <td>41.776545</td>\n","      <td>17031680900</td>\n","      <td>68</td>\n","      <td>68</td>\n","      <td>20</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2009-2010</td>\n","      <td>42</td>\n","      <td>0.405</td>\n","      <td>NaN</td>\n","      <td>1.5</td>\n","      <td>NaN</td>\n","      <td>historical, elem, limited metrics</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>610102.0</td>\n","      <td>5170.0</td>\n","      <td>OGLESBY</td>\n","      <td>ES</td>\n","      <td>K, 1, 2, 3, 4, 5, 6, 7, 8</td>\n","      <td>District, non-alternative</td>\n","      <td>14</td>\n","      <td>7646 S GREEN ST</td>\n","      <td>-87.645508</td>\n","      <td>41.754744</td>\n","      <td>17031710200</td>\n","      <td>71</td>\n","      <td>71</td>\n","      <td>17</td>\n","      <td>{'type': 'MultiPolygon', 'coordinates': [[[[-8...</td>\n","      <td>14270.235591</td>\n","      <td>8.249756e+06</td>\n","      <td>2009-2010</td>\n","      <td>42</td>\n","      <td>0.167</td>\n","      <td>NaN</td>\n","      <td>-1.1</td>\n","      <td>NaN</td>\n","      <td>historical, elem, limited metrics</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>610112.0</td>\n","      <td>5270.0</td>\n","      <td>PARKER</td>\n","      <td>ES</td>\n","      <td>K, 1, 2, 3, 4, 5, 6, 7, 8</td>\n","      <td>District, non-alternative</td>\n","      <td>14</td>\n","      <td>6800 S STEWART AV</td>\n","      <td>-87.635349</td>\n","      <td>41.770745</td>\n","      <td>17031681200</td>\n","      <td>68</td>\n","      <td>68</td>\n","      <td>6</td>\n","      <td>{'type': 'MultiPolygon', 'coordinates': [[[[-8...</td>\n","      <td>13743.115324</td>\n","      <td>7.696067e+06</td>\n","      <td>2009-2010</td>\n","      <td>42</td>\n","      <td>0.19</td>\n","      <td>NaN</td>\n","      <td>0.3</td>\n","      <td>NaN</td>\n","      <td>historical, elem, limited metrics</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>610112.0</td>\n","      <td>5270.0</td>\n","      <td>PARKER</td>\n","      <td>ES</td>\n","      <td>K</td>\n","      <td>District, non-alternative</td>\n","      <td>14</td>\n","      <td>6800 S STEWART AV</td>\n","      <td>-87.635349</td>\n","      <td>41.770745</td>\n","      <td>17031681200</td>\n","      <td>68</td>\n","      <td>68</td>\n","      <td>6</td>\n","      <td>{'type': 'MultiPolygon', 'coordinates': [[[[-8...</td>\n","      <td>5566.795332</td>\n","      <td>1.616534e+06</td>\n","      <td>2009-2010</td>\n","      <td>42</td>\n","      <td>0.19</td>\n","      <td>NaN</td>\n","      <td>0.3</td>\n","      <td>NaN</td>\n","      <td>historical, elem, limited metrics</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-237995ee-9997-4f3b-a1ad-d589ea4eba24')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-237995ee-9997-4f3b-a1ad-d589ea4eba24 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-237995ee-9997-4f3b-a1ad-d589ea4eba24');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5ea8d973-9b42-4de4-b464-a1ee181e4a9b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ea8d973-9b42-4de4-b464-a1ee181e4a9b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5ea8d973-9b42-4de4-b464-a1ee181e4a9b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"Schools"}},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["exclude_years = ['2020-2021', '2021-2022', '2022-2023']\n","\n","temp = Schools[~Schools['SchoolYear'].isin(exclude_years)]\n","\n","columns_to_convert = ['SQRPPts', 'SQRPRating', 'AvgDailyAttendance', 'MyVoiceMySchoolScore']\n","\n","temp[columns_to_convert] = temp[columns_to_convert].apply(pd.to_numeric, errors='coerce')\n","\n","\n","schoolsagg = temp.groupby('GEOID10').agg(\n","    {\n","    'SQRPPts': 'mean',\n","    'SQRPRating': 'mean',\n","    'AvgDailyAttendance': 'mean',\n","    'MyVoiceMySchoolScore': 'mean'}\n","                                         ).reset_index()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S093x58Xjrta","executionInfo":{"status":"ok","timestamp":1726782510945,"user_tz":300,"elapsed":141,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"4b81b335-5fd9-4eb6-9b9e-dc0504679209"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-71-d4e232c7ed5e>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  temp[columns_to_convert] = temp[columns_to_convert].apply(pd.to_numeric, errors='coerce')\n"]}]},{"cell_type":"markdown","source":["# Merge"],"metadata":{"id":"FG30h_NyOY2y"}},{"cell_type":"code","source":["schoolsagg = pd.merge(natl, schoolsagg, on='GEOID10', how='left')\n","# schoolsagg.drop(columns=['Unnamed: 0'], inplace=True)"],"metadata":{"id":"5mQ4CJjeOW00"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Export and reload"],"metadata":{"id":"bw_wOO3OmNDu"}},{"cell_type":"code","source":["with open(curated + \"00081_Schools_Chicago.csv\", 'w') as f:\n","  schoolsagg.to_csv(f)"],"metadata":{"id":"QmQV6R3AmMZh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","schools = pd.read_csv(curated + '00081_Schools_Chicago.csv')\n","schools.drop(columns=[\"Unnamed: 0\"], inplace=True)\n","schools.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"hM0LTbB3PwWY","executionInfo":{"status":"ok","timestamp":1727192859500,"user_tz":300,"elapsed":708,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"8c7bfd62-c91a-46f4-cb8a-ed856bc4d464"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       GEOID10   SCHL_IDX    SQRPPts  SQRPRating  AvgDailyAttendance  \\\n","0  17031842400  41.000000  13.583333    33.63575           54.473333   \n","1  17031840300  52.333333  15.154545    32.44750           61.700000   \n","2  17031841100  79.500000  19.781818    36.11650           63.354545   \n","3  17031841200  27.666667  16.627273    24.00250           62.190909   \n","4  17031839000  60.000000   4.666667         NaN           49.866667   \n","\n","   MyVoiceMySchoolScore  \n","0              4.555556  \n","1              5.000000  \n","2              5.000000  \n","3              5.000000  \n","4              5.000000  "],"text/html":["\n","  <div id=\"df-33121af4-0d0c-420c-bfdf-bc84b5c92ff9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>GEOID10</th>\n","      <th>SCHL_IDX</th>\n","      <th>SQRPPts</th>\n","      <th>SQRPRating</th>\n","      <th>AvgDailyAttendance</th>\n","      <th>MyVoiceMySchoolScore</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17031842400</td>\n","      <td>41.000000</td>\n","      <td>13.583333</td>\n","      <td>33.63575</td>\n","      <td>54.473333</td>\n","      <td>4.555556</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>17031840300</td>\n","      <td>52.333333</td>\n","      <td>15.154545</td>\n","      <td>32.44750</td>\n","      <td>61.700000</td>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>17031841100</td>\n","      <td>79.500000</td>\n","      <td>19.781818</td>\n","      <td>36.11650</td>\n","      <td>63.354545</td>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17031841200</td>\n","      <td>27.666667</td>\n","      <td>16.627273</td>\n","      <td>24.00250</td>\n","      <td>62.190909</td>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17031839000</td>\n","      <td>60.000000</td>\n","      <td>4.666667</td>\n","      <td>NaN</td>\n","      <td>49.866667</td>\n","      <td>5.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33121af4-0d0c-420c-bfdf-bc84b5c92ff9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-33121af4-0d0c-420c-bfdf-bc84b5c92ff9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-33121af4-0d0c-420c-bfdf-bc84b5c92ff9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a93c04c6-e8e6-4642-ad83-90977bacdba1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a93c04c6-e8e6-4642-ad83-90977bacdba1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a93c04c6-e8e6-4642-ad83-90977bacdba1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"schools","summary":"{\n  \"name\": \"schools\",\n  \"rows\": 801,\n  \"fields\": [\n    {\n      \"column\": \"GEOID10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 277969,\n        \"min\": 17031010100,\n        \"max\": 17031980100,\n        \"num_unique_values\": 801,\n        \"samples\": [\n          17031570300,\n          17031062400,\n          17031831400\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCHL_IDX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.219870699669016,\n        \"min\": 0.0,\n        \"max\": 98.0,\n        \"num_unique_values\": 323,\n        \"samples\": [\n          73.14285714285714,\n          11.333333333333334,\n          95.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SQRPPts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.163101310541098,\n        \"min\": 1.2999999999999998,\n        \"max\": 42.0,\n        \"num_unique_values\": 429,\n        \"samples\": [\n          14.354545454545455,\n          13.78181818181818,\n          2.685714285714286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SQRPRating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.738176446406907,\n        \"min\": 0.214,\n        \"max\": 100.0,\n        \"num_unique_values\": 349,\n        \"samples\": [\n          29.449,\n          31.1525,\n          24.1335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgDailyAttendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.099430417178452,\n        \"min\": -1.1,\n        \"max\": 97.3,\n        \"num_unique_values\": 409,\n        \"samples\": [\n          50.1,\n          45.16666666666666,\n          46.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MyVoiceMySchoolScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6117240830028307,\n        \"min\": 2.333333333333333,\n        \"max\": 7.083333333333333,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          5.541666666666667,\n          4.428571428571429,\n          3.363636363636364\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]}]}