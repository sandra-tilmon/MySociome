{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"11BA8n7CPc5RXzJowPAE4hkYzHe_I3IpT","timestamp":1700074595343},{"file_id":"1ZW6tMQc3rYNaGqTCG7-Y_KbR_ml3b8zY","timestamp":1699058261056}],"toc_visible":true,"collapsed_sections":["Mb0IKHXEder4","bTNdDGm1mYrj","2VKc8BraTXjj"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Making social file for Chicago\n","# Adding Chicago datamart data\n","## Sandra Tilmon\n","## 11/03/2023\n","\n","\n","#### Change log:\n","Date        Change\n","\n","\n","\n","#### Future work:\n","* Chicago political boundaries\n","* Places of worship\n"],"metadata":{"id":"GUZfQbsoQH-Y"}},{"cell_type":"markdown","source":["# Setup"],"metadata":{"id":"yiWW2iv3QW-K"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Utilities\n","import ast\n","import json\n","import os\n","import re\n","import requests\n","from timeit import default_timer as timer\n","\n","# Viz\n","import math\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# GIS\n","# import fiona\n","import geopandas as gpd\n","import geopy\n","from geopy.extra.rate_limiter import RateLimiter\n","from shapely.geometry import Point, shape\n","from geopy import geocoders\n","from geopy.geocoders import GoogleV3\n","\n","from textblob import TextBlob\n","\n","pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)\n","pd.set_option('display.width', None)\n","\n","%matplotlib inline"],"metadata":{"id":"4Tq7gpEVQaPr","executionInfo":{"status":"ok","timestamp":1727113091370,"user_tz":300,"elapsed":304,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","execution_count":4,"metadata":{"id":"XlLhWh5HPpOf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727113115888,"user_tz":300,"elapsed":23388,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"7107c892-f39c-4db4-eda4-398509e59fba"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["# Mount drive\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"]},{"cell_type":"code","source":["# Raw data sources\n","dir = '/content/gdrive/My Drive/Sociome_Folder/Data/'\n","\n","# Output curated datasets\n","curated = '/content/gdrive/My Drive/Sociome_Folder/Data Commons/Curated datasets/'"],"metadata":{"id":"cRe762enQa9v","executionInfo":{"status":"ok","timestamp":1727113122473,"user_tz":300,"elapsed":2,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["frames=[]"],"metadata":{"id":"A0CopMMs8yyK","executionInfo":{"status":"ok","timestamp":1727113541790,"user_tz":300,"elapsed":319,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":["# GIS"],"metadata":{"id":"lPRXHExXnYeW"}},{"cell_type":"markdown","source":["## Set CRS"],"metadata":{"id":"uRlZsctfmeg4"}},{"cell_type":"code","source":["crs = {'init' :'epsg:3435'}"],"metadata":{"id":"HeWpj6OJnaYC","executionInfo":{"status":"ok","timestamp":1727113126329,"user_tz":300,"elapsed":478,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["## Import census tracts\n","\n","Source: https://data.cityofchicago.org/resource/74p9-q2aq.json\n","\n","r = requests.get(\"https://data.cityofchicago.org/resource/74p9-q2aq.json\")\n","r.raise_for_status()\n","\n","data = r.json()\n","for d in data:\n","     d['the_geom'] = shape(d['the_geom'])\n","\n","tracts_shp = gpd.GeoDataFrame(data).set_geometry('the_geom', crs=crs)\n","\n","tracts_shp.rename(columns={'geoid10': 'GEOID10'}, inplace=True)\n","\n","tracts_shp = tracts_shp.drop(columns=['statefp10', 'countyfp10', 'tractce10',\n","                                      'name10', 'namelsad10',\n","                                      'notes', 'commarea', 'commarea_n'])\n","\n","tracts = pd.DataFrame(tracts_shp)\n","tracts.drop(columns=['the_geom'], inplace=True)\n","\n","Save\n","\n","tracts.to_csv(dir + \"1 Chicago datamart/tracts.csv\", index=False)"],"metadata":{"id":"P6lswaJDh8w4"}},{"cell_type":"code","source":["# Reload\n","tractsdf = pd.read_csv(dir + \"1 Chicago datamart/tracts.csv\")\n","\n","frames.append('tractsdf')"],"metadata":{"id":"87U_7A42DZUt","executionInfo":{"status":"ok","timestamp":1727113545416,"user_tz":300,"elapsed":312,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":31,"outputs":[]},{"cell_type":"markdown","source":["## Future work: Chicago political boundaries\n","\n","For future use\n","\n","Sources:\n","\n","https://chicagoelections.gov/districts-maps/legislative-maps\n","\n","https://data.cityofchicago.org/browse?category=Facilities+%26+Geographic%20Boundaries\n","\n","https://hub-cookcountyil.opendata.arcgis.com/pages/boundary-open-data"],"metadata":{"id":"Mb0IKHXEder4"}},{"cell_type":"code","source":["# Wards\n","\n","r = requests.get(\"https://data.cityofchicago.org/resource/k9yb-bpqx.json\")\n","r.raise_for_status()\n","\n","data = r.json()\n","for d in data:\n","    d['the_geom'] = shape(d['the_geom'])\n","\n","wards_shp = gpd.GeoDataFrame(data).set_geometry('the_geom', crs=crs)\n","\n","wards_shp = wards_shp.drop(columns=['shape_area', 'shape_leng'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aOnswGvelJ0H","executionInfo":{"status":"ok","timestamp":1722355601111,"user_tz":300,"elapsed":1650,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"16c6431f-975a-4cd7-ab4a-6dce5d8bb615"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}]},{"cell_type":"code","source":["# IL Senate 2010\n","shape = fiona.open(dir + \"Shapefiles/ILSenate2010/ILSenate2010.shp\")\n","print(shape.schema)\n","\n","ilsen_shp = gpd.GeoDataFrame(shape).set_geometry('geometry', crs=crs)\n","\n","# Access 'DISTRICT' directly from 'properties' using geopandas functionality\n","ilsen_shp['DISTRICT'] = ilsen_shp['properties'].apply(lambda props: props['DISTRICT'])\n","\n","ilsen_shp['the_geom'] = ilsen_shp['geometry']\n","ilsen_shp = gpd.GeoDataFrame(ilsen_shp).set_geometry('the_geom', crs=crs)\n","\n","ilsen_shp.drop(columns=['id', 'properties', 'geometry'], inplace=True)\n","ilsen_shp.rename(columns={'DISTRICT':'ILSenDist'}, inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wl0Tyw99P9aU","executionInfo":{"status":"ok","timestamp":1722355614094,"user_tz":300,"elapsed":4870,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"aaa4f27e-468f-41c2-d417-c1d954a9f6b6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'properties': {'DISTRICT': 'str:3'}, 'geometry': 'Polygon'}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n","/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}]},{"cell_type":"code","source":["# IL House 2010\n","\n","shape = fiona.open(dir + \"Shapefiles/ILHouse2010/ILHouse2010.shp\")\n","print(shape.schema)\n","\n","ilhouse_shp = gpd.GeoDataFrame(shape).set_geometry('geometry', crs=crs)\n","\n","# Access 'DISTRICT' directly from 'properties' using geopandas functionality\n","ilhouse_shp['DISTRICT'] = ilhouse_shp['properties'].apply(lambda props: props['DISTRICT'])\n","\n","ilhouse_shp['the_geom'] = ilhouse_shp['geometry']\n","ilhouse_shp = gpd.GeoDataFrame(ilhouse_shp).set_geometry('the_geom', crs=crs)\n","\n","ilhouse_shp.drop(columns=['id', 'properties', 'geometry'], inplace=True)\n","ilhouse_shp.rename(columns={'DISTRICT':'ILHouseDist'}, inplace=True)"],"metadata":{"id":"IErwomu_QZwW","executionInfo":{"status":"ok","timestamp":1722355653816,"user_tz":300,"elapsed":342,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e09da349-f019-44db-fee8-58da4d6c6dd7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'properties': {'DISTRICT': 'str:3'}, 'geometry': 'Polygon'}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n","/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}]},{"cell_type":"code","source":["# US Congressional districts\n","\n","shape = fiona.open(dir + \"Shapefiles/USCongress2010/USCongress2010.shp\")\n","print(shape.schema)\n","\n","uscong_shp = gpd.GeoDataFrame(shape).set_geometry('geometry', crs=crs)\n","\n","# Access 'DISTRICT' directly from 'properties' using geopandas functionality\n","uscong_shp['DISTRICT'] = uscong_shp['properties'].apply(lambda props: props['DISTRICT'])\n","\n","uscong_shp['the_geom'] = uscong_shp['geometry']\n","uscong_shp = gpd.GeoDataFrame(uscong_shp).set_geometry('the_geom', crs=crs)\n","\n","uscong_shp.drop(columns=['id', 'properties', 'geometry'], inplace=True)\n","uscong_shp.rename(columns={'DISTRICT':'USCongDist'}, inplace=True)"],"metadata":{"id":"srUE6Bvvdiy5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1722355664025,"user_tz":300,"elapsed":168,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"723a8a5c-95eb-4ad5-eae1-8a3d25ed1acf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'properties': {'OBJECTID': 'int:10', 'DATA_ADMIN': 'float:19.8', 'PERIMETER': 'float:19.8', 'NAME': 'str:30', 'DISTRICT': 'str:5', 'EDIT_DATE': 'str:10', 'SHAPE_AREA': 'float:19.11', 'SHAPE_LEN': 'float:19.11'}, 'geometry': 'Polygon'}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n","/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}]},{"cell_type":"code","source":["# Municipal inventory\n","# https://hub-cookcountyil.opendata.arcgis.com/datasets/846678304131441ba9d8ed5ef71d6994_0/explore\n","\n","shape = fiona.open(dir + \"Shapefiles/Municipal_Incorporation_Inventory/Municipal_Incorporation_Inventory.shp\")\n","\n","cookinv_shp = gpd.GeoDataFrame(shape).set_geometry('geometry', crs=crs)"],"metadata":{"id":"cyVZkjP1RY3Z","executionInfo":{"status":"ok","timestamp":1722355735116,"user_tz":300,"elapsed":12367,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"colab":{"base_uri":"https://localhost:8080/","height":537},"outputId":"768677d3-90f4-4879-9086-37b16835507f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Cook County Board of Review - pre-2020\n","\n","shape = fiona.open(dir + \"Shapefiles/Board_of_Review_Boundary_-_Historical_-_2010-2020/Board_of_Review_Boundary_-_Historical_-_2010-2020.shp\")\n","\n","cookBoardRev_shp = gpd.GeoDataFrame(shape).set_geometry('geometry', crs=crs)\n","\n","# Access 'DISTRICT' directly from 'properties' using geopandas functionality\n","cookBoardRev_shp['DISTRICT'] = cookBoardRev_shp['properties'].apply(lambda props: props['District_N'])\n","\n","cookBoardRev_shp['the_geom'] = cookBoardRev_shp['geometry']\n","cookBoardRev_shp = gpd.GeoDataFrame(cookBoardRev_shp).set_geometry('the_geom', crs=crs)\n","\n","cookBoardRev_shp.drop(columns=['id', 'properties', 'geometry'], inplace=True)\n","cookBoardRev_shp.rename(columns={'DISTRICT':'CookCoBoardRev'}, inplace=True)"],"metadata":{"id":"8PTj6HzvMO3V","executionInfo":{"status":"ok","timestamp":1722355762192,"user_tz":300,"elapsed":1974,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"65e410bc-e3af-41de-e397-38fd30517c75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n","/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}]},{"cell_type":"code","source":["# Judicial\n","\n","shape = fiona.open(dir + \"Shapefiles/Judicial_District/Judicial_District.shp\")\n","print(shape.schema)\n","\n","\n","judicial_shp = gpd.GeoDataFrame(shape).set_geometry('geometry', crs=crs)\n","\n","# Access 'DISTRICT' directly from 'properties' using geopandas functionality\n","judicial_shp['DISTRICT'] = judicial_shp['properties'].apply(lambda props: props['DISTRICT'])\n","\n","judicial_shp['the_geom'] = judicial_shp['geometry']\n","judicial_shp = gpd.GeoDataFrame(judicial_shp).set_geometry('the_geom', crs=crs)\n","\n","judicial_shp.drop(columns=['id', 'properties', 'geometry'], inplace=True)\n","judicial_shp.rename(columns={'DISTRICT':'JudicialDist'}, inplace=True)"],"metadata":{"id":"jV0c-4PnTigU","executionInfo":{"status":"ok","timestamp":1722355772527,"user_tz":300,"elapsed":2355,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0930f9b4-6434-406f-94e9-bf9f61259028"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'properties': {'OBJECTID': 'int:2', 'NAME': 'str:3', 'NAME2': 'str:2', 'DISTRICT': 'int:2', 'GlobalID': 'str:38', 'created_us': 'str:8', 'created_da': 'date', 'last_edite': 'str:8', 'last_edi_1': 'date', 'RELATE_KEY': 'str:19', 'SHAPESTAre': 'float:24.15', 'SHAPESTLen': 'float:24.15'}, 'geometry': 'Polygon'}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n","/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}]},{"cell_type":"markdown","source":["## Functions"],"metadata":{"id":"bTNdDGm1mYrj"}},{"cell_type":"code","source":["# Lat/long coordinates to census tract\n","\n","def LatLongTract(infile, lat, long):\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)\n","\n","\n","\n","# One line street address to lat/long coordinates and census tract\n","\n","def AddLatLongTract(infile):\n","\n","  # Create \"oneline\" address in cleaning \"123 N Main Street Chicago, IL 60000\"\n","  # Field names vary so not bothering to include here\n","\n","  g = geocoders.GoogleV3(api_key='AIzaSyCXvuRDWUvclTJ-DrpEEjL-810JnSNT5JQ')\n","\n","  def Gv3_latlong (address):\n","      location = g.geocode(address)\n","      lat = location.latitude\n","      long = location.longitude\n","      # Perform additional steps to obtain census tract from coordinates\n","      # census_tract = get_census_tract_from_coordinates(latitude, longitude)\n","      return lat, long, location\n","\n","  infile[['lat', 'long', 'Location']] = infile['oneline'].apply(Gv3_latlong).apply(pd.Series)\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID10 to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)"],"metadata":{"id":"_xjRO44YmZqj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Bring in national dataset and limit to Chicago"],"metadata":{"id":"sb7D9_RSbUqz"}},{"cell_type":"code","source":["# Import national dataset as df\n","\n","df = pd.read_csv(curated + \"00020_Social_national.csv\", encoding='latin-1')\n","\n","# Convert 'GEOID10' to numeric\n","df['GEOID10'] = pd.to_numeric(df['GEOID10'], errors='coerce')\n","\n","# Join to Chicago tracts\n","natl = pd.merge(df, tractsdf, on=['GEOID10'], how='right')\n","\n","frames.append('natl')"],"metadata":{"id":"BRQJ03L_bXry","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727113549075,"user_tz":300,"elapsed":1264,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"c069ac23-dcbe-407d-fc62-b70800d4b953"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-32-2770d63abf06>:3: DtypeWarning: Columns (3,4,7,8,9,10,11,15,16,23,26,30,31,34,37,38) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(curated + \"00020_Social_national.csv\", encoding='latin-1')\n"]}]},{"cell_type":"markdown","source":["# Add data from Chicago datamart"],"metadata":{"id":"Ce9f_adqUI50"}},{"cell_type":"markdown","source":["# *Chicago Data portal*"],"metadata":{"id":"RRBMKd1aSytJ"}},{"cell_type":"markdown","source":["## Abandoned/vacant buildings - reload\n","\n","No API, download only"],"metadata":{"id":"2PW_lNryS1C-"}},{"cell_type":"code","source":["vac = pd.read_csv(dir + \"1 Chicago datamart/Vacant_and_Abandoned_Buildings_-_Violations.csv\", encoding='latin-1')"],"metadata":{"id":"6o_yUi7LS0V2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### GIS"],"metadata":{"id":"yybvOTlZZFYY"}},{"cell_type":"code","source":["vac_shp = gpd.GeoDataFrame(vac,\n","                           geometry=gpd.points_from_xy(\n","                              vac.Longitude, vac.Latitude),\n","                           crs=crs)\n","\n","vac_shp.crs"],"metadata":{"id":"tqocb1oeZGiz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Add census tract\n","\n","merge1 = gpd.sjoin(vac_shp, tracts_shp, how='left', predicate='within')"],"metadata":{"id":"qFy6dPkuZW8k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["merge1['IssuedDt'] = pd.to_datetime(merge1['Issued Date'])\n","merge1['Year'], merge1['Month'] = merge1['IssuedDt'].dt.year, merge1['IssuedDt'].dt.month\n","\n","vac = merge1[['Violation Number', 'IssuedDt', 'Year', 'Month', 'Property Address', 'Latitude', 'Longitude', 'geometry',\n","              'GEOID10', 'commarea']]\n","\n","vac.rename(columns={'Latitude': 'latitude', 'Longitude': 'longitude', 'geoid10': 'GEOID10'},\n","           inplace=True)"],"metadata":{"id":"F2xZwEEIZPD8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Make a one line address for geocoding\n","\n","temp['oneline'] = vac['Property Address'] + ' ' + 'Chicago, IL'\n","temp.drop(columns=['latitude', 'longitude', 'geometry', 'GEOID10', 'commarea'], inplace = True)"],"metadata":{"id":"20TKFpSmKfzm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Calling the geocode function\n","\n","temp2 = AddLatLongTract(temp)"],"metadata":{"id":"G1r6EixuKqqP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["temp3 = temp2.drop(columns=['oneline', 'commarea_n'])"],"metadata":{"id":"i8NZvBBhLSxd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["vac = pd.concat([okay, temp3])\n","vac.dropna(subset=['GEOID10'], inplace=True)\n","vac['GEOID10'] = vac['GEOID10'].astype(str).astype(int)"],"metadata":{"id":"t5UgCbapMe5w"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g9yLhvxpnu6L"},"source":["### Denominator for buildings from ACS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BimdVv3yny2e"},"outputs":[],"source":["acs1014 = pd.read_csv(dir + \"ACS/2016 Planning Database/pdb2016trv8_us.csv\", encoding='latin-1')\n","acs1014['Years'] = '2010-2014'\n","\n","# Limit to Cook County for size\n","acs1014 = acs1014[(acs1014['State']==17) & (acs1014['County']==31)]\n","\n","# Rename\n","acs1014 = acs1014.rename(columns={'Tot_Housing_Units_ACS_10_14':'Tot_Housing_Units_ACS'})\n","\n","\n","acs1519 = pd.read_csv(dir + \"ACS/2021 Planning Database/pdb2021trv3_us.csv\", encoding='latin-1')\n","acs1519['Years'] = '2015-2019'\n","\n","# Limit to Cook County for size\n","acs1519 = acs1519[(acs1519['State']==17) & (acs1519['County']==31)]\n","\n","# Rename\n","acs1519 = acs1519.rename(columns={'Tot_Housing_Units_ACS_15_19':'Tot_Housing_Units_ACS'})"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dUY_uqvun_B5"},"outputs":[],"source":["ACS1014_HU = acs1014[['GIDTR', 'Years', 'Tot_Housing_Units_ACS']]\n","ACS1519_HU = acs1519[['GIDTR', 'Years', 'Tot_Housing_Units_ACS']]\n","\n","dataframes = [ACS1014_HU, ACS1519_HU]\n","\n","ACS_Housing = pd.concat(dataframes, ignore_index=True)\n","ACS_Housing = ACS_Housing.rename(columns={'GIDTR':'GEOID10'})\n","ACS_Housing = ACS_Housing.drop_duplicates()"]},{"cell_type":"code","source":["total_merge = vac.merge(ACS_Housing, on=['GEOID10', 'Years'], how='left', indicator=True)\n","\n","R1 = total_merge[total_merge['_merge']=='both']\n","R2 = total_merge[total_merge['_merge']=='left_only']\n","# R3 = total_merge[total_merge['_merge']=='right_only']\n","\n","total_merge = total_merge.drop(columns=\"_merge\")"],"metadata":{"id":"xlusGFDTsQv1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Aggregate to tract and time points"],"metadata":{"id":"VXrL16l1Ze7A"}},{"cell_type":"code","source":["vacagg = vac.groupby('GEOID10').agg(\n","    Tot_Housing_Units_ACS = ('Tot_Housing_Units_ACS', np.mean),\n","    VacantBldgs = ('Violation Number', np.size)\n","    )\n","\n","vacagg['VacantRate1000'] = (vacagg['VacantBldgs'] / vacagg['Tot_Housing_Units_ACS']) * 1000"],"metadata":{"id":"CJSsaf5bZiKc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["vacaggYr = vac.groupby(['GEOID10', 'Year', 'Tot_Housing_Units_ACS'])['Violation Number'].count().reset_index(name='VacantBldgs')\n","vacaggYr['VacantRate1000'] = (vacaggYr['VacantBldgs'] / vacaggYr['Tot_Housing_Units_ACS']) * 1000"],"metadata":{"id":"SmBvMivtbukr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["vacaggYrMo = vac.groupby(['GEOID10', 'Year', 'Month', 'Years', 'Tot_Housing_Units_ACS'])['Violation Number'].count().reset_index(name='VacantBldgs')\n","vacaggYrMo['VacantRate1000'] = (vacaggYrMo['VacantBldgs'] / vacaggYrMo['Tot_Housing_Units_ACS']) * 1000"],"metadata":{"id":"DODwpk5zbyfC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Export and reload"],"metadata":{"id":"tTalnG9rb2Y4"}},{"cell_type":"code","source":["with open(dir + \"1 Chicago datamart/vacant_tract_line.csv\", 'w') as f:\n","  vac.to_csv(f)\n","\n","with open(dir + \"1 Chicago datamart/vacant_tract.csv\", 'w') as f:\n","  vacagg.to_csv(f)\n","\n","with open(dir + \"1 Chicago datamart/vacant_tractYr.csv\", 'w') as f:\n","  vacaggYr.to_csv(f)\n","\n","with open(dir + \"1 Chicago datamart/vacant_tractYrMo.csv\", 'w') as f:\n","  vacaggYrMo.to_csv(f)"],"metadata":{"id":"OrO025Jfb43G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","vacagg = pd.read_csv(dir + \"1 Chicago datamart/vacant_tract.csv\")\n","vacagg.drop(columns=['Tot_Housing_Units_ACS', 'VacantBldgs'], inplace=True)\n","\n","frames.append('vacagg')"],"metadata":{"id":"2AgQPg_RcQQe","executionInfo":{"status":"ok","timestamp":1727113557182,"user_tz":300,"elapsed":311,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["## Crime - reload"],"metadata":{"id":"TiTp0906TXji"}},{"cell_type":"markdown","source":["### API: 257k"],"metadata":{"id":"2VKc8BraTXjj"}},{"cell_type":"code","source":["# Socrata API endpoint - loopy paginated\n","\n","base_url = \"https://data.cityofchicago.org/resource/dfnk-7re6.json\"\n","\n","# Set the initial offset and limit\n","offset = 0\n","limit = 1000\n","\n","# Initialize an empty list to store the results\n","all_results = []\n","\n","while True:\n","    # Make an API request with the current offset and limit\n","    params = {\n","        \"$limit\": limit,\n","        \"$offset\": offset\n","    }\n","    response = requests.get(base_url, params=params)\n","\n","    if response.status_code == 200:\n","        # Append the results to the list\n","        results = response.json()\n","        all_results.extend(results)\n","\n","        # Check if there are more records to fetch\n","        if len(results) < limit:\n","            break  # No more records, exit the loop\n","        else:\n","            offset += limit  # Increment the offset for the next request\n","    else:\n","        print(\"Error: Unable to fetch data.\")\n","        break"],"metadata":{"id":"Q58lcX0ATXjj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Save\n","\n","crimeloopy = pd.DataFrame(all_results)\n","\n","with open('/content/gdrive/My Drive/Sociome_Folder/Data/1 Chicago and Cook County data/Crime/crime_raw_API_loop_257k.csv', 'w') as f:\n","  crimeloopy.to_csv(f)"],"metadata":{"id":"FSzhO-jITXjj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### csv download: 7.8 million"],"metadata":{"id":"BycKZrFDTXjj"}},{"cell_type":"code","source":["crime = pd.read_csv(dir + \"1 Chicago datamart/Crime/Crimes_-_2001_to_Present.csv\", encoding='latin-1')"],"metadata":{"id":"_L6uRpnOTXjj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crime['CrimeCat'] = crime['Primary Type'].astype('string')\n","print(crime['CrimeCat'].dtypes)\n","\n","crime['Date'] = pd.to_datetime(crime['Date'])\n","crime['Year'], crime['Month'] = crime['Date'].dt.year, crime['Date'].dt.month\n","crime['Month_year'] = crime['Date'].dt.to_period('M')"],"metadata":{"id":"BaKCQpLdTXjk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crime1019 = crime[crime['Year'].between(2010, 2019)]"],"metadata":{"id":"lWLdyuh3TXjk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crime1019['CrimeCat'] = crime1019['Primary Type'].astype('string')\n","crime1019['CrimeCat'] = crime1019['CrimeCat'].str.strip()"],"metadata":{"id":"8cTP3eifTXjk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Categorize per FBI\n","\n"," https://ucr.fbi.gov/crime-in-the-u.s/2010/crime-in-the-u.s.-2010/violent-crime\n"],"metadata":{"id":"QA4wijETTXjk"}},{"cell_type":"code","source":["\n","Type = ('ASSAULT', 'BATTERY', 'CRIM SEXUAL ASSAULT', 'CRIMINAL SEXUAL ASSAULT', 'HOMICIDE', 'HUMAN TRAFFICKING',\n","        'INTIMIDATION', 'KIDNAPPING', 'OFFENSE INVOLVING CHILDREN', 'SEX OFFENSE', 'STALKING')\n","\n","Type2 = ('HOMICIDE')\n","\n","crime1019['Violent'] = crime1019['CrimeCat'].apply(lambda x: 1 if x in Type else 0)\n","crime1019['Homicide'] = crime1019['CrimeCat'].apply(lambda x: 1 if x in Type2 else 0)"],"metadata":{"id":"DtKuNFTwTXjk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### GIS"],"metadata":{"id":"Ej6PWxgNTXjk"}},{"cell_type":"markdown","source":["Some crime records have latitude and longitude and some don't. Separate the two types or rows to process separately."],"metadata":{"id":"pM-1bvy_BVzs"}},{"cell_type":"code","source":["# Separate missing lat/long and not\n","\n","# Not null (stack later)\n","temp1 = crime1019[crime1019['Longitude'].notnull()]\n","\n","# Is null - process this one\n","temp = crime1019[crime1019['Longitude'].isnull()]"],"metadata":{"id":"LYFwF0e3TXjl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Function to clean addresses, replace \"XX\" with \"50\", and remove the second part if length is greater than 4\n","def clean_address(address):\n","    parts = address.split()\n","    cleaned_parts = []\n","\n","    if len(parts) > 4:\n","        parts = parts[:1] + parts[2:]\n","\n","    for part in parts:\n","        # if part.isdigit():\n","        if part[0]:\n","            # Replace \"XX\" with \"50\" in the numeric part\n","            part = part.replace(\"XX\", \"50\")\n","            cleaned_parts.append(part)\n","        else:\n","            cleaned_parts.append(part)\n","\n","    cleaned_address = ' '.join(cleaned_parts)\n","    return cleaned_address"],"metadata":{"id":"rb0Uc4vbTXjl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["temp['AddressBlock'] = temp['Block'].apply(clean_address)"],"metadata":{"id":"yS7OXvr4TXjl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["temp['oneline'] = temp['AddressBlock'] + ' ' + 'Chicago, IL'"],"metadata":{"id":"_QIuu5WSTXjl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Geocode missing lat/long from fuzzy \"XX\" addresses from TEMP above\n","\n","from geopy import geocoders\n","from geopy.geocoders import GoogleV3\n","\n","# https://github.com/geopy/geopy/issues/171\n","\n","g = geocoders.GoogleV3(api_key='')\n","\n","def Gv3_latlong (address):\n","    location = g.geocode(address)\n","    latitude = location.latitude\n","    longitude = location.longitude\n","    # Perform additional steps to obtain census tract from coordinates\n","    # census_tract = get_census_tract_from_coordinates(latitude, longitude)\n","    return latitude, longitude, location\n","\n","temp[['Latitude', 'Longitude', 'Location']] = temp['oneline'].apply(Gv3_latlong).apply(pd.Series)"],"metadata":{"id":"DHqC3LRkTXjl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["temp.drop(columns=['Unnamed: 0', 'AddressBlock', 'oneline'], inplace=True)\n","\n","temp1.drop(columns=['Unnamed: 0.1', 'Unnamed: 0'], inplace=True)"],"metadata":{"id":"YZOmipUDTXjl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crime2 = pd.concat([temp, temp1])"],"metadata":{"id":"gFsZXPZfTXjl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Census tract"],"metadata":{"id":"5Ay10jdCTXjl"}},{"cell_type":"code","source":["import geopandas as gpd\n","from shapely.geometry import Point, shape\n","\n","geometry = [Point(xy) for xy in zip(crime2['Longitude'], crime2['Latitude'])]\n","gdf = gpd.GeoDataFrame(crime2, geometry=geometry, crs=crs)\n","\n","# Perform spatial join to obtain census tract for each coordinate\n","result = gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","result.head()"],"metadata":{"id":"sPSQ4oBdTXjl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crime3 = result\n","crime3 = crime3.assign(Crime=1)\n","\n","reorder = ['geoid10', 'Latitude', 'Longitude', 'commarea', 'Ward', 'Beat', 'District',  'Year', 'Month', 'Month_year',\n","           'CrimeCat', 'Crime', 'Violent', 'Homicide',  'geometry']\n","\n","crime4 = crime3[reorder]"],"metadata":{"id":"waPqfSe7TXjl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Summarize by time points"],"metadata":{"id":"lSylJuQYTXjm"}},{"cell_type":"code","source":["crime4['GEOID10'] = crime4['geoid10'].apply(pd.to_numeric)"],"metadata":{"id":"bujXEXm7TXjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Save line listing\n","\n","with open(dir + \"Chicago data portal/Crime/crime1019_line.csv\", 'w') as f:\n","  crime4.to_csv(f)"],"metadata":{"id":"7uXkd3rxTXjm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Join to ACS and make rates"],"metadata":{"id":"43vNXfkpTXjm"}},{"cell_type":"code","source":["crime1014 = crime4[crime4.Year < 2015]\n","crime1014 = pd.DataFrame(crime1014)\n","\n","crime1519 = crime4[crime4.Year > 2014]\n","crime1519 = pd.DataFrame(crime1519)"],"metadata":{"id":"bFMO3hjiTXjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["acs1019 = pd.read_csv(curated + '00011_ACS1019_Chicago.csv')\n","\n","denom = acs1019[['Years', 'GIDTR', 'Tot_Population_ACS']]\n","denom.rename(columns={'GIDTR': 'GEOID10'}, inplace=True)\n","\n","denom1014 = denom[denom['Years'] == '2010-2014']\n","denom1014.drop(columns=['Years'], inplace=True)\n","\n","\n","denom1519 = denom[denom['Years'] == '2015-2019']\n","denom1519.drop(columns=['Years'], inplace=True)"],"metadata":{"id":"D9ecNhzVTXjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crime1 = crime1014.merge(denom1014, on='GEOID10')\n","crime2 = crime1519.merge(denom1519, on='GEOID10')"],"metadata":{"id":"cKy4ULzUTXjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crime3 = pd.concat([crime1, crime2])"],"metadata":{"id":"NaXylAlUTXjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crimeavg_yr = crime3.groupby(['GEOID10', 'Year', 'Tot_Population_ACS'])[cols].sum().reset_index()\n","crimeavg_yr['CrimeRate1000'] = round((crimeavg_yr['Crime'] / crimeavg_yr['Tot_Population_ACS']) * 1000, 2)\n","crimeavg_yr['ViolentRate1000'] = round((crimeavg_yr['Violent'] / crimeavg_yr['Tot_Population_ACS']) * 1000, 2)\n","crimeavg_yr['HomicdeRate1000'] = round((crimeavg_yr['Homicide'] / crimeavg_yr['Tot_Population_ACS']) * 1000, 2)"],"metadata":{"id":"GnOpMw45TXjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cols = ['Crime', 'Violent', 'Homicide']\n","\n","crimeavg = crime3.groupby(['GEOID10', 'Tot_Population_ACS'])[cols].sum().reset_index()\n","crimeavg['CrimeRate1000'] = round((crimeavg['Crime'] / crimeavg['Tot_Population_ACS']) * 1000, 2)\n","crimeavg['ViolentRate1000'] = round((crimeavg['Violent'] / crimeavg['Tot_Population_ACS']) * 1000, 2)\n","crimeavg['HomicdeRate1000'] = round((crimeavg['Homicide'] / crimeavg['Tot_Population_ACS']) * 1000, 2)\n","\n","# Duplicates\n","crimeavg = crimeavg.groupby('GEOID10').mean()"],"metadata":{"id":"1LzyI26xTXjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["crimeavg_yrmo = crime3.groupby(['GEOID10', 'Year', 'Month', 'Tot_Population_ACS'])[cols].sum().reset_index()\n","crimeavg_yrmo['CrimeRate1000'] = round((crimeavg_yrmo['Crime'] / crimeavg_yrmo['Tot_Population_ACS']) * 1000, 2)\n","crimeavg_yrmo['ViolentRate1000'] = round((crimeavg_yrmo['Violent'] / crimeavg_yrmo['Tot_Population_ACS']) * 1000, 2)\n","crimeavg_yrmo['HomicdeRate1000'] = round((crimeavg_yrmo['Homicide'] / crimeavg_yrmo['Tot_Population_ACS']) * 1000, 2)"],"metadata":{"id":"wy-jbzi2TXjm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Export and reload"],"metadata":{"id":"uzfs0EeATXjm"}},{"cell_type":"code","source":["# Export\n","\n","with open('/content/gdrive/My Drive/Sociome_Folder/Data/Chicago data portal/Crime/crime1019_avg.csv', 'w') as f:\n","  crimeavg.to_csv(f)\n","\n","with open('/content/gdrive/My Drive/Sociome_Folder/Data/Chicago data portal/Crime/crime1019_avg_yr.csv', 'w') as f:\n","  crimeavg_yr.to_csv(f)\n","\n","with open('/content/gdrive/My Drive/Sociome_Folder/Data/Chicago data portal/Crime/crime1019_avg_yrmo.csv', 'w') as f:\n","  crimeavg_yrmo.to_csv(f)"],"metadata":{"id":"U_q9QmuoTXjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","crime1019 = pd.read_csv('/content/gdrive/My Drive/Sociome_Folder/Data/1 Chicago datamart/Crime/crime1019_avg.csv')\n","crime1019 = crime1019[crime1019.columns.drop(list(crime1019.filter(regex='Unnamed')))]\n","crime1019.rename(columns={'geoid10': 'GEOID10', 'HomicdeRate1000': 'HomicideRate1000'}, inplace=True)\n","crime1019.drop(columns=['Tot_Population_ACS', 'Crime', 'Violent', 'Homicide'], inplace=True)\n","\n","# Duplicates\n","crime1019_avg = crime1019.groupby('GEOID10').mean()\n","crime1019_avg.reset_index(inplace=True)\n","\n","frames.append('crime1019_avg')"],"metadata":{"id":"J7aYij4yTXjn","executionInfo":{"status":"ok","timestamp":1727113561245,"user_tz":300,"elapsed":319,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":["## *Community resources*"],"metadata":{"id":"JjFDJRb0Y6vJ"}},{"cell_type":"markdown","source":["## Childcare / preschools -- reload"],"metadata":{"id":"i-A2oyNE15oP"}},{"cell_type":"markdown","source":["### Chicago - reload"],"metadata":{"id":"jaAh1R97--Ja"}},{"cell_type":"code","source":["preschool_api = 'https://data.cityofchicago.org/resource/ck29-hb9r.json'\n","preschool = pd.read_json(preschool_api)"],"metadata":{"id":"vhton6v11gT9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### GIS"],"metadata":{"id":"StxUNWvIEevj"}},{"cell_type":"code","source":["pre_shp = gpd.GeoDataFrame(preschool,\n","                           geometry=gpd.points_from_xy(\n","                              preschool.longitude, preschool.latitude),\n","                           crs=crs)\n","pre_shp.crs"],"metadata":{"id":"MiynAxKxEeRi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718312389048,"user_tz":300,"elapsed":213,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"05d3a05b-4575-4e44-811b-602819d2e547"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]},{"output_type":"execute_result","data":{"text/plain":["<Projected CRS: EPSG:3435>\n","Name: NAD83 / Illinois East (ftUS)\n","Axis Info [cartesian]:\n","- E[east]: Easting (US survey foot)\n","- N[north]: Northing (US survey foot)\n","Area of Use:\n","- name: United States (USA) - Illinois - counties of Boone; Champaign; Clark; Clay; Coles; Cook; Crawford; Cumberland; De Kalb; De Witt; Douglas; Du Page; Edgar; Edwards; Effingham; Fayette; Ford; Franklin; Gallatin; Grundy; Hamilton; Hardin; Iroquois; Jasper; Jefferson; Johnson; Kane; Kankakee; Kendall; La Salle; Lake; Lawrence; Livingston; Macon; Marion; Massac; McHenry; McLean; Moultrie; Piatt; Pope; Richland; Saline; Shelby; Vermilion; Wabash; Wayne; White; Will; Williamson.\n","- bounds: (-89.27, 37.06, -87.02, 42.5)\n","Coordinate Operation:\n","- name: SPCS83 Illinois East zone (US Survey feet)\n","- method: Transverse Mercator\n","Datum: North American Datum 1983\n","- Ellipsoid: GRS 1980\n","- Prime Meridian: Greenwich"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["# Add census tract\n","\n","merge1 = gpd.sjoin(pre_shp, tracts_shp, how='left', predicate='within')"],"metadata":{"id":"JbvUby0t1gW5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718312396264,"user_tz":300,"elapsed":402,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"336aa9f2-56ac-49ba-e8a5-e131ae7c6896"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(706, 30)\n"]}]},{"cell_type":"code","source":["# Keep select columns\n","\n","presch = merge1[merge1.columns.drop(list(merge1.filter(regex='computed')))]\n","\n","presch = presch[['site_name', 'address', 'city', 'state',\t'zip', 'ages_0_3', 'ages_3_5',\n","                 'quality',\t'quality_rating', 'other_features', 'program_information',\n","                 'latitude', 'longitude', 'geoid10']]\n","\n","presch.rename(columns={'geoid10': 'GEOID10'}, inplace=True)"],"metadata":{"id":"D9_TJZz8FB4U","colab":{"base_uri":"https://localhost:8080/","height":539},"executionInfo":{"status":"ok","timestamp":1718312493985,"user_tz":300,"elapsed":227,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"0f250e55-d66d-4845-d496-7c8dfa18cee5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   key                                          site_name  \\\n","0  198                                      ABC Preschool   \n","1  200       Academy of St Benedict the African - Stewart   \n","2  480                                    A Child's World   \n","3  999               Ada S. McKinley - Bunnyland Day Care   \n","4  205  Ada S. McKinley Community Services - Ersula Ho...   \n","\n","                                         description              address     city state    zip  \\\n","0  <p>We have seen that there is a need for stron...    3800 N Austin Ave  Chicago    IL  60634   \n","1  <p>Our preschool program serves children from ...   6547 S Stewart Ave  Chicago    IL  60621   \n","2  <p>Little Genius is located in the Roseland co...       2145 E 83rd St  Chicago    IL  60617   \n","3                                                NaN       545 W 119th St  Chicago    IL  60628   \n","4  <p>Ersula Howard is located in the South shore...  7222 S Exchange Ave  Chicago    IL  60649   \n","\n","     phone_number                                      url         ages_served  ages_0_3  \\\n","0  (773) 685-9033       http://www.abcpreschoolchicago.com  2 years to 6 years       1.0   \n","1  (773) 994-6100  http://www.academystbenedictstewart.org               3 - 5       0.0   \n","2  (773) 978-6598                  http://adasmckinley.org                None       0.0   \n","3  (773) 568-5200                                      NaN  6 weeks to 5 years       1.0   \n","4  (773) 221-9711              http://www.adasmckinley.org  3 years to 5 years       0.0   \n","\n","   ages_3_5                      weekday_availability  \\\n","0       1.0  Full Week, Part Week, Full Day, Half Day   \n","1       1.0                       Full Week, Full Day   \n","2       0.0                                      None   \n","3       1.0                                      None   \n","4       1.0                       Full Week, Full Day   \n","\n","                                 program_information other_features               accreditation  \\\n","0                        Community Based, Head Start   Accepts CCAP                        None   \n","1                                    Community Based   Accepts CCAP  NAEYC, AdvanceEd candidate   \n","2                        Community Based, Head Start   Accepts CCAP                        None   \n","3                                    Community Based            NaN                       NAEYC   \n","4  Offers Home Visiting, Community Based, Head Start   Accepts CCAP                         COA   \n","\n","    quality quality_rating   latitude  longitude  \\\n","0  licensed       Licensed  41.949425 -87.776653   \n","1  licensed       Licensed  41.774735 -87.634413   \n","2  licensed       Licensed  41.744159 -87.571599   \n","3  licensed       Licensed  41.677689 -87.636695   \n","4      gold           Gold  41.763831 -87.564609   \n","\n","                                            location                geometry  index_right  \\\n","0  {'latitude': '41.949425', 'longitude': '-87.77...  POINT (-87.777 41.949)        449.0   \n","1  {'latitude': '41.774735', 'longitude': '-87.63...  POINT (-87.634 41.775)        441.0   \n","2  {'latitude': '41.744159', 'longitude': '-87.57...  POINT (-87.572 41.744)        515.0   \n","3  {'latitude': '41.677688577398', 'longitude': '...  POINT (-87.637 41.678)         61.0   \n","4  {'latitude': '41.763831', 'longitude': '-87.56...  POINT (-87.565 41.764)        424.0   \n","\n","       GEOID10 commarea  \n","0  17031170200       17  \n","1  17031680900       68  \n","2  17031460500       46  \n","3  17031530501       53  \n","4  17031430700       43  "],"text/html":["\n","  <div id=\"df-c397953c-2af6-46b9-b8cd-19d50848e4fc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>site_name</th>\n","      <th>description</th>\n","      <th>address</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>phone_number</th>\n","      <th>url</th>\n","      <th>ages_served</th>\n","      <th>ages_0_3</th>\n","      <th>ages_3_5</th>\n","      <th>weekday_availability</th>\n","      <th>program_information</th>\n","      <th>other_features</th>\n","      <th>accreditation</th>\n","      <th>quality</th>\n","      <th>quality_rating</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>location</th>\n","      <th>geometry</th>\n","      <th>index_right</th>\n","      <th>GEOID10</th>\n","      <th>commarea</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>198</td>\n","      <td>ABC Preschool</td>\n","      <td>&lt;p&gt;We have seen that there is a need for stron...</td>\n","      <td>3800 N Austin Ave</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60634</td>\n","      <td>(773) 685-9033</td>\n","      <td>http://www.abcpreschoolchicago.com</td>\n","      <td>2 years to 6 years</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>Full Week, Part Week, Full Day, Half Day</td>\n","      <td>Community Based, Head Start</td>\n","      <td>Accepts CCAP</td>\n","      <td>None</td>\n","      <td>licensed</td>\n","      <td>Licensed</td>\n","      <td>41.949425</td>\n","      <td>-87.776653</td>\n","      <td>{'latitude': '41.949425', 'longitude': '-87.77...</td>\n","      <td>POINT (-87.777 41.949)</td>\n","      <td>449.0</td>\n","      <td>17031170200</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200</td>\n","      <td>Academy of St Benedict the African - Stewart</td>\n","      <td>&lt;p&gt;Our preschool program serves children from ...</td>\n","      <td>6547 S Stewart Ave</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60621</td>\n","      <td>(773) 994-6100</td>\n","      <td>http://www.academystbenedictstewart.org</td>\n","      <td>3 - 5</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>Full Week, Full Day</td>\n","      <td>Community Based</td>\n","      <td>Accepts CCAP</td>\n","      <td>NAEYC, AdvanceEd candidate</td>\n","      <td>licensed</td>\n","      <td>Licensed</td>\n","      <td>41.774735</td>\n","      <td>-87.634413</td>\n","      <td>{'latitude': '41.774735', 'longitude': '-87.63...</td>\n","      <td>POINT (-87.634 41.775)</td>\n","      <td>441.0</td>\n","      <td>17031680900</td>\n","      <td>68</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>480</td>\n","      <td>A Child's World</td>\n","      <td>&lt;p&gt;Little Genius is located in the Roseland co...</td>\n","      <td>2145 E 83rd St</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60617</td>\n","      <td>(773) 978-6598</td>\n","      <td>http://adasmckinley.org</td>\n","      <td>None</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>None</td>\n","      <td>Community Based, Head Start</td>\n","      <td>Accepts CCAP</td>\n","      <td>None</td>\n","      <td>licensed</td>\n","      <td>Licensed</td>\n","      <td>41.744159</td>\n","      <td>-87.571599</td>\n","      <td>{'latitude': '41.744159', 'longitude': '-87.57...</td>\n","      <td>POINT (-87.572 41.744)</td>\n","      <td>515.0</td>\n","      <td>17031460500</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>999</td>\n","      <td>Ada S. McKinley - Bunnyland Day Care</td>\n","      <td>NaN</td>\n","      <td>545 W 119th St</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60628</td>\n","      <td>(773) 568-5200</td>\n","      <td>NaN</td>\n","      <td>6 weeks to 5 years</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>None</td>\n","      <td>Community Based</td>\n","      <td>NaN</td>\n","      <td>NAEYC</td>\n","      <td>licensed</td>\n","      <td>Licensed</td>\n","      <td>41.677689</td>\n","      <td>-87.636695</td>\n","      <td>{'latitude': '41.677688577398', 'longitude': '...</td>\n","      <td>POINT (-87.637 41.678)</td>\n","      <td>61.0</td>\n","      <td>17031530501</td>\n","      <td>53</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>205</td>\n","      <td>Ada S. McKinley Community Services - Ersula Ho...</td>\n","      <td>&lt;p&gt;Ersula Howard is located in the South shore...</td>\n","      <td>7222 S Exchange Ave</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60649</td>\n","      <td>(773) 221-9711</td>\n","      <td>http://www.adasmckinley.org</td>\n","      <td>3 years to 5 years</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>Full Week, Full Day</td>\n","      <td>Offers Home Visiting, Community Based, Head Start</td>\n","      <td>Accepts CCAP</td>\n","      <td>COA</td>\n","      <td>gold</td>\n","      <td>Gold</td>\n","      <td>41.763831</td>\n","      <td>-87.564609</td>\n","      <td>{'latitude': '41.763831', 'longitude': '-87.56...</td>\n","      <td>POINT (-87.565 41.764)</td>\n","      <td>424.0</td>\n","      <td>17031430700</td>\n","      <td>43</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c397953c-2af6-46b9-b8cd-19d50848e4fc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c397953c-2af6-46b9-b8cd-19d50848e4fc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c397953c-2af6-46b9-b8cd-19d50848e4fc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9f84e955-cae2-464c-a03e-2af4944db270\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f84e955-cae2-464c-a03e-2af4944db270')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9f84e955-cae2-464c-a03e-2af4944db270 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"presch"}},"metadata":{},"execution_count":83}]},{"cell_type":"markdown","source":["#### Aggregate to tract"],"metadata":{"id":"VBbRUdYlLhS_"}},{"cell_type":"code","source":["# dummies\n","\n","dummies =['quality', 'other_features']\n","dummy = pd.get_dummies(presch[dummies])\n","dummy.rename(columns={'other_features_Accepts CCAP': 'Accepts_CCAP'}, inplace=True)\n","\n","presch = presch.assign(preschN=1)\n","\n","presch['presch_cps'] = np.where(presch['program_information'].str.contains('CPS Based'), 1, 0)\n","\n","presch['presch_community'] = np.where(presch['program_information'].str.contains('Community Based'), 1, 0)\n","\n","presch['presch_early_head_start'] = np.where(presch['program_information'].str.contains('Early Head Start'), 1, 0)\n","\n","presch['presch_head_start'] = np.where(\n","    presch['program_information'].str.contains('Head Start') &\n","    ~presch['program_information'].str.contains('Early'),\n","    1, 0)\n","\n","presch['presch_home_visits'] = np.where(presch['program_information'].str.contains('Offers Home Visiting'), 1, 0)\n","\n","presch2 = pd.concat([presch, dummy], axis=1)"],"metadata":{"id":"NzDshbIwLi1k","colab":{"base_uri":"https://localhost:8080/","height":682},"executionInfo":{"status":"ok","timestamp":1718312826563,"user_tz":300,"elapsed":211,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"0823abde-122c-412e-8b5b-299467ea4904"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['key', 'site_name', 'description', 'address', 'city', 'state', 'zip', 'phone_number', 'url',\n","       'ages_served', 'ages_0_3', 'ages_3_5', 'weekday_availability', 'program_information',\n","       'other_features', 'accreditation', 'quality', 'quality_rating', 'latitude', 'longitude',\n","       'location', 'geometry', 'index_right', 'GEOID10', 'commarea', 'preschN', 'presch_cps',\n","       'presch_community', 'presch_early_head_start', 'presch_head_start', 'presch_home_visits',\n","       'quality_bronze', 'quality_gold', 'quality_licensed', 'quality_none', 'quality_silver',\n","       'Accepts_CCAP'],\n","      dtype='object')\n"]},{"output_type":"execute_result","data":{"text/plain":["   key                                          site_name  \\\n","0  198                                      ABC Preschool   \n","1  200       Academy of St Benedict the African - Stewart   \n","2  480                                    A Child's World   \n","3  999               Ada S. McKinley - Bunnyland Day Care   \n","4  205  Ada S. McKinley Community Services - Ersula Ho...   \n","\n","                                         description              address     city state    zip  \\\n","0  <p>We have seen that there is a need for stron...    3800 N Austin Ave  Chicago    IL  60634   \n","1  <p>Our preschool program serves children from ...   6547 S Stewart Ave  Chicago    IL  60621   \n","2  <p>Little Genius is located in the Roseland co...       2145 E 83rd St  Chicago    IL  60617   \n","3                                                NaN       545 W 119th St  Chicago    IL  60628   \n","4  <p>Ersula Howard is located in the South shore...  7222 S Exchange Ave  Chicago    IL  60649   \n","\n","     phone_number                                      url         ages_served  ages_0_3  \\\n","0  (773) 685-9033       http://www.abcpreschoolchicago.com  2 years to 6 years       1.0   \n","1  (773) 994-6100  http://www.academystbenedictstewart.org               3 - 5       0.0   \n","2  (773) 978-6598                  http://adasmckinley.org                None       0.0   \n","3  (773) 568-5200                                      NaN  6 weeks to 5 years       1.0   \n","4  (773) 221-9711              http://www.adasmckinley.org  3 years to 5 years       0.0   \n","\n","   ages_3_5                      weekday_availability  \\\n","0       1.0  Full Week, Part Week, Full Day, Half Day   \n","1       1.0                       Full Week, Full Day   \n","2       0.0                                      None   \n","3       1.0                                      None   \n","4       1.0                       Full Week, Full Day   \n","\n","                                 program_information other_features               accreditation  \\\n","0                        Community Based, Head Start   Accepts CCAP                        None   \n","1                                    Community Based   Accepts CCAP  NAEYC, AdvanceEd candidate   \n","2                        Community Based, Head Start   Accepts CCAP                        None   \n","3                                    Community Based            NaN                       NAEYC   \n","4  Offers Home Visiting, Community Based, Head Start   Accepts CCAP                         COA   \n","\n","    quality quality_rating   latitude  longitude  \\\n","0  licensed       Licensed  41.949425 -87.776653   \n","1  licensed       Licensed  41.774735 -87.634413   \n","2  licensed       Licensed  41.744159 -87.571599   \n","3  licensed       Licensed  41.677689 -87.636695   \n","4      gold           Gold  41.763831 -87.564609   \n","\n","                                            location                geometry  index_right  \\\n","0  {'latitude': '41.949425', 'longitude': '-87.77...  POINT (-87.777 41.949)        449.0   \n","1  {'latitude': '41.774735', 'longitude': '-87.63...  POINT (-87.634 41.775)        441.0   \n","2  {'latitude': '41.744159', 'longitude': '-87.57...  POINT (-87.572 41.744)        515.0   \n","3  {'latitude': '41.677688577398', 'longitude': '...  POINT (-87.637 41.678)         61.0   \n","4  {'latitude': '41.763831', 'longitude': '-87.56...  POINT (-87.565 41.764)        424.0   \n","\n","       GEOID10 commarea  preschN  presch_cps  presch_community  presch_early_head_start  \\\n","0  17031170200       17        1           0                 1                        0   \n","1  17031680900       68        1           0                 1                        0   \n","2  17031460500       46        1           0                 1                        0   \n","3  17031530501       53        1           0                 1                        0   \n","4  17031430700       43        1           0                 1                        0   \n","\n","   presch_head_start  presch_home_visits  quality_bronze  quality_gold  quality_licensed  \\\n","0                  1                   0           False         False              True   \n","1                  0                   0           False         False              True   \n","2                  1                   0           False         False              True   \n","3                  0                   0           False         False              True   \n","4                  1                   1           False          True             False   \n","\n","   quality_none  quality_silver  Accepts_CCAP  \n","0         False           False          True  \n","1         False           False          True  \n","2         False           False          True  \n","3         False           False         False  \n","4         False           False          True  "],"text/html":["\n","  <div id=\"df-a0593e42-53b5-4330-886c-888a65ad4f32\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>site_name</th>\n","      <th>description</th>\n","      <th>address</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>phone_number</th>\n","      <th>url</th>\n","      <th>ages_served</th>\n","      <th>ages_0_3</th>\n","      <th>ages_3_5</th>\n","      <th>weekday_availability</th>\n","      <th>program_information</th>\n","      <th>other_features</th>\n","      <th>accreditation</th>\n","      <th>quality</th>\n","      <th>quality_rating</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>location</th>\n","      <th>geometry</th>\n","      <th>index_right</th>\n","      <th>GEOID10</th>\n","      <th>commarea</th>\n","      <th>preschN</th>\n","      <th>presch_cps</th>\n","      <th>presch_community</th>\n","      <th>presch_early_head_start</th>\n","      <th>presch_head_start</th>\n","      <th>presch_home_visits</th>\n","      <th>quality_bronze</th>\n","      <th>quality_gold</th>\n","      <th>quality_licensed</th>\n","      <th>quality_none</th>\n","      <th>quality_silver</th>\n","      <th>Accepts_CCAP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>198</td>\n","      <td>ABC Preschool</td>\n","      <td>&lt;p&gt;We have seen that there is a need for stron...</td>\n","      <td>3800 N Austin Ave</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60634</td>\n","      <td>(773) 685-9033</td>\n","      <td>http://www.abcpreschoolchicago.com</td>\n","      <td>2 years to 6 years</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>Full Week, Part Week, Full Day, Half Day</td>\n","      <td>Community Based, Head Start</td>\n","      <td>Accepts CCAP</td>\n","      <td>None</td>\n","      <td>licensed</td>\n","      <td>Licensed</td>\n","      <td>41.949425</td>\n","      <td>-87.776653</td>\n","      <td>{'latitude': '41.949425', 'longitude': '-87.77...</td>\n","      <td>POINT (-87.777 41.949)</td>\n","      <td>449.0</td>\n","      <td>17031170200</td>\n","      <td>17</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200</td>\n","      <td>Academy of St Benedict the African - Stewart</td>\n","      <td>&lt;p&gt;Our preschool program serves children from ...</td>\n","      <td>6547 S Stewart Ave</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60621</td>\n","      <td>(773) 994-6100</td>\n","      <td>http://www.academystbenedictstewart.org</td>\n","      <td>3 - 5</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>Full Week, Full Day</td>\n","      <td>Community Based</td>\n","      <td>Accepts CCAP</td>\n","      <td>NAEYC, AdvanceEd candidate</td>\n","      <td>licensed</td>\n","      <td>Licensed</td>\n","      <td>41.774735</td>\n","      <td>-87.634413</td>\n","      <td>{'latitude': '41.774735', 'longitude': '-87.63...</td>\n","      <td>POINT (-87.634 41.775)</td>\n","      <td>441.0</td>\n","      <td>17031680900</td>\n","      <td>68</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>480</td>\n","      <td>A Child's World</td>\n","      <td>&lt;p&gt;Little Genius is located in the Roseland co...</td>\n","      <td>2145 E 83rd St</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60617</td>\n","      <td>(773) 978-6598</td>\n","      <td>http://adasmckinley.org</td>\n","      <td>None</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>None</td>\n","      <td>Community Based, Head Start</td>\n","      <td>Accepts CCAP</td>\n","      <td>None</td>\n","      <td>licensed</td>\n","      <td>Licensed</td>\n","      <td>41.744159</td>\n","      <td>-87.571599</td>\n","      <td>{'latitude': '41.744159', 'longitude': '-87.57...</td>\n","      <td>POINT (-87.572 41.744)</td>\n","      <td>515.0</td>\n","      <td>17031460500</td>\n","      <td>46</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>999</td>\n","      <td>Ada S. McKinley - Bunnyland Day Care</td>\n","      <td>NaN</td>\n","      <td>545 W 119th St</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60628</td>\n","      <td>(773) 568-5200</td>\n","      <td>NaN</td>\n","      <td>6 weeks to 5 years</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>None</td>\n","      <td>Community Based</td>\n","      <td>NaN</td>\n","      <td>NAEYC</td>\n","      <td>licensed</td>\n","      <td>Licensed</td>\n","      <td>41.677689</td>\n","      <td>-87.636695</td>\n","      <td>{'latitude': '41.677688577398', 'longitude': '...</td>\n","      <td>POINT (-87.637 41.678)</td>\n","      <td>61.0</td>\n","      <td>17031530501</td>\n","      <td>53</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>205</td>\n","      <td>Ada S. McKinley Community Services - Ersula Ho...</td>\n","      <td>&lt;p&gt;Ersula Howard is located in the South shore...</td>\n","      <td>7222 S Exchange Ave</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60649</td>\n","      <td>(773) 221-9711</td>\n","      <td>http://www.adasmckinley.org</td>\n","      <td>3 years to 5 years</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>Full Week, Full Day</td>\n","      <td>Offers Home Visiting, Community Based, Head Start</td>\n","      <td>Accepts CCAP</td>\n","      <td>COA</td>\n","      <td>gold</td>\n","      <td>Gold</td>\n","      <td>41.763831</td>\n","      <td>-87.564609</td>\n","      <td>{'latitude': '41.763831', 'longitude': '-87.56...</td>\n","      <td>POINT (-87.565 41.764)</td>\n","      <td>424.0</td>\n","      <td>17031430700</td>\n","      <td>43</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0593e42-53b5-4330-886c-888a65ad4f32')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a0593e42-53b5-4330-886c-888a65ad4f32 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a0593e42-53b5-4330-886c-888a65ad4f32');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7e661fc6-cfd1-4008-a41f-37eb4340b3e7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e661fc6-cfd1-4008-a41f-37eb4340b3e7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7e661fc6-cfd1-4008-a41f-37eb4340b3e7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"presch2"}},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["summy = ['preschN', 'ages_0_3', 'ages_3_5',\n","         'quality_licensed', 'quality_gold', 'quality_silver',\t'quality_bronze',\n","         'presch_cps', 'presch_community', 'presch_early_head_start', 'presch_head_start',\n","         'presch_home_visits', 'Accepts_CCAP']\n","\n","preagg = presch2.groupby('GEOID10')[summy].sum().reset_index()\n","preagg.geoid10 = preagg['GEOID10'].astype(np.int64)"],"metadata":{"id":"_gPWjo-ZSr7c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718312993675,"user_tz":300,"elapsed":196,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"212379a0-ec24-427f-8de7-5f25c8f3db33"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-91-646e795450c1>:7: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  preagg.geoid10 = preagg['GEOID10'].astype(np.int64)\n"]}]},{"cell_type":"code","source":["# preagg.columns.to_list()\n","\n","colsdiv = ['ages_0_3', 'ages_3_5', 'quality_licensed', 'quality_gold', 'quality_silver', 'quality_bronze', 'presch_cps',\n","           'presch_community', 'presch_early_head_start', 'presch_head_start', 'presch_home_visits', 'Accepts_CCAP']\n","\n","# Divide columns by # and create new columns for percentages\n","for col in colsdiv:\n","    new_col_name = f\"{col}_pct\"\n","    preagg[new_col_name] = (preagg[col] / preagg['preschN']) * 100\n","\n","preagg.drop(colsdiv, axis=1, inplace=True)"],"metadata":{"id":"j3U2DS9QZpzf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718313003377,"user_tz":300,"elapsed":204,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"5451d0cd-62b9-4aff-8a90-2e28b265b1c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       GEOID10  preschN  ages_0_3_pct  ages_3_5_pct  quality_licensed_pct  quality_gold_pct  \\\n","0  17031010100        1      0.000000         100.0              0.000000        100.000000   \n","1  17031010201        1      0.000000         100.0              0.000000        100.000000   \n","2  17031010202        2    100.000000         100.0              0.000000         50.000000   \n","3  17031010600        3     33.333333         100.0             33.333333         66.666667   \n","4  17031010702        2     50.000000         100.0              0.000000        100.000000   \n","\n","   quality_silver_pct  quality_bronze_pct  presch_cps_pct  presch_community_pct  \\\n","0                 0.0                 0.0      100.000000              0.000000   \n","1                 0.0                 0.0      100.000000              0.000000   \n","2                50.0                 0.0        0.000000            100.000000   \n","3                 0.0                 0.0       33.333333             66.666667   \n","4                 0.0                 0.0       50.000000             50.000000   \n","\n","   presch_early_head_start_pct  presch_head_start_pct  presch_home_visits_pct  Accepts_CCAP_pct  \n","0                     0.000000                  100.0                0.000000          0.000000  \n","1                     0.000000                  100.0                0.000000          0.000000  \n","2                   100.000000                    0.0                0.000000        100.000000  \n","3                    33.333333                    0.0               33.333333         66.666667  \n","4                    50.000000                   50.0                0.000000         50.000000  \n"]}]},{"cell_type":"markdown","source":["### Export and reload"],"metadata":{"id":"BNl6A4g_GfW6"}},{"cell_type":"code","source":["with open(dir + \"1 Chicago datamart/preschools_tract.csv\", 'w') as f:\n","  presch.to_csv(f)\n","\n","with open(dir + \"1 Chicago datamart/preschools_agg_tract.csv\", 'w') as f:\n","  preagg.to_csv(f)"],"metadata":{"id":"QRL7_jKtGgop"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","preagg = pd.read_csv(dir + '1 Chicago datamart/preschools_agg_tract.csv')\n","preagg = preagg.drop(columns=[\"Unnamed: 0\"])\n","\n","frames.append('preagg')"],"metadata":{"id":"eZOThQpxGrj3","executionInfo":{"status":"ok","timestamp":1727113566774,"user_tz":300,"elapsed":1197,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":["## Community centers - reload"],"metadata":{"id":"1a8mCDMUY8gC"}},{"cell_type":"code","source":["cc_api = 'https://data.cityofchicago.org/resource/tyd3-k85v.json'\n","cc = pd.read_json(cc_api)\n","\n","cc['latitude'] = cc['location'].apply(lambda x: x['latitude'])\n","cc['longitude'] = cc['location'].apply(lambda x: x['longitude'])\n","\n","cc['address'] = cc['location'].apply(lambda x: x['human_address'].split(',')[0])\n","cc['address'] = cc['address'].apply(lambda x: x.split(\":\")[1])\n","cc['address'] = cc['address'].str.replace('\"', \"\")\n","\n","cc['city'] = cc['location'].apply(lambda x: x['human_address'].split(',')[1])\n","cc['city'] = cc['city'].apply(lambda x: x.split(':')[1])\n","cc['city'] = cc['city'].str.replace('\"', \"\")\n","\n","cc['needs_recoding'] = cc['location'].apply(lambda x: x['needs_recoding']) # All are okay\n","\n","cc = cc[['site', 'address', 'city', 'state', 'zip', 'latitude', 'longitude']]"],"metadata":{"id":"boD_PX5EY_1F","colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"status":"ok","timestamp":1718313232790,"user_tz":300,"elapsed":973,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"0da49108-8f39-4c6c-9245-3b37bee440db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(6, 13)\n"]},{"output_type":"execute_result","data":{"text/plain":["                   site                    address      city state    zip   latitude   longitude\n","0  South Chicago Center   8650 S Commercial Avenue   Chicago    IL  60617   41.73785  -87.551448\n","1           King Center       4314 S Cottage Grove   Chicago    IL  60653  41.816343  -87.609466\n","2      Englewood Center         1140 W 79th Street   Chicago    IL  60620  41.750511  -87.652961\n","3     North Area Center        845 W Wilson Avenue   Chicago    IL  60640  41.965507  -87.651797\n","4       Garfield Center         10 S Kedzie Avenue   Chicago    IL  60612  41.880884  -87.706142"],"text/html":["\n","  <div id=\"df-8aba5794-ea15-4478-80f4-6bfae34c6d25\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site</th>\n","      <th>address</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>South Chicago Center</td>\n","      <td>8650 S Commercial Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60617</td>\n","      <td>41.73785</td>\n","      <td>-87.551448</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>King Center</td>\n","      <td>4314 S Cottage Grove</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60653</td>\n","      <td>41.816343</td>\n","      <td>-87.609466</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Englewood Center</td>\n","      <td>1140 W 79th Street</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60620</td>\n","      <td>41.750511</td>\n","      <td>-87.652961</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>North Area Center</td>\n","      <td>845 W Wilson Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60640</td>\n","      <td>41.965507</td>\n","      <td>-87.651797</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Garfield Center</td>\n","      <td>10 S Kedzie Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60612</td>\n","      <td>41.880884</td>\n","      <td>-87.706142</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8aba5794-ea15-4478-80f4-6bfae34c6d25')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8aba5794-ea15-4478-80f4-6bfae34c6d25 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8aba5794-ea15-4478-80f4-6bfae34c6d25');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-45f67f66-58c1-4f07-8393-f9b34ce96ce0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45f67f66-58c1-4f07-8393-f9b34ce96ce0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-45f67f66-58c1-4f07-8393-f9b34ce96ce0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cc","summary":"{\n  \"name\": \"cc\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"site\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"South Chicago Center\",\n          \"King Center\",\n          \"Trina Davila Center\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \" 8650 S Commercial Avenue\",\n          \" 4314 S Cottage Grove\",\n          \" 4300 W Armitage Avenue\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \" Chicago\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"IL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 60612,\n        \"max\": 60653,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          60617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"41.73785\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"-87.551448\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":100}]},{"cell_type":"markdown","source":["### GIS"],"metadata":{"id":"cTzyWSnzg_Zu"}},{"cell_type":"code","source":["cc_shp = gpd.GeoDataFrame(cc,\n","                           geometry=gpd.points_from_xy(\n","                              cc.longitude, cc.latitude),\n","                           crs=crs)"],"metadata":{"id":"qRmhlYB4hAPv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718313246258,"user_tz":300,"elapsed":202,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"3f6895df-48c1-47d5-def3-a1723b17de1d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]},{"output_type":"execute_result","data":{"text/plain":["<Projected CRS: EPSG:3435>\n","Name: NAD83 / Illinois East (ftUS)\n","Axis Info [cartesian]:\n","- E[east]: Easting (US survey foot)\n","- N[north]: Northing (US survey foot)\n","Area of Use:\n","- name: United States (USA) - Illinois - counties of Boone; Champaign; Clark; Clay; Coles; Cook; Crawford; Cumberland; De Kalb; De Witt; Douglas; Du Page; Edgar; Edwards; Effingham; Fayette; Ford; Franklin; Gallatin; Grundy; Hamilton; Hardin; Iroquois; Jasper; Jefferson; Johnson; Kane; Kankakee; Kendall; La Salle; Lake; Lawrence; Livingston; Macon; Marion; Massac; McHenry; McLean; Moultrie; Piatt; Pope; Richland; Saline; Shelby; Vermilion; Wabash; Wayne; White; Will; Williamson.\n","- bounds: (-89.27, 37.06, -87.02, 42.5)\n","Coordinate Operation:\n","- name: SPCS83 Illinois East zone (US Survey feet)\n","- method: Transverse Mercator\n","Datum: North American Datum 1983\n","- Ellipsoid: GRS 1980\n","- Prime Meridian: Greenwich"]},"metadata":{},"execution_count":101}]},{"cell_type":"code","source":["# Add census tract\n","\n","merge1 = gpd.sjoin(cc_shp, tracts_shp, how='left', predicate='within')\n","merge1.drop(columns=['index_right', 'commarea'], inplace=True)"],"metadata":{"id":"M-r6s66BhGLn","colab":{"base_uri":"https://localhost:8080/","height":311},"executionInfo":{"status":"ok","timestamp":1718313301345,"user_tz":300,"elapsed":181,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"9d2bd7d6-2f96-4bff-ccd6-e52723036d71"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(6, 11)\n"]},{"output_type":"execute_result","data":{"text/plain":["                   site                    address      city state    zip   latitude   longitude  \\\n","0  South Chicago Center   8650 S Commercial Avenue   Chicago    IL  60617   41.73785  -87.551448   \n","1           King Center       4314 S Cottage Grove   Chicago    IL  60653  41.816343  -87.609466   \n","2      Englewood Center         1140 W 79th Street   Chicago    IL  60620  41.750511  -87.652961   \n","3     North Area Center        845 W Wilson Avenue   Chicago    IL  60640  41.965507  -87.651797   \n","4       Garfield Center         10 S Kedzie Avenue   Chicago    IL  60612  41.880884  -87.706142   \n","\n","                 geometry      GEOID10  \n","0  POINT (-87.551 41.738)  17031460301  \n","1  POINT (-87.609 41.816)  17031836000  \n","2  POINT (-87.653 41.751)  17031710800  \n","3  POINT (-87.652 41.966)  17031031501  \n","4  POINT (-87.706 41.881)  17031271300  "],"text/html":["\n","  <div id=\"df-d09614fb-be60-441b-887f-2eab19c969ac\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site</th>\n","      <th>address</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>geometry</th>\n","      <th>GEOID10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>South Chicago Center</td>\n","      <td>8650 S Commercial Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60617</td>\n","      <td>41.73785</td>\n","      <td>-87.551448</td>\n","      <td>POINT (-87.551 41.738)</td>\n","      <td>17031460301</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>King Center</td>\n","      <td>4314 S Cottage Grove</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60653</td>\n","      <td>41.816343</td>\n","      <td>-87.609466</td>\n","      <td>POINT (-87.609 41.816)</td>\n","      <td>17031836000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Englewood Center</td>\n","      <td>1140 W 79th Street</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60620</td>\n","      <td>41.750511</td>\n","      <td>-87.652961</td>\n","      <td>POINT (-87.653 41.751)</td>\n","      <td>17031710800</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>North Area Center</td>\n","      <td>845 W Wilson Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60640</td>\n","      <td>41.965507</td>\n","      <td>-87.651797</td>\n","      <td>POINT (-87.652 41.966)</td>\n","      <td>17031031501</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Garfield Center</td>\n","      <td>10 S Kedzie Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60612</td>\n","      <td>41.880884</td>\n","      <td>-87.706142</td>\n","      <td>POINT (-87.706 41.881)</td>\n","      <td>17031271300</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d09614fb-be60-441b-887f-2eab19c969ac')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d09614fb-be60-441b-887f-2eab19c969ac button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d09614fb-be60-441b-887f-2eab19c969ac');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b8460fbd-8670-4568-a1b6-d7968d5dd95f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b8460fbd-8670-4568-a1b6-d7968d5dd95f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b8460fbd-8670-4568-a1b6-d7968d5dd95f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"merge1","summary":"{\n  \"name\": \"merge1\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"site\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"South Chicago Center\",\n          \"King Center\",\n          \"Trina Davila Center\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \" 8650 S Commercial Avenue\",\n          \" 4314 S Cottage Grove\",\n          \" 4300 W Armitage Avenue\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \" Chicago\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"IL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 60612,\n        \"max\": 60653,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          60617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"41.73785\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"-87.551448\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"POINT (-87.551448 41.73785)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID10\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"17031460301\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["# Make a count\n","ccagg = merge1.groupby('GEOID10').agg(\n","    CommCtrCount = ('ccname', np.size)\n","    )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"awbykCEc2Qoo","executionInfo":{"status":"ok","timestamp":1718313362120,"user_tz":300,"elapsed":206,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"3e931d6a-7040-41e6-c872-3b3c3d10b6a2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   site                    address      city state    zip   latitude   longitude\n","0  South Chicago Center   8650 S Commercial Avenue   Chicago    IL  60617   41.73785  -87.551448\n","1           King Center       4314 S Cottage Grove   Chicago    IL  60653  41.816343  -87.609466\n","2      Englewood Center         1140 W 79th Street   Chicago    IL  60620  41.750511  -87.652961\n","3     North Area Center        845 W Wilson Avenue   Chicago    IL  60640  41.965507  -87.651797\n","4       Garfield Center         10 S Kedzie Avenue   Chicago    IL  60612  41.880884  -87.706142"],"text/html":["\n","  <div id=\"df-17b6506f-3b9a-45a2-a0f9-c35152327786\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site</th>\n","      <th>address</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>South Chicago Center</td>\n","      <td>8650 S Commercial Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60617</td>\n","      <td>41.73785</td>\n","      <td>-87.551448</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>King Center</td>\n","      <td>4314 S Cottage Grove</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60653</td>\n","      <td>41.816343</td>\n","      <td>-87.609466</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Englewood Center</td>\n","      <td>1140 W 79th Street</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60620</td>\n","      <td>41.750511</td>\n","      <td>-87.652961</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>North Area Center</td>\n","      <td>845 W Wilson Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60640</td>\n","      <td>41.965507</td>\n","      <td>-87.651797</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Garfield Center</td>\n","      <td>10 S Kedzie Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60612</td>\n","      <td>41.880884</td>\n","      <td>-87.706142</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17b6506f-3b9a-45a2-a0f9-c35152327786')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-17b6506f-3b9a-45a2-a0f9-c35152327786 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-17b6506f-3b9a-45a2-a0f9-c35152327786');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1a450806-f1a5-4a21-a06f-1a2fe76e0e54\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a450806-f1a5-4a21-a06f-1a2fe76e0e54')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1a450806-f1a5-4a21-a06f-1a2fe76e0e54 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cc","summary":"{\n  \"name\": \"cc\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"site\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"South Chicago Center\",\n          \"King Center\",\n          \"Trina Davila Center\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \" 8650 S Commercial Avenue\",\n          \" 4314 S Cottage Grove\",\n          \" 4300 W Armitage Avenue\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \" Chicago\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"IL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 60612,\n        \"max\": 60653,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          60617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"41.73785\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"-87.551448\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":106}]},{"cell_type":"code","source":["# Only one center per tract (at most)\n","\n","cc2 = pd.merge(cc, ccagg, on='GEOID10')\n","\n","# Remove lat/long columns and names\n","cc2.drop(columns=['ccLatLong', 'ccname'], inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":216},"id":"xLs7rcfO2uwV","executionInfo":{"status":"error","timestamp":1718313433003,"user_tz":300,"elapsed":216,"user":{"displayName":"Evan Hart","userId":"12429555450062725632"}},"outputId":"01e6d574-090d-4c9b-e860-f0107ab7e5d2"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'ccagg' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-107-a7b7e380fd4f>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Only one center per tract (at most)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mcc2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mccagg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'GEOID10'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcc2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mcc2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'ccagg' is not defined"]}]},{"cell_type":"markdown","source":["### Export and reload"],"metadata":{"id":"7av5br1tfefM"}},{"cell_type":"code","source":["with open(dir + \"1 Chicago datamart/comm_ctrs.csv\", 'w') as f:\n","  cc2.to_csv(f)"],"metadata":{"id":"S8P_GFqzeW2v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","cc = pd.read_csv(dir + '1 Chicago datamart/comm_ctrs.csv')\n","\n","cc.rename(columns={'geoid10': 'GEOID10', 'site': 'ccname', 'geometry': 'ccLatLong'}, inplace=True)\n","cc = cc[['GEOID10', 'CommCtrCount']]\n","\n","frames.append('cc')"],"metadata":{"id":"Er00RSy_fnQW","executionInfo":{"status":"ok","timestamp":1727113712490,"user_tz":300,"elapsed":298,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":47,"outputs":[]},{"cell_type":"markdown","source":["## Libraries"],"metadata":{"id":"1jqUTFFRf4Bq"}},{"cell_type":"code","source":["r = 'https://data.cityofchicago.org/resource/x8fc-8rcq.json'\n","lib = pd.read_json(r)\n","lib = lib[lib.columns.drop(list(lib.filter(regex='computed')))]"],"metadata":{"id":"mkt4F3Oxf5CW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### GIS"],"metadata":{"id":"e_wrhPiOiWin"}},{"cell_type":"code","source":["# Extract lat/long\n","\n","lib['latitude'] = lib['location'].apply(lambda x: x['latitude'])\n","lib['longitude'] = lib['location'].apply(lambda x: x['longitude'])"],"metadata":{"id":"aNyTPC35f5FM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Geocode to census tract\n","\n","lib2 = LatLongTract(lib, \"latitude\", \"longitude\")"],"metadata":{"id":"qbKww0f1iYLj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Summarize by tract"],"metadata":{"id":"74zshguSisrh"}},{"cell_type":"code","source":["lib_tract = lib2.groupby(['GEOID10'])['name_'].count().reset_index().rename(columns={'name_':'LibraryN'})"],"metadata":{"id":"n2IeLHgjiuDj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Export and reload"],"metadata":{"id":"8Fy0Jti0jS_c"}},{"cell_type":"code","source":["# Export line listing\n","with open(dir + '1 Chicago datamart/library_line.csv', 'w') as f:\n","  lib2.to_csv(f)\n","\n"," # Export tract counts\n","with open(dir + '1 Chicago datamart/library_tract.csv', 'w') as f:\n","  lib_tract.to_csv(f)"],"metadata":{"id":"R4zp_iYUf5IL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","lib_tract = pd.read_csv(dir + '1 Chicago datamart/library_tract.csv', dtype='string')\n","lib_tract.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('lib_tract')"],"metadata":{"id":"Rtz7VYmyjkAg","executionInfo":{"status":"ok","timestamp":1727113577552,"user_tz":300,"elapsed":1241,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":["## Senior centers - reload"],"metadata":{"id":"Cm-7niN0Y__K"}},{"cell_type":"code","source":["sen_api = 'https://data.cityofchicago.org/resource/qhfc-4cw2.json'\n","sen = pd.read_json(sen_api)\n","print(sen.shape)\n","\n","sen['latitude'] = sen['location'].apply(lambda x: x['latitude'])\n","sen['longitude'] = sen['location'].apply(lambda x: x['longitude'])\n","\n","sen['address'] = sen['location'].apply(lambda x: x['human_address'].split(',')[0])\n","sen['address'] = sen['address'].apply(lambda x: x.split(\":\")[1])\n","sen['address'] = sen['address'].str.replace('\"', \"\")\n","\n","sen['city'] = sen['location'].apply(lambda x: x['human_address'].split(',')[1])\n","sen['city'] = sen['city'].apply(lambda x: x.split(':')[1])\n","sen['city'] = sen['city'].str.replace('\"', \"\")\n","\n","sen = sen[['site_name', 'address', 'city', 'state', 'zip', 'latitude', 'longitude']]"],"metadata":{"id":"69uEtdrCZBMm","colab":{"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"status":"ok","timestamp":1718288935210,"user_tz":300,"elapsed":799,"user":{"displayName":"Alicia Severiano Perez","userId":"04999063636613385886"}},"outputId":"b85b5d56-b689-44b4-c452-0514d94141ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(21, 14)\n"]},{"output_type":"execute_result","data":{"text/plain":["      site_name                 address      city state    zip         latitude         longitude\n","0        Pilsen    2021 S Morgan Street   Chicago    IL  60608        41.855146        -87.651544\n","1     Englewood   653 657 W 63rd Street   Chicago    IL  60621  41.779925314027   -87.63308324284\n","2  Central West     2102 W Ogden Avenue   Chicago    IL  60612   41.87104299406  -87.678598248246\n","3     West Town   1613 W Chicago Avenue   Chicago    IL  60622  41.895752189071  -87.668266590795\n","4      Roseland    10426 S Michigan Ave   Chicago    IL  60628       41.7043968       -87.6211866"],"text/html":["\n","  <div id=\"df-1b29b19f-cb0b-4982-8d06-ca40b2a3052e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site_name</th>\n","      <th>address</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Pilsen</td>\n","      <td>2021 S Morgan Street</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60608</td>\n","      <td>41.855146</td>\n","      <td>-87.651544</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Englewood</td>\n","      <td>653 657 W 63rd Street</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60621</td>\n","      <td>41.779925314027</td>\n","      <td>-87.63308324284</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Central West</td>\n","      <td>2102 W Ogden Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60612</td>\n","      <td>41.87104299406</td>\n","      <td>-87.678598248246</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>West Town</td>\n","      <td>1613 W Chicago Avenue</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60622</td>\n","      <td>41.895752189071</td>\n","      <td>-87.668266590795</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Roseland</td>\n","      <td>10426 S Michigan Ave</td>\n","      <td>Chicago</td>\n","      <td>IL</td>\n","      <td>60628</td>\n","      <td>41.7043968</td>\n","      <td>-87.6211866</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b29b19f-cb0b-4982-8d06-ca40b2a3052e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1b29b19f-cb0b-4982-8d06-ca40b2a3052e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1b29b19f-cb0b-4982-8d06-ca40b2a3052e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-68c97948-2fd8-4d17-84cd-7ef064f6a2d0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68c97948-2fd8-4d17-84cd-7ef064f6a2d0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-68c97948-2fd8-4d17-84cd-7ef064f6a2d0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"sen","summary":"{\n  \"name\": \"sen\",\n  \"rows\": 21,\n  \"fields\": [\n    {\n      \"column\": \"site_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"Pilsen\",\n          \"Southeast\",\n          \"Northeast\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \" 2021 S Morgan Street\",\n          \" 1767 E 79th Street\",\n          \" 2019 W Lawrence Avenue\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \" Chicago\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"IL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 60602,\n        \"max\": 60660,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          60608\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"41.855146\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"-87.651544\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["### GIS"],"metadata":{"id":"ze3XA-Q8hek-"}},{"cell_type":"code","source":["sen_shp = gpd.GeoDataFrame(sen,\n","                           geometry=gpd.points_from_xy(\n","                              sen.longitude, sen.latitude),\n","                           crs=crs)\n","\n","sen_shp.crs"],"metadata":{"id":"5tUCk9TXhfo3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718289041448,"user_tz":300,"elapsed":190,"user":{"displayName":"Alicia Severiano Perez","userId":"04999063636613385886"}},"outputId":"be2f771f-6b3a-4244-a649-17d8eab079b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]},{"output_type":"execute_result","data":{"text/plain":["<Projected CRS: EPSG:3435>\n","Name: NAD83 / Illinois East (ftUS)\n","Axis Info [cartesian]:\n","- E[east]: Easting (US survey foot)\n","- N[north]: Northing (US survey foot)\n","Area of Use:\n","- name: United States (USA) - Illinois - counties of Boone; Champaign; Clark; Clay; Coles; Cook; Crawford; Cumberland; De Kalb; De Witt; Douglas; Du Page; Edgar; Edwards; Effingham; Fayette; Ford; Franklin; Gallatin; Grundy; Hamilton; Hardin; Iroquois; Jasper; Jefferson; Johnson; Kane; Kankakee; Kendall; La Salle; Lake; Lawrence; Livingston; Macon; Marion; Massac; McHenry; McLean; Moultrie; Piatt; Pope; Richland; Saline; Shelby; Vermilion; Wabash; Wayne; White; Will; Williamson.\n","- bounds: (-89.27, 37.06, -87.02, 42.5)\n","Coordinate Operation:\n","- name: SPCS83 Illinois East zone (US Survey feet)\n","- method: Transverse Mercator\n","Datum: North American Datum 1983\n","- Ellipsoid: GRS 1980\n","- Prime Meridian: Greenwich"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["# Add census tract\n","\n","merge1 = gpd.sjoin(sen_shp, tracts_shp, how='left', predicate='within')\n","merge1.drop(columns=['index_right', 'commarea_n'], inplace=True)\n","merge1.rename(columns={'site_name': 'site'}, inplace=True)"],"metadata":{"id":"ZNgMFvLFhil8","colab":{"base_uri":"https://localhost:8080/","height":367},"executionInfo":{"status":"error","timestamp":1718289052827,"user_tz":300,"elapsed":235,"user":{"displayName":"Alicia Severiano Perez","userId":"04999063636613385886"}},"outputId":"b86696ba-1a37-416e-8c05-d02321b718d2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(21, 11)\n"]},{"output_type":"error","ename":"KeyError","evalue":"\"['commarea_n'] not found in axis\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-35-2aa44082a28f>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmerge1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msen_shp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracts_shp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'left'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'within'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerge1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mmerge1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'index_right'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'commarea_n'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mmerge1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'site_name'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'site'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mmerge1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5256\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5257\u001b[0m         \"\"\"\n\u001b[0;32m-> 5258\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5259\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5260\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4547\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4548\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4549\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4551\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4589\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4590\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4591\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4592\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4593\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6697\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6698\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6699\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{list(labels[mask])} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6700\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6701\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['commarea_n'] not found in axis\""]}]},{"cell_type":"code","source":["# Only one center per tract (at most)\n","\n","# Make a count\n","\n","senagg = sen.groupby('GEOID10').agg(\n","    SnrCtrCount = ('senctrname', np.size)\n","    )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"S6iuBYfn3ULH","executionInfo":{"status":"ok","timestamp":1709159921389,"user_tz":360,"elapsed":4,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"35a6e775-bf15-45ec-aa93-a6aa6696b8ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(21, 1)\n"]},{"output_type":"execute_result","data":{"text/plain":["             SnrCtrCount\n","GEOID10                 \n","17031030601            1\n","17031040600            1\n","17031050200            1\n","17031100300            1\n","17031150300            1"],"text/html":["\n","  <div id=\"df-42369fa5-3a4e-49b4-b6ad-c893d2a3feab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SnrCtrCount</th>\n","    </tr>\n","    <tr>\n","      <th>GEOID10</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>17031030601</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>17031040600</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>17031050200</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>17031100300</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>17031150300</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42369fa5-3a4e-49b4-b6ad-c893d2a3feab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-42369fa5-3a4e-49b4-b6ad-c893d2a3feab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-42369fa5-3a4e-49b4-b6ad-c893d2a3feab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-abc7e77f-67a9-4e17-b07a-95590fad380d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-abc7e77f-67a9-4e17-b07a-95590fad380d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-abc7e77f-67a9-4e17-b07a-95590fad380d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"senagg","summary":"{\n  \"name\": \"senagg\",\n  \"rows\": 21,\n  \"fields\": [\n    {\n      \"column\": \"SnrCtrCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["sen2 = pd.merge(sen, senagg, on='GEOID10')\n","\n","sen2.drop(columns=['senctrLatLong', 'senctrname'], inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"G_Z2nFOo3USq","executionInfo":{"status":"ok","timestamp":1709159926267,"user_tz":360,"elapsed":5,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"ca7d2437-653b-439f-b4b0-408770e27e3b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(21, 4)\n"]},{"output_type":"execute_result","data":{"text/plain":["       GEOID10    senctrname                             senctrLatLong  SnrCtrCount\n","0  17031310400        Pilsen              POINT (-87.651544 41.855146)            1\n","1  17031680900     Englewood   POINT (-87.63308324284 41.779925314027)            1\n","2  17031838200  Central West   POINT (-87.678598248246 41.87104299406)            1\n","3  17031243200     West Town  POINT (-87.668266590795 41.895752189071)            1\n","4  17031490902      Roseland            POINT (-87.6211866 41.7043968)            1"],"text/html":["\n","  <div id=\"df-5a4efda5-d44b-4bf5-b6f1-e13d02a0f33c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>GEOID10</th>\n","      <th>senctrname</th>\n","      <th>senctrLatLong</th>\n","      <th>SnrCtrCount</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17031310400</td>\n","      <td>Pilsen</td>\n","      <td>POINT (-87.651544 41.855146)</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>17031680900</td>\n","      <td>Englewood</td>\n","      <td>POINT (-87.63308324284 41.779925314027)</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>17031838200</td>\n","      <td>Central West</td>\n","      <td>POINT (-87.678598248246 41.87104299406)</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17031243200</td>\n","      <td>West Town</td>\n","      <td>POINT (-87.668266590795 41.895752189071)</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17031490902</td>\n","      <td>Roseland</td>\n","      <td>POINT (-87.6211866 41.7043968)</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a4efda5-d44b-4bf5-b6f1-e13d02a0f33c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5a4efda5-d44b-4bf5-b6f1-e13d02a0f33c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5a4efda5-d44b-4bf5-b6f1-e13d02a0f33c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-52b8d569-8801-4460-acb6-1ad8c8363b0e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52b8d569-8801-4460-acb6-1ad8c8363b0e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-52b8d569-8801-4460-acb6-1ad8c8363b0e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"sen2","summary":"{\n  \"name\": \"sen2\",\n  \"rows\": 21,\n  \"fields\": [\n    {\n      \"column\": \"GEOID10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 239102,\n        \"min\": 17031030601,\n        \"max\": 17031838200,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          17031310400,\n          17031460500,\n          17031040600\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"senctrname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"Pilsen\",\n          \"Southeast\",\n          \"Northeast\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"senctrLatLong\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"POINT (-87.651544 41.855146)\",\n          \"POINT (-87.581982645913 41.751512943458)\",\n          \"POINT (-87.680192382037 41.968722546865)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SnrCtrCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["### Export and reload"],"metadata":{"id":"AWFqvK8tgsPc"}},{"cell_type":"code","source":["with open(dir + \"1 Chicago datamart/sen_ctrs.csv\", 'w') as f:\n","  sen2.to_csv(f)"],"metadata":{"id":"mTQgYusrgt_A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","sen = pd.read_csv(dir + '1 Chicago datamart/sen_ctrs.csv')\n","sen = sen.drop(columns=[\"Unnamed: 0\"])\n","sen.rename(columns={'geoid10': 'GEOID10', 'site': 'senctrname', 'geometry': 'senctrLatLong'}, inplace=True)\n","sen = sen[['GEOID10', 'SnrCtrCount']]\n","\n","frames.append('sen')"],"metadata":{"id":"hJAxF7C-4zvA","executionInfo":{"status":"ok","timestamp":1727113727450,"user_tz":300,"elapsed":478,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":48,"outputs":[]},{"cell_type":"markdown","source":["## WIC - reload"],"metadata":{"id":"S3m_JsIP2K2U"}},{"cell_type":"code","source":["wic_api = 'https://data.cityofchicago.org/resource/a7k7-a5bg.json'\n","wic = pd.read_json(wic_api)\n","print(wic.shape)"],"metadata":{"id":"5M2MptRmx3yK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["wic = wic[['site_name', 'latitude', 'longitude', 'street_address', 'city', 'zip', 'family_case_management',\n","           'healthy_families_program', 'public_health_nursing', 'healthy_start_program']]\n","\n","# Mapping dictionary for replacement\n","mapping = {'Y': 1, np.nan: 0}\n","\n","# Columns to be recoded\n","columns_to_recode = ['family_case_management', 'healthy_families_program', 'public_health_nursing', 'healthy_start_program']\n","\n","# Recoding columns\n","wic[columns_to_recode] = wic[columns_to_recode].applymap(lambda x: mapping.get(x, x))"],"metadata":{"id":"v8-haunO2NFy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### GIS"],"metadata":{"id":"kjJuoHqC48uO"}},{"cell_type":"code","source":["wic_shp = gpd.GeoDataFrame(wic,\n","                           geometry=gpd.points_from_xy(\n","                              wic.longitude, wic.latitude),\n","                           crs=crs)"],"metadata":{"id":"G874CpEc479l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Add census tract\n","\n","merge1 = gpd.sjoin(wic_shp, tracts_shp, how='left', predicate='within')\n","merge1.drop(columns=['index_right', 'commarea_n'], inplace=True)\n","merge1.rename(columns={'site_name': 'site'}, inplace=True)"],"metadata":{"id":"FYUgopuK48Qk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Only one center per tract (at most)\n","\n","# Make a count\n","\n","wicagg = wic.groupby('geoid10').agg(\n","    WICCount = ('site', np.size),\n","    AvgFamily_case_management = ('family_case_management', np.mean),\n","    AvgHealthy_families_program\t= ('healthy_families_program', np.mean),\n","    AvgPublic_health_nursing\t = ('public_health_nursing', np.mean),\n","    AvgHealthy_start_program = ('healthy_start_program', np.mean)\n","    )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":275},"id":"OjS8N4nX34Ex","executionInfo":{"status":"ok","timestamp":1709160369301,"user_tz":360,"elapsed":319,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"5f14d43a-10a8-4303-e9f8-84d1f002660d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(15, 5)\n"]},{"output_type":"execute_result","data":{"text/plain":["             WICCount  AvgFamily_case_management  AvgHealthy_families_program  \\\n","geoid10                                                                         \n","17031020802         1                        0.0                          0.0   \n","17031031502         1                        1.0                          0.0   \n","17031241100         1                        0.0                          0.0   \n","17031243200         1                        0.0                          0.0   \n","17031251100         1                        0.0                          0.0   \n","\n","             AvgPublic_health_nursing  AvgHealthy_start_program  \n","geoid10                                                          \n","17031020802                       0.0                       0.0  \n","17031031502                       1.0                       0.0  \n","17031241100                       0.0                       0.0  \n","17031243200                       0.0                       0.0  \n","17031251100                       0.0                       0.0  "],"text/html":["\n","  <div id=\"df-deaaf9c6-a42e-4a6f-8d4d-2119151fb42f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>WICCount</th>\n","      <th>AvgFamily_case_management</th>\n","      <th>AvgHealthy_families_program</th>\n","      <th>AvgPublic_health_nursing</th>\n","      <th>AvgHealthy_start_program</th>\n","    </tr>\n","    <tr>\n","      <th>geoid10</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>17031020802</th>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>17031031502</th>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>17031241100</th>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>17031243200</th>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>17031251100</th>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-deaaf9c6-a42e-4a6f-8d4d-2119151fb42f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-deaaf9c6-a42e-4a6f-8d4d-2119151fb42f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-deaaf9c6-a42e-4a6f-8d4d-2119151fb42f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1eeb63a8-44e0-4cd1-95fb-04cb19765dbf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1eeb63a8-44e0-4cd1-95fb-04cb19765dbf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1eeb63a8-44e0-4cd1-95fb-04cb19765dbf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"wicagg","summary":"{\n  \"name\": \"wicagg\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"WICCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgFamily_case_management\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.48795003647426666,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgHealthy_families_program\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25819888974716115,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgPublic_health_nursing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3518657752744984,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgHealthy_start_program\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25819888974716115,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["wic2 = pd.merge(wic, wicagg, on='geoid10')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"id":"t1XtENau34I8","executionInfo":{"status":"ok","timestamp":1709160428518,"user_tz":360,"elapsed":3,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"a9680ad0-8d75-4242-84c9-7b83429b4701"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(15, 18)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                              site   latitude  longitude         street_address  \\\n","0                            Alivio Medical Center  41.848583 -87.685394   2355 S. Western Ave.   \n","1                   Alivio Medical Center - Morgan  41.854150 -87.653223        966 W. 21st St.   \n","2  Asian Human Services Family Health Center, Inc.  41.990601 -87.690739  2424 W. Peterson Ave.   \n","3                                    Austin Clinic  41.902212 -87.748845   4909 W. Division St.   \n","4                     Chicago Family Health Center  41.729457 -87.552478  9119 S. Exchange Ave.   \n","\n","      city    zip  family_case_management  healthy_families_program  public_health_nursing  \\\n","0  Chicago  60608                       0                         0                      0   \n","1  Chicago  60608                       0                         0                      0   \n","2  Chicago  60659                       0                         0                      0   \n","3  Chicago  60651                       0                         0                      0   \n","4  Chicago  60617                       1                         1                      0   \n","\n","   healthy_start_program                                    geometry      geoid10  commarea  \\\n","0                      0  POINT (-87.6853941892416 41.8485826627697)  17031841300        31   \n","1                      0              POINT (-87.6532229 41.8541501)  17031310500        31   \n","2                      0   POINT (-87.6907388634942 41.990601390534)  17031020802         2   \n","3                      0  POINT (-87.7488454100337 41.9022123009897)  17031251100        25   \n","4                      0  POINT (-87.5524778181968 41.7294571200879)  17031461000        46   \n","\n","   WICCount  AvgFamily_case_management  AvgHealthy_families_program  AvgPublic_health_nursing  \\\n","0         1                        0.0                          0.0                       0.0   \n","1         1                        0.0                          0.0                       0.0   \n","2         1                        0.0                          0.0                       0.0   \n","3         1                        0.0                          0.0                       0.0   \n","4         1                        1.0                          1.0                       0.0   \n","\n","   AvgHealthy_start_program  \n","0                       0.0  \n","1                       0.0  \n","2                       0.0  \n","3                       0.0  \n","4                       0.0  "],"text/html":["\n","  <div id=\"df-8be9c508-602e-4c4c-b6df-e7c2712dcf73\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>street_address</th>\n","      <th>city</th>\n","      <th>zip</th>\n","      <th>family_case_management</th>\n","      <th>healthy_families_program</th>\n","      <th>public_health_nursing</th>\n","      <th>healthy_start_program</th>\n","      <th>geometry</th>\n","      <th>geoid10</th>\n","      <th>commarea</th>\n","      <th>WICCount</th>\n","      <th>AvgFamily_case_management</th>\n","      <th>AvgHealthy_families_program</th>\n","      <th>AvgPublic_health_nursing</th>\n","      <th>AvgHealthy_start_program</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Alivio Medical Center</td>\n","      <td>41.848583</td>\n","      <td>-87.685394</td>\n","      <td>2355 S. Western Ave.</td>\n","      <td>Chicago</td>\n","      <td>60608</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>POINT (-87.6853941892416 41.8485826627697)</td>\n","      <td>17031841300</td>\n","      <td>31</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Alivio Medical Center - Morgan</td>\n","      <td>41.854150</td>\n","      <td>-87.653223</td>\n","      <td>966 W. 21st St.</td>\n","      <td>Chicago</td>\n","      <td>60608</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>POINT (-87.6532229 41.8541501)</td>\n","      <td>17031310500</td>\n","      <td>31</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Asian Human Services Family Health Center, Inc.</td>\n","      <td>41.990601</td>\n","      <td>-87.690739</td>\n","      <td>2424 W. Peterson Ave.</td>\n","      <td>Chicago</td>\n","      <td>60659</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>POINT (-87.6907388634942 41.990601390534)</td>\n","      <td>17031020802</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Austin Clinic</td>\n","      <td>41.902212</td>\n","      <td>-87.748845</td>\n","      <td>4909 W. Division St.</td>\n","      <td>Chicago</td>\n","      <td>60651</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>POINT (-87.7488454100337 41.9022123009897)</td>\n","      <td>17031251100</td>\n","      <td>25</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Chicago Family Health Center</td>\n","      <td>41.729457</td>\n","      <td>-87.552478</td>\n","      <td>9119 S. Exchange Ave.</td>\n","      <td>Chicago</td>\n","      <td>60617</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>POINT (-87.5524778181968 41.7294571200879)</td>\n","      <td>17031461000</td>\n","      <td>46</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8be9c508-602e-4c4c-b6df-e7c2712dcf73')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8be9c508-602e-4c4c-b6df-e7c2712dcf73 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8be9c508-602e-4c4c-b6df-e7c2712dcf73');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bef3cf69-1f48-4f51-abb7-5a25e6dced64\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bef3cf69-1f48-4f51-abb7-5a25e6dced64')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bef3cf69-1f48-4f51-abb7-5a25e6dced64 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"wic2","summary":"{\n  \"name\": \"wic2\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"site\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Henry Booth House\",\n          \"Uptown NHC\",\n          \"Alivio Medical Center\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06871783786399521,\n        \"min\": 41.7294571200879,\n        \"max\": 41.990601390534,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          41.7932745562102,\n          41.858282101206,\n          41.8485826627697\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.049363962956450624,\n        \"min\": -87.7488454100337,\n        \"max\": -87.5524778181968,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          -87.7276640853016,\n          -87.6660132643974,\n          -87.6853941892416\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"street_address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"4150 W. 55th St.\",\n          \"1713 S. Ashland Ave.\",\n          \"2355 S. Western Ave.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Chicago\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 60604,\n        \"max\": 60659,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          60623\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_case_management\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"healthy_families_program\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"public_health_nursing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"healthy_start_program\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"POINT (-87.7276640853016 41.7932745562102)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geoid10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 253786,\n        \"min\": 17031020802,\n        \"max\": 17031841300,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          17031620200\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"commarea\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 2,\n        \"max\": 68,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WICCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgFamily_case_management\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.48795003647426666,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgHealthy_families_program\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25819888974716115,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgPublic_health_nursing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3518657752744984,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgHealthy_start_program\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25819888974716115,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["### Export and reload"],"metadata":{"id":"8oHiDO5G5LHt"}},{"cell_type":"code","source":["with open(dir + \"1 Chicago datamart/wic_ctrs.csv\", 'w') as f:\n","  wic2.to_csv(f)"],"metadata":{"id":"v5Tvm91_48YO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","wic = pd.read_csv(dir + '1 Chicago datamart/wic_ctrs.csv')\n","wic = wic.drop(columns=[\"Unnamed: 0\"])\n","wic.rename(columns={'geoid10': 'GEOID10', 'site': 'wicname', 'geometry': 'wicLatLong'}, inplace=True)\n","wic = wic[['GEOID10', 'WICCount', 'AvgFamily_case_management',\n","           'AvgHealthy_families_program', 'AvgPublic_health_nursing', 'AvgHealthy_start_program']]\n","\n","\n","\n","frames.append('wic')"],"metadata":{"id":"XfyEeV-DguRO","executionInfo":{"status":"ok","timestamp":1727113582353,"user_tz":300,"elapsed":311,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":["# Merge public data"],"metadata":{"id":"xL5YrwxwmhS9"}},{"cell_type":"code","source":["# Convert 'GEOID10' in all DataFrames to numeric\n","for df_name in frames:\n","  # Convert 'GEOID10' to numeric\n","  globals()[df_name]['GEOID10'] = pd.to_numeric(globals()[df_name]['GEOID10'], errors='coerce')"],"metadata":{"id":"fdzYfE3o-k8n","executionInfo":{"status":"ok","timestamp":1727113751251,"user_tz":300,"elapsed":380,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["# Merge all DataFrames on 'GEOID10'\n","\n","merged_df = tractsdf\n","\n","for df_name in frames:\n","    if df_name != 'tractsdf':\n","        merged_df = pd.merge(merged_df, globals()[df_name], on='GEOID10', how='outer')\n","\n","merged_df = merged_df[merged_df.columns.drop(list(merged_df.filter(regex='Unnamed')))]\n","\n","merged_df[['CommCtrCount', 'SnrCtrCount', 'WICCount']] = merged_df[['CommCtrCount', 'SnrCtrCount', 'WICCount']].fillna(0)\n","merged_df.replace([np.inf, -np.inf], 0, inplace=True)"],"metadata":{"id":"BeqgDnEh-wUC","executionInfo":{"status":"ok","timestamp":1727113752732,"user_tz":300,"elapsed":289,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":["# Data check"],"metadata":{"id":"dF55MBq0gq_0"}},{"cell_type":"markdown","source":["## Identify constants"],"metadata":{"id":"2vDoe8pXgyIL"}},{"cell_type":"code","source":["# Identify constant columns\n","constant_columns = [col for col in merged_df.columns if merged_df[col].nunique() == 1]\n","constant_columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nie47rfJgqST","executionInfo":{"status":"ok","timestamp":1727113274544,"user_tz":300,"elapsed":320,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"4f0c95f0-a489-4a4f-c087-bdbe18721b35"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Income_neighbor',\n"," 'House_gt90pct_100pct_pov_low_hs_island',\n"," 'Pop_loss_rate_NHRI',\n"," 'Pop_loss_gt90pct_low_income',\n"," 'Unemploy_ge90pct_low_hs_island']"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["for col in constant_columns:\n","    print(merged_df[col].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dv_US-kHbogS","executionInfo":{"status":"ok","timestamp":1727113275863,"user_tz":300,"elapsed":2,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"1e12997e-3760-4649-e90d-60f1f40e7840"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Income_neighbor\n","False    801\n","Name: count, dtype: int64\n","House_gt90pct_100pct_pov_low_hs_island\n","False    801\n","Name: count, dtype: int64\n","Pop_loss_rate_NHRI\n","0.0002    797\n","Name: count, dtype: int64\n","Pop_loss_gt90pct_low_income\n","False    801\n","Name: count, dtype: int64\n","Unemploy_ge90pct_low_hs_island\n","False    801\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["# merged_df.drop(columns=constant_columns, inplace=True)"],"metadata":{"id":"rTRJM-mwauZm","executionInfo":{"status":"ok","timestamp":1727113281937,"user_tz":300,"elapsed":328,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["## Identify duplicated information across variables"],"metadata":{"id":"FjXwkcImg0Vo"}},{"cell_type":"code","source":["from itertools import combinations\n","\n","# Get all pairs of columns\n","column_pairs = combinations(merged_df.columns, 2)\n","\n","# Find pairs of columns that are identical\n","identical_pairs = [(col1, col2) for col1, col2 in column_pairs if merged_df[col1].equals(merged_df[col2])]\n","\n","# Display the identical pairs\n","identical_pairs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NhVKArmbg2U1","executionInfo":{"status":"ok","timestamp":1727113283582,"user_tz":300,"elapsed":341,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"2b676479-455a-4647-d09c-e851bc6043e6"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('Income_neighbor', 'House_gt90pct_100pct_pov_low_hs_island'),\n"," ('Income_neighbor', 'Pop_loss_gt90pct_low_income'),\n"," ('Income_neighbor', 'Unemploy_ge90pct_low_hs_island'),\n"," ('House_gt90pct_100pct_pov_low_hs_island', 'Pop_loss_gt90pct_low_income'),\n"," ('House_gt90pct_100pct_pov_low_hs_island', 'Unemploy_ge90pct_low_hs_island'),\n"," ('Pop_loss_gt90pct_low_income', 'Unemploy_ge90pct_low_hs_island'),\n"," ('LILATracts_1And10', 'LILATracts_1And20')]"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["from itertools import combinations\n","\n","# Get all pairs of columns\n","column_pairs = combinations(merged_df.columns, 2)\n","\n","# Find pairs of columns that are identical\n","identical_pairs = [(col1, col2) for col1, col2 in column_pairs if merged_df[col1].equals(merged_df[col2])]\n","\n","# Display the identical pairs\n","print(\"Identical column pairs:\")\n","print(identical_pairs)\n","\n","# Display value counts and correlation for each column in the identical pairs\n","for col1, col2 in identical_pairs:\n","    print(f\"\\nValue counts for {col1}:\")\n","    print(merged_df[col1].value_counts())\n","    print(f\"\\nValue counts for {col2}:\")\n","    print(merged_df[col2].value_counts())\n","\n","    # Calculate and display correlation (should be 1 for identical columns)\n","    correlation = merged_df[col1].corr(merged_df[col2])\n","    print(f\"\\nCorrelation between {col1} and {col2}: {correlation:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ha-cx5JScAHX","executionInfo":{"status":"ok","timestamp":1727113287922,"user_tz":300,"elapsed":298,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"a2b0293f-3548-4e3d-e62f-189f09f830c5"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Identical column pairs:\n","[('Income_neighbor', 'House_gt90pct_100pct_pov_low_hs_island'), ('Income_neighbor', 'Pop_loss_gt90pct_low_income'), ('Income_neighbor', 'Unemploy_ge90pct_low_hs_island'), ('House_gt90pct_100pct_pov_low_hs_island', 'Pop_loss_gt90pct_low_income'), ('House_gt90pct_100pct_pov_low_hs_island', 'Unemploy_ge90pct_low_hs_island'), ('Pop_loss_gt90pct_low_income', 'Unemploy_ge90pct_low_hs_island'), ('LILATracts_1And10', 'LILATracts_1And20')]\n","\n","Value counts for Income_neighbor:\n","Income_neighbor\n","False    801\n","Name: count, dtype: int64\n","\n","Value counts for House_gt90pct_100pct_pov_low_hs_island:\n","House_gt90pct_100pct_pov_low_hs_island\n","False    801\n","Name: count, dtype: int64\n","\n","Correlation between Income_neighbor and House_gt90pct_100pct_pov_low_hs_island: nan\n","\n","Value counts for Income_neighbor:\n","Income_neighbor\n","False    801\n","Name: count, dtype: int64\n","\n","Value counts for Pop_loss_gt90pct_low_income:\n","Pop_loss_gt90pct_low_income\n","False    801\n","Name: count, dtype: int64\n","\n","Correlation between Income_neighbor and Pop_loss_gt90pct_low_income: nan\n","\n","Value counts for Income_neighbor:\n","Income_neighbor\n","False    801\n","Name: count, dtype: int64\n","\n","Value counts for Unemploy_ge90pct_low_hs_island:\n","Unemploy_ge90pct_low_hs_island\n","False    801\n","Name: count, dtype: int64\n","\n","Correlation between Income_neighbor and Unemploy_ge90pct_low_hs_island: nan\n","\n","Value counts for House_gt90pct_100pct_pov_low_hs_island:\n","House_gt90pct_100pct_pov_low_hs_island\n","False    801\n","Name: count, dtype: int64\n","\n","Value counts for Pop_loss_gt90pct_low_income:\n","Pop_loss_gt90pct_low_income\n","False    801\n","Name: count, dtype: int64\n","\n","Correlation between House_gt90pct_100pct_pov_low_hs_island and Pop_loss_gt90pct_low_income: nan\n","\n","Value counts for House_gt90pct_100pct_pov_low_hs_island:\n","House_gt90pct_100pct_pov_low_hs_island\n","False    801\n","Name: count, dtype: int64\n","\n","Value counts for Unemploy_ge90pct_low_hs_island:\n","Unemploy_ge90pct_low_hs_island\n","False    801\n","Name: count, dtype: int64\n","\n","Correlation between House_gt90pct_100pct_pov_low_hs_island and Unemploy_ge90pct_low_hs_island: nan\n","\n","Value counts for Pop_loss_gt90pct_low_income:\n","Pop_loss_gt90pct_low_income\n","False    801\n","Name: count, dtype: int64\n","\n","Value counts for Unemploy_ge90pct_low_hs_island:\n","Unemploy_ge90pct_low_hs_island\n","False    801\n","Name: count, dtype: int64\n","\n","Correlation between Pop_loss_gt90pct_low_income and Unemploy_ge90pct_low_hs_island: nan\n","\n","Value counts for LILATracts_1And10:\n","LILATracts_1And10\n","0.000000    770\n","0.333333     18\n","0.666667      8\n","1.000000      5\n","Name: count, dtype: int64\n","\n","Value counts for LILATracts_1And20:\n","LILATracts_1And20\n","0.000000    770\n","0.333333     18\n","0.666667      8\n","1.000000      5\n","Name: count, dtype: int64\n","\n","Correlation between LILATracts_1And10 and LILATracts_1And20: 1.00\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py:2897: RuntimeWarning: invalid value encountered in divide\n","  c /= stddev[:, None]\n"]}]},{"cell_type":"markdown","source":["## Duplicated tract rows?"],"metadata":{"id":"a5utH8b2OZZl"}},{"cell_type":"code","source":["len(merged_df['GEOID10'])-len(merged_df['GEOID10'].drop_duplicates())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j5ki7SXPObT5","executionInfo":{"status":"ok","timestamp":1727113294560,"user_tz":300,"elapsed":334,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"29c4a5b5-8630-4c86-d61d-7dc5b3f1f7bd"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["# Export to csv"],"metadata":{"id":"8k0Z95LS3AUv"}},{"cell_type":"code","source":["# as .csv\n","\n","merged_df.to_csv(curated + '00021_Social_Chicago.csv', index = False)"],"metadata":{"id":"ohyyEoCCCy7A","executionInfo":{"status":"ok","timestamp":1727113768402,"user_tz":300,"elapsed":319,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","social = pd.read_csv(curated + '00021_Social_Chicago.csv')\n","\n","social.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"UEWkf99u5gRO","executionInfo":{"status":"ok","timestamp":1727113769779,"user_tz":300,"elapsed":303,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"b2fa0cf8-3049-4bba-cf9e-1ec00745d9a5"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       GEOID10  Tot_cat_exceed  Tot_thresh_exceed  Acres35  Disadv  Disadv_area_pct  \\\n","0  17031842400             6.0                7.0     True    True            100.0   \n","1  17031840300             7.0               10.0     True    True            100.0   \n","2  17031841100             7.0               11.0     True    True            100.0   \n","3  17031841200             6.0                9.0     True    True            100.0   \n","4  17031839000             0.0                0.0     True   False              0.0   \n","\n","   Disadv_neigh_share  Disadv_without_neigh  Disadv_with_neigh_low_income  Disadv_tribal_overlap  \\\n","0                57.0                  True                         False                    NaN   \n","1                88.0                  True                         False                    NaN   \n","2                66.0                  True                         False                    NaN   \n","3               100.0                  True                          True                    NaN   \n","4                 0.0                 False                         False                    NaN   \n","\n","   Low_income  Income_neighbor  Adj_100pct_pov_pct  Adj_100pct_pov_pctile  House_100pct_pov  \\\n","0        True            False                23.0                   80.0              28.0   \n","1        True            False                19.0                   73.0              20.0   \n","2        True            False                30.0                   88.0              29.0   \n","3        True            False                17.0                   68.0              31.0   \n","4       False            False                18.0                   71.0              13.0   \n","\n","   House_gt90pct_100pct_pov_low_hs  House_gt90pct_100pct_pov_low_hs_island  Adj_200pct_pov_pct  \\\n","0                            False                                   False                0.32   \n","1                            False                                   False                0.32   \n","2                            False                                   False                0.43   \n","3                            False                                   False                0.31   \n","4                            False                                   False                0.02   \n","\n","   Adj_200pct_pov_line_pctile  House_income_pct_area  House_income_pct_area_pctile  \\\n","0                        0.67                   66.0                          80.0   \n","1                        0.68                   70.0                          76.0   \n","2                        0.82                   49.0                          92.0   \n","3                        0.65                   63.0                          82.0   \n","4                        0.09                  146.0                          12.0   \n","\n","   Pop_loss_rate_NHRI  Pop_loss_rate_90_pct  Pop_loss_gt90pct_low_income  Energy_burden  \\\n","0              0.0002                  54.0                        False            5.0   \n","1              0.0002                  54.0                        False            3.0   \n","2              0.0002                  55.0                        False            3.0   \n","3              0.0002                  54.0                        False            3.0   \n","4              0.0002                  55.0                        False            0.0   \n","\n","   Energy_burden_pct  Energy_burden_ge90pct_lowinc  LTHS_ge25_pct  LTHS_ge25_pctile  \\\n","0               88.0                         False           13.0              64.0   \n","1               54.0                         False           29.0              92.0   \n","2               57.0                         False           41.0              97.0   \n","3               52.0                         False           27.0              90.0   \n","4                0.0                         False            2.0               8.0   \n","\n","   Not_enrolled_highered_pct Hist_underinvest  Hist_underinvest_lowinc  Ling_isol_pct  \\\n","0                       93.0            False                    False            3.0   \n","1                       94.0             True                     True           20.0   \n","2                       94.0             True                     True           46.0   \n","3                       87.0             True                     True           17.0   \n","4                       75.0             True                    False            4.0   \n","\n","   Ling_isol_pctile  Ling_isol_gt90_low_hs  Unemploy_pct  Unemploy_pctile  \\\n","0              65.0                  False          16.0             96.0   \n","1              95.0                   True           6.0             71.0   \n","2              99.0                   True           6.0             65.0   \n","3              93.0                   True           6.0             65.0   \n","4              70.0                  False           5.0             63.0   \n","\n","   Unemploy_gt90pct_low_hs  Unemploy_ge90pct_low_hs_island  No_smartphone_pct  Disability_pct  \\\n","0                     True                           False               19.0            27.0   \n","1                    False                           False                8.0             6.0   \n","2                    False                           False               23.0            20.0   \n","3                    False                           False               11.0            11.0   \n","4                    False                           False                4.0             8.0   \n","\n","     GINI  LILATracts_1And10  LILATracts_halfAnd10  LILATracts_1And20  LILATracts_Vehicle  \\\n","0  0.4261                0.0              0.000000                0.0            0.000000   \n","1  0.4241                0.0              1.000000                0.0            0.000000   \n","2  0.4953                0.0              0.666667                0.0            0.666667   \n","3  0.3852                0.0              0.000000                0.0            0.000000   \n","4  0.4815                0.0              0.000000                0.0            0.000000   \n","\n","   HUNVFlag  Childcare_N  Incarceration_Rate_rP_gP_p25  VacantRate1000  CrimeRate1000  \\\n","0  0.000000          1.0                        0.0605        1.371742       1970.075   \n","1  0.000000          NaN                        0.0077       11.517199        370.280   \n","2  0.666667          4.0                        0.0099             NaN        363.600   \n","3  0.000000          NaN                        0.0224        2.082249        378.850   \n","4  0.000000          3.0                        0.0481             NaN        405.120   \n","\n","   ViolentRate1000  HomicideRate1000  preschN  ages_0_3_pct  ages_3_5_pct  quality_licensed_pct  \\\n","0          457.265             3.325      2.0           0.0         100.0                  50.0   \n","1           96.430             1.190      1.0           0.0         100.0                   0.0   \n","2           65.580             0.205      4.0          75.0         100.0                  50.0   \n","3          115.465             0.610      2.0           0.0         100.0                 100.0   \n","4           59.075             0.055      NaN           NaN           NaN                   NaN   \n","\n","   quality_gold_pct  quality_silver_pct  quality_bronze_pct  presch_cps_pct  presch_community_pct  \\\n","0              50.0                 0.0                 0.0           100.0                   0.0   \n","1               0.0               100.0                 0.0           100.0                   0.0   \n","2              50.0                 0.0                 0.0            25.0                  75.0   \n","3               0.0                 0.0                 0.0            50.0                  50.0   \n","4               NaN                 NaN                 NaN             NaN                   NaN   \n","\n","   presch_early_head_start_pct  presch_head_start_pct  presch_home_visits_pct  Accepts_CCAP_pct  \\\n","0                          0.0                    0.0                     0.0               0.0   \n","1                          0.0                  100.0                     0.0               0.0   \n","2                         25.0                   50.0                     0.0              50.0   \n","3                          0.0                   50.0                     0.0              50.0   \n","4                          NaN                    NaN                     NaN               NaN   \n","\n","   CommCtrCount  LibraryN  SnrCtrCount  WICCount  AvgFamily_case_management  \\\n","0           0.0       NaN          0.0       0.0                        NaN   \n","1           0.0       NaN          0.0       0.0                        NaN   \n","2           0.0       1.0          0.0       0.0                        NaN   \n","3           0.0       NaN          0.0       0.0                        NaN   \n","4           0.0       NaN          0.0       0.0                        NaN   \n","\n","   AvgHealthy_families_program  AvgPublic_health_nursing  AvgHealthy_start_program  \n","0                          NaN                       NaN                       NaN  \n","1                          NaN                       NaN                       NaN  \n","2                          NaN                       NaN                       NaN  \n","3                          NaN                       NaN                       NaN  \n","4                          NaN                       NaN                       NaN  "],"text/html":["\n","  <div id=\"df-de59aecf-b241-4910-ad58-ab49b33dd0d6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>GEOID10</th>\n","      <th>Tot_cat_exceed</th>\n","      <th>Tot_thresh_exceed</th>\n","      <th>Acres35</th>\n","      <th>Disadv</th>\n","      <th>Disadv_area_pct</th>\n","      <th>Disadv_neigh_share</th>\n","      <th>Disadv_without_neigh</th>\n","      <th>Disadv_with_neigh_low_income</th>\n","      <th>Disadv_tribal_overlap</th>\n","      <th>Low_income</th>\n","      <th>Income_neighbor</th>\n","      <th>Adj_100pct_pov_pct</th>\n","      <th>Adj_100pct_pov_pctile</th>\n","      <th>House_100pct_pov</th>\n","      <th>House_gt90pct_100pct_pov_low_hs</th>\n","      <th>House_gt90pct_100pct_pov_low_hs_island</th>\n","      <th>Adj_200pct_pov_pct</th>\n","      <th>Adj_200pct_pov_line_pctile</th>\n","      <th>House_income_pct_area</th>\n","      <th>House_income_pct_area_pctile</th>\n","      <th>Pop_loss_rate_NHRI</th>\n","      <th>Pop_loss_rate_90_pct</th>\n","      <th>Pop_loss_gt90pct_low_income</th>\n","      <th>Energy_burden</th>\n","      <th>Energy_burden_pct</th>\n","      <th>Energy_burden_ge90pct_lowinc</th>\n","      <th>LTHS_ge25_pct</th>\n","      <th>LTHS_ge25_pctile</th>\n","      <th>Not_enrolled_highered_pct</th>\n","      <th>Hist_underinvest</th>\n","      <th>Hist_underinvest_lowinc</th>\n","      <th>Ling_isol_pct</th>\n","      <th>Ling_isol_pctile</th>\n","      <th>Ling_isol_gt90_low_hs</th>\n","      <th>Unemploy_pct</th>\n","      <th>Unemploy_pctile</th>\n","      <th>Unemploy_gt90pct_low_hs</th>\n","      <th>Unemploy_ge90pct_low_hs_island</th>\n","      <th>No_smartphone_pct</th>\n","      <th>Disability_pct</th>\n","      <th>GINI</th>\n","      <th>LILATracts_1And10</th>\n","      <th>LILATracts_halfAnd10</th>\n","      <th>LILATracts_1And20</th>\n","      <th>LILATracts_Vehicle</th>\n","      <th>HUNVFlag</th>\n","      <th>Childcare_N</th>\n","      <th>Incarceration_Rate_rP_gP_p25</th>\n","      <th>VacantRate1000</th>\n","      <th>CrimeRate1000</th>\n","      <th>ViolentRate1000</th>\n","      <th>HomicideRate1000</th>\n","      <th>preschN</th>\n","      <th>ages_0_3_pct</th>\n","      <th>ages_3_5_pct</th>\n","      <th>quality_licensed_pct</th>\n","      <th>quality_gold_pct</th>\n","      <th>quality_silver_pct</th>\n","      <th>quality_bronze_pct</th>\n","      <th>presch_cps_pct</th>\n","      <th>presch_community_pct</th>\n","      <th>presch_early_head_start_pct</th>\n","      <th>presch_head_start_pct</th>\n","      <th>presch_home_visits_pct</th>\n","      <th>Accepts_CCAP_pct</th>\n","      <th>CommCtrCount</th>\n","      <th>LibraryN</th>\n","      <th>SnrCtrCount</th>\n","      <th>WICCount</th>\n","      <th>AvgFamily_case_management</th>\n","      <th>AvgHealthy_families_program</th>\n","      <th>AvgPublic_health_nursing</th>\n","      <th>AvgHealthy_start_program</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17031842400</td>\n","      <td>6.0</td>\n","      <td>7.0</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>100.0</td>\n","      <td>57.0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>NaN</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>23.0</td>\n","      <td>80.0</td>\n","      <td>28.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.32</td>\n","      <td>0.67</td>\n","      <td>66.0</td>\n","      <td>80.0</td>\n","      <td>0.0002</td>\n","      <td>54.0</td>\n","      <td>False</td>\n","      <td>5.0</td>\n","      <td>88.0</td>\n","      <td>False</td>\n","      <td>13.0</td>\n","      <td>64.0</td>\n","      <td>93.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>3.0</td>\n","      <td>65.0</td>\n","      <td>False</td>\n","      <td>16.0</td>\n","      <td>96.0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>19.0</td>\n","      <td>27.0</td>\n","      <td>0.4261</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.0</td>\n","      <td>0.0605</td>\n","      <td>1.371742</td>\n","      <td>1970.075</td>\n","      <td>457.265</td>\n","      <td>3.325</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>100.0</td>\n","      <td>50.0</td>\n","      <td>50.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>100.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>17031840300</td>\n","      <td>7.0</td>\n","      <td>10.0</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>100.0</td>\n","      <td>88.0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>NaN</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>19.0</td>\n","      <td>73.0</td>\n","      <td>20.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.32</td>\n","      <td>0.68</td>\n","      <td>70.0</td>\n","      <td>76.0</td>\n","      <td>0.0002</td>\n","      <td>54.0</td>\n","      <td>False</td>\n","      <td>3.0</td>\n","      <td>54.0</td>\n","      <td>False</td>\n","      <td>29.0</td>\n","      <td>92.0</td>\n","      <td>94.0</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>20.0</td>\n","      <td>95.0</td>\n","      <td>True</td>\n","      <td>6.0</td>\n","      <td>71.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>8.0</td>\n","      <td>6.0</td>\n","      <td>0.4241</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>0.0077</td>\n","      <td>11.517199</td>\n","      <td>370.280</td>\n","      <td>96.430</td>\n","      <td>1.190</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>100.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>100.0</td>\n","      <td>0.0</td>\n","      <td>100.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>100.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>17031841100</td>\n","      <td>7.0</td>\n","      <td>11.0</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>100.0</td>\n","      <td>66.0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>NaN</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>30.0</td>\n","      <td>88.0</td>\n","      <td>29.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.43</td>\n","      <td>0.82</td>\n","      <td>49.0</td>\n","      <td>92.0</td>\n","      <td>0.0002</td>\n","      <td>55.0</td>\n","      <td>False</td>\n","      <td>3.0</td>\n","      <td>57.0</td>\n","      <td>False</td>\n","      <td>41.0</td>\n","      <td>97.0</td>\n","      <td>94.0</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>46.0</td>\n","      <td>99.0</td>\n","      <td>True</td>\n","      <td>6.0</td>\n","      <td>65.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>23.0</td>\n","      <td>20.0</td>\n","      <td>0.4953</td>\n","      <td>0.0</td>\n","      <td>0.666667</td>\n","      <td>0.0</td>\n","      <td>0.666667</td>\n","      <td>0.666667</td>\n","      <td>4.0</td>\n","      <td>0.0099</td>\n","      <td>NaN</td>\n","      <td>363.600</td>\n","      <td>65.580</td>\n","      <td>0.205</td>\n","      <td>4.0</td>\n","      <td>75.0</td>\n","      <td>100.0</td>\n","      <td>50.0</td>\n","      <td>50.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>25.0</td>\n","      <td>75.0</td>\n","      <td>25.0</td>\n","      <td>50.0</td>\n","      <td>0.0</td>\n","      <td>50.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17031841200</td>\n","      <td>6.0</td>\n","      <td>9.0</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>100.0</td>\n","      <td>100.0</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>NaN</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>17.0</td>\n","      <td>68.0</td>\n","      <td>31.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.31</td>\n","      <td>0.65</td>\n","      <td>63.0</td>\n","      <td>82.0</td>\n","      <td>0.0002</td>\n","      <td>54.0</td>\n","      <td>False</td>\n","      <td>3.0</td>\n","      <td>52.0</td>\n","      <td>False</td>\n","      <td>27.0</td>\n","      <td>90.0</td>\n","      <td>87.0</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>17.0</td>\n","      <td>93.0</td>\n","      <td>True</td>\n","      <td>6.0</td>\n","      <td>65.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>0.3852</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>0.0224</td>\n","      <td>2.082249</td>\n","      <td>378.850</td>\n","      <td>115.465</td>\n","      <td>0.610</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>100.0</td>\n","      <td>100.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>50.0</td>\n","      <td>50.0</td>\n","      <td>0.0</td>\n","      <td>50.0</td>\n","      <td>0.0</td>\n","      <td>50.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17031839000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>NaN</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>18.0</td>\n","      <td>71.0</td>\n","      <td>13.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.02</td>\n","      <td>0.09</td>\n","      <td>146.0</td>\n","      <td>12.0</td>\n","      <td>0.0002</td>\n","      <td>55.0</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>False</td>\n","      <td>2.0</td>\n","      <td>8.0</td>\n","      <td>75.0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>4.0</td>\n","      <td>70.0</td>\n","      <td>False</td>\n","      <td>5.0</td>\n","      <td>63.0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>4.0</td>\n","      <td>8.0</td>\n","      <td>0.4815</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3.0</td>\n","      <td>0.0481</td>\n","      <td>NaN</td>\n","      <td>405.120</td>\n","      <td>59.075</td>\n","      <td>0.055</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de59aecf-b241-4910-ad58-ab49b33dd0d6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-de59aecf-b241-4910-ad58-ab49b33dd0d6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-de59aecf-b241-4910-ad58-ab49b33dd0d6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7891b698-b5ab-44b7-9841-50e1b81b8579\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7891b698-b5ab-44b7-9841-50e1b81b8579')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7891b698-b5ab-44b7-9841-50e1b81b8579 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"social"}},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["social.columns.to_list()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-PDHOAvz-YcN","executionInfo":{"status":"ok","timestamp":1727113771058,"user_tz":300,"elapsed":293,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"1b5de1a0-9b66-485f-c701-d382774a4fc6"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['GEOID10',\n"," 'Tot_cat_exceed',\n"," 'Tot_thresh_exceed',\n"," 'Acres35',\n"," 'Disadv',\n"," 'Disadv_area_pct',\n"," 'Disadv_neigh_share',\n"," 'Disadv_without_neigh',\n"," 'Disadv_with_neigh_low_income',\n"," 'Disadv_tribal_overlap',\n"," 'Low_income',\n"," 'Income_neighbor',\n"," 'Adj_100pct_pov_pct',\n"," 'Adj_100pct_pov_pctile',\n"," 'House_100pct_pov',\n"," 'House_gt90pct_100pct_pov_low_hs',\n"," 'House_gt90pct_100pct_pov_low_hs_island',\n"," 'Adj_200pct_pov_pct',\n"," 'Adj_200pct_pov_line_pctile',\n"," 'House_income_pct_area',\n"," 'House_income_pct_area_pctile',\n"," 'Pop_loss_rate_NHRI',\n"," 'Pop_loss_rate_90_pct',\n"," 'Pop_loss_gt90pct_low_income',\n"," 'Energy_burden',\n"," 'Energy_burden_pct',\n"," 'Energy_burden_ge90pct_lowinc',\n"," 'LTHS_ge25_pct',\n"," 'LTHS_ge25_pctile',\n"," 'Not_enrolled_highered_pct',\n"," 'Hist_underinvest',\n"," 'Hist_underinvest_lowinc',\n"," 'Ling_isol_pct',\n"," 'Ling_isol_pctile',\n"," 'Ling_isol_gt90_low_hs',\n"," 'Unemploy_pct',\n"," 'Unemploy_pctile',\n"," 'Unemploy_gt90pct_low_hs',\n"," 'Unemploy_ge90pct_low_hs_island',\n"," 'No_smartphone_pct',\n"," 'Disability_pct',\n"," 'GINI',\n"," 'LILATracts_1And10',\n"," 'LILATracts_halfAnd10',\n"," 'LILATracts_1And20',\n"," 'LILATracts_Vehicle',\n"," 'HUNVFlag',\n"," 'Childcare_N',\n"," 'Incarceration_Rate_rP_gP_p25',\n"," 'VacantRate1000',\n"," 'CrimeRate1000',\n"," 'ViolentRate1000',\n"," 'HomicideRate1000',\n"," 'preschN',\n"," 'ages_0_3_pct',\n"," 'ages_3_5_pct',\n"," 'quality_licensed_pct',\n"," 'quality_gold_pct',\n"," 'quality_silver_pct',\n"," 'quality_bronze_pct',\n"," 'presch_cps_pct',\n"," 'presch_community_pct',\n"," 'presch_early_head_start_pct',\n"," 'presch_head_start_pct',\n"," 'presch_home_visits_pct',\n"," 'Accepts_CCAP_pct',\n"," 'CommCtrCount',\n"," 'LibraryN',\n"," 'SnrCtrCount',\n"," 'WICCount',\n"," 'AvgFamily_case_management',\n"," 'AvgHealthy_families_program',\n"," 'AvgPublic_health_nursing',\n"," 'AvgHealthy_start_program']"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["social.drop(columns=[], inplace=True)"],"metadata":{"id":"qDF62kYuivC0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["social.columns.to_list()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L2bX01DHh5iU","executionInfo":{"status":"ok","timestamp":1726854560318,"user_tz":300,"elapsed":218,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"583be717-0c84-4846-cf53-fed068094397"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['GEOID10',\n"," 'Tot_cat_exceed',\n"," 'Tot_thresh_exceed',\n"," 'Acres35',\n"," 'Disadv',\n"," 'Disadv_area_pct',\n"," 'Disadv_neigh_share',\n"," 'Disadv_without_neigh',\n"," 'Disadv_with_neigh_low_income',\n"," 'Disadv_tribal_overlap',\n"," 'Low_income',\n"," 'Adj_100pct_pov_pct',\n"," 'Adj_100pct_pov_pctile',\n"," 'House_100pct_pov',\n"," 'House_gt90pct_100pct_pov_low_hs',\n"," 'Adj_200pct_pov_pct',\n"," 'Adj_200pct_pov_line_pctile',\n"," 'House_income_pct_area',\n"," 'House_income_pct_area_pctile',\n"," 'Pop_loss_rate_90_pct',\n"," 'Energy_burden',\n"," 'Energy_burden_pct',\n"," 'Energy_burden_ge90pct_lowinc',\n"," 'LTHS_ge25_pct',\n"," 'LTHS_ge25_pctile',\n"," 'Not_enrolled_highered_pct',\n"," 'Hist_underinvest',\n"," 'Hist_underinvest_lowinc',\n"," 'Ling_isol_pct',\n"," 'Ling_isol_pctile',\n"," 'Ling_isol_gt90_low_hs',\n"," 'Unemploy_pct',\n"," 'Unemploy_pctile',\n"," 'Unemploy_gt90pct_low_hs',\n"," 'No_smartphone_pct',\n"," 'Disability_pct',\n"," 'GINI',\n"," 'LILATracts_1And10',\n"," 'LILATracts_halfAnd10',\n"," 'LILATracts_1And20',\n"," 'LILATracts_Vehicle',\n"," 'HUNVFlag',\n"," 'Childcare_N',\n"," 'Incarceration_Rate_rP_gP_p25',\n"," 'VacantRate1000',\n"," 'CrimeRate1000',\n"," 'ViolentRate1000',\n"," 'HomicideRate1000',\n"," 'preschN',\n"," 'ages_0_3_pct',\n"," 'ages_3_5_pct',\n"," 'quality_licensed_pct',\n"," 'quality_gold_pct',\n"," 'quality_silver_pct',\n"," 'quality_bronze_pct',\n"," 'presch_cps_pct',\n"," 'presch_community_pct',\n"," 'presch_early_head_start_pct',\n"," 'presch_head_start_pct',\n"," 'presch_home_visits_pct',\n"," 'Accepts_CCAP_pct',\n"," 'CommCtrCount',\n"," 'SnrCtrCount',\n"," 'WICCount',\n"," 'AvgFamily_case_management',\n"," 'AvgHealthy_families_program',\n"," 'AvgPublic_health_nursing',\n"," 'AvgHealthy_start_program']"]},"metadata":{},"execution_count":13}]}]}