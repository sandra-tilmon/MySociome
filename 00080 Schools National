{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"collapsed_sections":["E3KVcRb4mrp_"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# National public schools analytic file\n","## Sandra Tilmon\n","## 9/20/2023\n","\n","\n","#### Change log:\n","Date        Change"],"metadata":{"id":"Rynj1MbDGPuZ"}},{"cell_type":"markdown","source":["# Setup"],"metadata":{"id":"wup_QgEwHurD"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","import geopandas as gpd\n","from shapely.geometry import shape\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","import json\n","import os\n","import requests\n","\n","pd.set_option('display.max_rows', 50)\n","pd.set_option('display.max_columns', None)"],"metadata":{"id":"LsOUrBy9HvjR","executionInfo":{"status":"ok","timestamp":1727192723740,"user_tz":300,"elapsed":1673,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# Mount drive\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r7bs2x6ia-WB","executionInfo":{"status":"ok","timestamp":1727192747161,"user_tz":300,"elapsed":23422,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"399fd612-9745-4d48-9557-0dfc8a44cf93"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["# Raw data sources\n","dir = '/content/gdrive/My Drive/Sociome_Folder/Data/'\n","\n","# Output curated datasets\n","curated = '/content/gdrive/My Drive/Sociome_Folder/Data Commons/Curated datasets/'"],"metadata":{"id":"g2dR5_V6a-Zi","executionInfo":{"status":"ok","timestamp":1727192747161,"user_tz":300,"elapsed":3,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["frames = []"],"metadata":{"id":"6Sj7ZBT-G1KX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# GIS"],"metadata":{"id":"dwcpihj1-8tx"}},{"cell_type":"markdown","source":["## Set CRS\n","\n","North America https://epsg.io/?q=North%20America%20%20kind%3APROJCRS"],"metadata":{"id":"apVDzWfwooMq"}},{"cell_type":"code","source":["crs = {'init' :'epsg:4269'}"],"metadata":{"id":"bc3sjS92olH3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Census tracts"],"metadata":{"id":"eGdJiQrW_pBN"}},{"cell_type":"code","source":["# Census tracts\n","\n","tracts_shp = gpd.read_file(dir + \"Census Data/2010 census tracts/national_census.shp\")\n","\n","tracts_shp = gpd.GeoDataFrame(tracts_shp).set_geometry('geometry', crs=crs)\n","\n","tracts_shp = tracts_shp.drop(columns=['TRACTCE10',\t'STATEFP10', 'COUNTYFP10',\n","                                      'ALAND10', 'AWATER10',\n","                                      'INTPTLAT10', 'INTPTLON10', 'NAME10', 'NAMELSAD10', 'MTFCC10', 'FUNCSTAT10']\n","                             )"],"metadata":{"id":"IqMm4AQB-_gJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tracts = pd.read_csv(dir + \"Census Data/2010 census tracts/national_census.csv\")\n","tracts.drop(columns=['Unnamed: 0', 'STATEFP10', 'COUNTYFP10', 'ALAND10','AWATER10',\n","                     'INTPTLAT10','INTPTLON10', 'geometry'], inplace=True)\n","\n","frames.append('tracts')"],"metadata":{"id":"r5PjO3dkRVLz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Functions"],"metadata":{"id":"E3KVcRb4mrp_"}},{"cell_type":"code","source":["# Lat/long coordinates to census tract\n","\n","def LatLongTract(infile, lat, long):\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)\n","\n","\n","\n","# One line street address to lat/long coordinates and census tract\n","\n","def AddLatLongTract(infile):\n","\n","  # Create \"oneline\" address in cleaning \"123 N Main Street Chicago, IL 60000\"\n","  # Field names vary so not bothering to include here\n","\n","  g = geocoders.GoogleV3(api_key='')\n","\n","  def Gv3_latlong (address):\n","      location = g.geocode(address)\n","      lat = location.latitude\n","      long = location.longitude\n","      # Perform additional steps to obtain census tract from coordinates\n","      # census_tract = get_census_tract_from_coordinates(latitude, longitude)\n","      return lat, long, location\n","\n","  infile[['lat', 'long', 'Location']] = infile['oneline'].apply(Gv3_latlong).apply(pd.Series)\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID10 to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)"],"metadata":{"id":"E2G9ttQymsY_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# HUD school proficiency index"],"metadata":{"id":"pircXjGQ2LAY"}},{"cell_type":"code","source":["profic = pd.read_csv(dir + 'HUD/School proficiency index/School_Proficiency_Index.csv')\n","profic['GEOID10'] = profic['GEOID'].astype(str).str[:11].astype(int)"],"metadata":{"id":"gVYmTsTL2NCS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Aggregate by tract"],"metadata":{"id":"lunJvcHrGkQQ"}},{"cell_type":"code","source":["proficTract = profic.groupby('GEOID10')['SCHL_IDX'].mean().reset_index()"],"metadata":{"id":"EATUapyD4bpz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Export and reload final analytic file"],"metadata":{"id":"ymN9CBeZLfEn"}},{"cell_type":"code","source":["# Save\n","\n","with open(curated + \"00080_Schools_national.csv\", 'w') as f:\n"," proficTract.to_csv(f)"],"metadata":{"id":"0a4RFgGRLejG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","schools = pd.read_csv(curated + '00080_Schools_national.csv')\n","schools.drop(columns=[\"Unnamed: 0\"], inplace=True)\n","schools.head()"],"metadata":{"id":"e-W3T5AqQE56","executionInfo":{"status":"ok","timestamp":1727192782041,"user_tz":300,"elapsed":1410,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"9e9de539-b8c3-4d24-f078-2773711e771f"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       GEOID10  SCHL_IDX\n","0  10010201001      71.0\n","1  10010201002      71.0\n","2  10010202001      71.0\n","3  10010202002      71.0\n","4  10010203001      71.0"],"text/html":["\n","  <div id=\"df-fb33a255-fde8-41ab-b398-0b82df5b8fbe\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>GEOID10</th>\n","      <th>SCHL_IDX</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10010201001</td>\n","      <td>71.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10010201002</td>\n","      <td>71.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10010202001</td>\n","      <td>71.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10010202002</td>\n","      <td>71.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10010203001</td>\n","      <td>71.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb33a255-fde8-41ab-b398-0b82df5b8fbe')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fb33a255-fde8-41ab-b398-0b82df5b8fbe button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fb33a255-fde8-41ab-b398-0b82df5b8fbe');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-35e25157-84d3-406a-bc9c-8d87bd0c1577\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-35e25157-84d3-406a-bc9c-8d87bd0c1577')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-35e25157-84d3-406a-bc9c-8d87bd0c1577 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"schools","summary":"{\n  \"name\": \"schools\",\n  \"rows\": 96835,\n  \"fields\": [\n    {\n      \"column\": \"GEOID10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19447920724,\n        \"min\": 10010201001,\n        \"max\": 90159081002,\n        \"num_unique_values\": 96835,\n        \"samples\": [\n          60730091022,\n          60710008132,\n          21085950100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCHL_IDX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.99019153601388,\n        \"min\": 0.0,\n        \"max\": 99.0,\n        \"num_unique_values\": 1364,\n        \"samples\": [\n          16.8,\n          1.25,\n          59.285714285714285\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["# Data check"],"metadata":{"id":"7S_2OsKHlZ7Q"}},{"cell_type":"markdown","source":["## Identify constants"],"metadata":{"id":"v-zeLPj7leiz"}},{"cell_type":"code","source":["constant_columns = [col for col in schools.columns if schools[col].nunique() == 1]\n","\n","constant_columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vi5LTv79lgK8","executionInfo":{"status":"ok","timestamp":1725021156844,"user_tz":300,"elapsed":3,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"e84e47af-f556-49d9-8779-4ec08f83bc8c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[]"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["## Identify duplicated information across variables"],"metadata":{"id":"MFqhwB1Algqx"}},{"cell_type":"code","source":["from itertools import combinations\n","\n","# Get all pairs of columns\n","column_pairs = combinations(schools.columns, 2)\n","\n","# Find pairs of columns that are identical\n","identical_pairs = [(col1, col2) for col1, col2 in column_pairs if schools[col1].equals(schools[col2])]\n","\n","# Display the identical pairs\n","identical_pairs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LTH9tFUmljvV","executionInfo":{"status":"ok","timestamp":1725021162209,"user_tz":300,"elapsed":153,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"24af4267-9fd4-479f-87cd-e8bb1b71ef1a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[]"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["## Duplicated tract rows?"],"metadata":{"id":"IsXucqx2PDTd"}},{"cell_type":"code","source":["len(schools['GEOID10'])-len(schools['GEOID10'].drop_duplicates())"],"metadata":{"id":"_snV4IEcPGkh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725021166636,"user_tz":300,"elapsed":147,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"73f52d58-e692-4a13-f614-e4f9e8a1cd32"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":13}]}]}