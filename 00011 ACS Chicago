{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# American Community Survey\n","## Sandra Tilmon\n","## 8/22/2022\n","\n","\n","#### Change log:\n","Date        Change\n"],"metadata":{"id":"GUZfQbsoQH-Y"}},{"cell_type":"markdown","source":["# Setup"],"metadata":{"id":"yiWW2iv3QW-K"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Utilities\n","import math\n","import os\n","import re\n","import requests\n","from timeit import default_timer as timer\n","\n","# Viz\n","import matplotlib\n","import matplotlib.pyplot as plt\n","\n","# GIS\n","import geopandas as gpd\n","from shapely import geometry\n","from shapely.geometry import Point, shape\n","\n","pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)\n","pd.set_option('display.width', None)\n","\n","%matplotlib inline"],"metadata":{"id":"4Tq7gpEVQaPr"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XlLhWh5HPpOf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726072654882,"user_tz":300,"elapsed":932,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"144b5db3-6146-4286-b0e7-4215279c5213"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}],"source":["# Mount drive\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"]},{"cell_type":"code","source":["# Raw data sources\n","dir = '/content/gdrive/My Drive/Sociome_Folder/Data/'\n","\n","# Output curated datasets\n","curated = '/content/gdrive/My Drive/Sociome_Folder/Data Commons/Curated datasets/'"],"metadata":{"id":"cRe762enQa9v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# GIS"],"metadata":{"id":"g3PjLIeiqD7l"}},{"cell_type":"markdown","source":["## Set CRS"],"metadata":{"id":"_ym6WDeAqFqb"}},{"cell_type":"code","source":["crs = {'init' :'epsg:3435'}"],"metadata":{"id":"IKH5x5SxqErM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Chicago data portal census tracts"],"metadata":{"id":"8oLjHlV7qSzF"}},{"cell_type":"code","source":["# Census tracts\n","\n","r = requests.get(\"https://data.cityofchicago.org/resource/74p9-q2aq.json\")\n","r.raise_for_status()\n","\n","data = r.json()\n","for d in data:\n","    d['the_geom'] = shape(d['the_geom'])\n","\n","tracts_shp = gpd.GeoDataFrame(data).set_geometry('the_geom', crs=crs)\n","\n","tracts_shp = tracts_shp.drop(columns=['statefp10', 'countyfp10', 'tractce10',\t'name10', 'namelsad10',\n","                                      'notes', 'commarea_n'])\n","\n","tracts_shp.rename(columns={'geoid10' : 'GEOID10'}, inplace=True)\n","\n","tracts_shp['GEOID10'] = pd.to_numeric(tracts_shp['GEOID10'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jove45I_qE7-","executionInfo":{"status":"ok","timestamp":1726072663173,"user_tz":300,"elapsed":3509,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"ce5d27fd-547e-4e8a-b549-b5bcb854275c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}]},{"cell_type":"code","source":["tractsdf = pd.DataFrame(tracts_shp)\n","# tractsdf.drop(columns=['the_geom'], inplace=True)\n","tractsdf = tractsdf.rename(columns={'geoid10':'GEOID10'})"],"metadata":{"id":"N4WgADFhQUaW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Import national datasets"],"metadata":{"id":"KVLHheuVwx9F"}},{"cell_type":"code","source":["acs1019 = pd.read_csv(curated + '00010_acs1019_National.csv')\n","acs1019.drop(columns=['Tract'], inplace=True)\n","# Drop columns that contain \"Unnamed\" or \"level\"\n","acs1019 = acs1019.loc[:, ~acs1019.columns.str.contains('Unnamed|level', case=False, regex=True)]\n","\n","acs1014 = pd.read_csv(curated + '00010_acs1014_National.csv')\n","acs1014.drop(columns=['Tract'], inplace=True)\n","# Drop columns that contain \"Unnamed\" or \"level\"\n","acs1014 = acs1014.loc[:, ~acs1014.columns.str.contains('Unnamed|level', case=False, regex=True)]\n","# Place GEOID10 in the first column and Years in the second column\n","acs1014 = acs1014[['GEOID10', 'Years'] + [col for col in acs1014.columns if col not in ['GEOID10', 'Years']]]\n","\n","acs1519 = pd.read_csv(curated + '00010_acs1519_National.csv')\n","acs1519.drop(columns=['Tract'], inplace=True)\n","# Drop columns that contain \"Unnamed\" or \"level\"\n","acs1519 = acs1519.loc[:, ~acs1519.columns.str.contains('Unnamed|level', case=False, regex=True)]\n","# Place GEOID10 in the first column and Years in the second column\n","acs1519 = acs1519[['GEOID10', 'Years'] + [col for col in acs1519.columns if col not in ['GEOID10', 'Years']]]"],"metadata":{"id":"jZr3l0-_w2kb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Limit to Chicago census tracts"],"metadata":{"id":"CXkjKB21fJuh"}},{"cell_type":"code","source":["# Merge to Chicago census tracts\n","\n","# 2010-2019 with poverty PCA\n","acs1019['GEOID10'] = pd.to_numeric(acs1019['GEOID10'])\n","acs1019_shp = pd.merge(tractsdf, acs1019, on='GEOID10', how = 'left')\n","\n","# 2010-2019\n","acs1019['GEOID10'] = pd.to_numeric(acs1019['GEOID10'])\n","acs1019_shp = pd.merge(tractsdf, acs1019, on='GEOID10', how = 'left')\n","\n","# 2010-2014\n","acs1014['GEOID10'] = pd.to_numeric(acs1014['GEOID10'])\n","acs1014_shp = pd.merge(tractsdf, acs1014, on='GEOID10', how = 'left')\n","\n","# 2015-2019\n","acs1519['GEOID10'] = pd.to_numeric(acs1519['GEOID10'])\n","acs1519_shp = pd.merge(tractsdf, acs1019, on='GEOID10', how = 'left')"],"metadata":{"id":"enZV5HVmwxIH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Export non-PCA as csv to drive"],"metadata":{"id":"hDzXCaMTLsMw"}},{"cell_type":"code","source":["# Write the DataFrame to CSV file.\n","\n","with open(curated + '00011_acs1019_Chicago.csv', 'w') as f:\n","  acs1019.to_csv(f)\n","\n","# 10-14\n","with open(curated + '00011_acs1014_Chicago.csv', 'w') as f:\n","  acs1014.to_csv(f)\n","\n","# 15-19\n","with open(curated + '00011_acs1519_Chicago.csv', 'w') as f:\n","  acs1519.to_csv(f)"],"metadata":{"id":"YlAmBqXTLKrb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Poverty PCA for Cook County"],"metadata":{"id":"VmCLwUOaytIi"}},{"cell_type":"markdown","source":["### 2010-2019"],"metadata":{"id":"xOmhAfPLaQXu"}},{"cell_type":"code","source":["pd.set_option('display.precision', 2)"],"metadata":{"id":"9WkOsIYm3Bms"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# only relative fields\n","agg1019 = acs1019.filter(regex=r'^(GEOID10|Years|pct|avg|median|Med)')\n","\n","# Rename national poverty PCA as national\n","agg1019 = agg1019.rename(columns={'PCA1' : 'PCA1_natl'})\n","\n","# Drop all age5p columns\n","agg1019 = agg1019[agg1019.columns.drop(list(agg1019.filter(regex='Age5p')))]\n","\n","# Drop race variables\n","agg1019 = agg1019.drop(columns=[\"pct_NH_Blk_alone_ACS\", \"pct_NH_White_alone_ACS\", \"pct_Hispanic_ACS\",\n","                                'pct_NH_AIAN_alone_ACS', 'pct_NH_Asian_alone_ACS', 'pct_NH_NHOPI_alone_ACS',\n","                                'pct_NH_SOR_alone_ACS'])\n","\n","agg1019 = agg1019.set_index(['GEOID10', 'Years'])"],"metadata":{"id":"3fimkTCaqX2l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["thresh = 0.5  # correlation threshold\n","\n","# Pearson (linear)\n","pov_pear = []\n","corr_lin = agg1019.corr(method='pearson')\n","# Iterate over the columns in the correlation matrix\n","for column in corr_lin.columns:\n","    # Exclude the single variable from the comparison\n","    if column != 'single_variable':\n","        # Check if the correlation exceeds the threshold\n","        if abs(corr_lin[column]['pct_Prs_Blw_Pov_Lev_ACS']) >= thresh:\n","            pov_pear.append(column)\n","\n","\n","# Spearman (monotonic)\n","pov_spear = []\n","corr_mono = agg1019.corr(method='spearman')\n","# Iterate over the columns in the correlation matrix\n","for column in corr_mono.columns:\n","    # Exclude the single variable from the comparison\n","    if column != 'single_variable':\n","        # Check if the correlation exceeds the threshold\n","        if abs(corr_mono[column]['pct_Prs_Blw_Pov_Lev_ACS']) >= thresh:\n","            pov_spear.append(column)\n","\n","pov_corr = list(set(pov_pear + pov_spear))\n","\n","# Reorder\n","pov_corr.remove(\"pct_Prs_Blw_Pov_Lev_ACS\")\n","pov_corr.insert(0, \"pct_Prs_Blw_Pov_Lev_ACS\")"],"metadata":{"id":"3sWNFx0ckgFv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pov = agg1019[pov_corr]\n","\n","pov = pov.fillna(pov.mean())\n","\n","pov[pov_corr] = pov[pov_corr].apply(pd.to_numeric, errors='coerce')"],"metadata":{"id":"3JkdBPHcixqH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Standardize data\n","\n","from sklearn.preprocessing import StandardScaler\n","\n","# Standardize data\n","stscaler = StandardScaler().fit(pov)\n","scaled = pd.DataFrame(stscaler.transform(pov))\n","\n","povcols = pov.columns.values.tolist()\n","\n","scaled.columns = povcols\n","\n","pd.set_option('display.precision', 2)"],"metadata":{"id":"6J1NKBWTac5W"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## PCA"],"metadata":{"id":"GACH7ZeH1FV1"}},{"cell_type":"code","source":["# Plotting PCA variance\n","import matplotlib.pyplot as plt\n","\n","from sklearn.decomposition import PCA\n","\n","# Create a PCA instance\n","pca = PCA(n_components=11)"],"metadata":{"id":"I2wy-Hl7xska"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pca_ = PCA().fit(scaled)\n","X_pca = PCA().fit_transform(scaled)\n","\n","# Get cumulative explained variance for each dimension\n","pca_evr = pca_.explained_variance_ratio_\n","cumsum_ = np.cumsum(pca_evr)\n","\n","# Get dimensions where var >= 95% and values for variance at 2D, 3D\n","dim_95 = np.argmax(cumsum_ >= 0.95) + 1\n","oneDim = np.round(cumsum_[0], decimals=3)*100\n","twoDim = np.round(cumsum_[1], decimals=3)*100\n","threeDim = np.round(cumsum_[2], decimals=3)*100\n","\n","print(dim_95) # 7 dim to get to 95%\n","print(oneDim)# 51.8\n","print(twoDim)# 68.6\n","print(threeDim) #79.8"],"metadata":{"id":"D1VPHB6h2U0Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726078407810,"user_tz":300,"elapsed":1402,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"67f09dd5-7427-409b-9949-68e9d8889df2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["7\n","51.800000000000004\n","68.60000000000001\n","79.80000000000001\n"]}]},{"cell_type":"markdown","source":["print(dim_95) # 7 dim to get to 95%\n","print(oneDim)# 51.8\n","print(twoDim)# 68.6\n","print(threeDim) #79.8"],"metadata":{"id":"qa5Df3OJwLxf"}},{"cell_type":"markdown","source":["#### 1 component for explainability"],"metadata":{"id":"a8BFcUKfUwgk"}},{"cell_type":"code","source":["from sklearn.decomposition import PCA\n","\n","model=PCA(n_components=1)\n","\n","model.fit(scaled)\n","\n","transformed = model.transform(scaled)\n","\n","print (transformed.shape)\n","\n","pca_features = model.fit_transform(scaled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q2Gcg5MdU2Ei","executionInfo":{"status":"ok","timestamp":1726078446278,"user_tz":300,"elapsed":1158,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"d8f764b9-b610-4472-c8ed-a60a882b7ee9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(148048, 1)\n"]}]},{"cell_type":"markdown","source":["## Merge back"],"metadata":{"id":"xbPhV3EdhUE2"}},{"cell_type":"code","source":["# concatenate PCA component with public variables\n","\n","df = pd.DataFrame({'PCA1_Chicago': transformed[:, 0]})\n","\n","df2 = acs1019.reset_index()\n","\n","acs1019_PCA = pd.concat([df2, df], axis=1)"],"metadata":{"id":"o6_-pCNi5wkW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["acs1019_povPCA = acs1019_PCA.drop(columns=povcols)\n","acs1019_povPCA = acs1019_povPCA.drop(columns=\"index\")"],"metadata":{"id":"_n6fKEByt3Nn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Export as csv to drive\n","\n"],"metadata":{"id":"lCqk_T9rubzI"}},{"cell_type":"code","source":["# Write the DataFrame to CSV file.\n","\n","# 1 component only, remove poverty variables\n","with open(curated + '00010_acs1019_PovPCA_Chicago.csv', 'w') as f:\n","  acs1019_povPCA.to_csv(f)\n","\n","  # 1 component only\n","with open(curated + '00010_acs1019_Chicago.csv', 'w') as f:\n","  acs1019_PCA.to_csv(f)"],"metadata":{"id":"VnllL37iubB4"},"execution_count":null,"outputs":[]}]}