{"cells":[{"cell_type":"markdown","metadata":{"id":"GUZfQbsoQH-Y"},"source":["# Making national public environment/pollution file\n","## Sandra Tilmon\n","## 4/10/2023\n","\n","\n","#### Change log:\n","\n","Date        Change\n","\n","\n","**Future work **\n","\n","\n","* https://www.nhgis.org/environmental-summaries\n","\n","* https://www.arcgis.com/home/item.html?id=3ccf118ed80748909eb85c6d262b426f\n","\n","* https://www.mrlc.gov/data?f%5B0%5D=category%3ALand%20Cover\n","\n","* https://www.noaa.gov/\n","\n","* https://cemhs.asu.edu/sheldus\n","\n","* https://www.usace.army.mil/\n","\n","* https://www.usgs.gov/products/data/all-data\n","\n","* https://www.mesa-nhlbi.org/\n","\n","* https://deohs.washington.edu/mesaair\n","\n","* https://openaq.org/\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"yiWW2iv3QW-K"},"source":["# Setup"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"4Tq7gpEVQaPr","executionInfo":{"status":"ok","timestamp":1727815692978,"user_tz":300,"elapsed":4957,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","\n","import datetime\n","import math\n","\n","import os\n","import re\n","from functools import reduce\n","\n","import ast\n","import json\n","import requests\n","\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import geopandas as gpd\n","from shapely import geometry\n","from shapely.geometry import Point, shape\n","from geopy import geocoders\n","from geopy.geocoders import GoogleV3\n","\n","from timeit import default_timer as timer\n","\n","pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)\n","pd.set_option('display.width', None)\n","pd.set_option('display.max_colwidth', None)\n","\n","pd.options.display.float_format = '{:.2f}'.format\n","\n","%matplotlib inline"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"XlLhWh5HPpOf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727815718109,"user_tz":300,"elapsed":25133,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"8e68e3b9-83ad-4207-9014-466b641b1010"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["# Mount drive\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"cRe762enQa9v","executionInfo":{"status":"ok","timestamp":1727815718109,"user_tz":300,"elapsed":2,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Raw data sources\n","dir = '/content/gdrive/My Drive/Sociome_Folder/Data/'\n","\n","# Output curated datasets\n","curated = '/content/gdrive/My Drive/Sociome_Folder/Data Commons/Curated datasets/'"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"0n8BLrA2OJkk","executionInfo":{"status":"ok","timestamp":1727815718109,"user_tz":300,"elapsed":2,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Empty list for dataframes later\n","\n","frames = []"]},{"cell_type":"markdown","metadata":{"id":"P6lswaJDh8w4"},"source":["# GIS"]},{"cell_type":"markdown","metadata":{"id":"Ihydkv9NnAnv"},"source":["## Set CRS\n","\n","North America https://epsg.io/?q=North%20America%20%20kind%3APROJCRS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"odMMv2GInCA5"},"outputs":[],"source":["crs = {'init' :'epsg:4269'}"]},{"cell_type":"markdown","metadata":{"id":"xeqcgHnfd4-x"},"source":["## Import census tracts\n","\n","https://catalog.data.gov/dataset/tiger-line-shapefile-2017-2010-nation-u-s-2010-census-urban-area-national"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QgwntmBlemdZ","executionInfo":{"status":"ok","timestamp":1724862912370,"user_tz":300,"elapsed":131974,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"c4ff1bf7-ea14-4bcc-dbe9-f9991df33f28"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}],"source":["# # Census tracts - shapefile\n","\n","tracts_shp = gpd.read_file(dir + \"Census Data/2010 census tracts/national_census.shp\")\n","\n","tracts_shp = gpd.GeoDataFrame(tracts_shp).set_geometry('geometry', crs=crs)\n","\n","tracts_shp = tracts_shp.drop(columns=['TRACTCE10', 'NAME10', 'NAMELSAD10',\t'MTFCC10', 'FUNCSTAT10'])"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"tnVIDiv0m7z6","executionInfo":{"status":"ok","timestamp":1727815759828,"user_tz":300,"elapsed":41721,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Import tract dataframe (not shapefile)\n","\n","tracts = pd.read_csv(dir + \"Census Data/2010 census tracts/national_census.csv\")\n","tracts.drop(columns=['Unnamed: 0', 'STATEFP10', 'COUNTYFP10', 'ALAND10','AWATER10',\n","                     'INTPTLAT10','INTPTLON10', 'geometry'], inplace=True)\n","\n","frames.append('tracts')"]},{"cell_type":"markdown","metadata":{"id":"qShwotrtnI7O"},"source":["## Functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nYgeZb_Oad5H"},"outputs":[],"source":["# Lat/long coordinates to census tract\n","\n","def LatLongTract(infile, lat, long):\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile[long], infile[lat])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)\n","\n","\n","# One line street address to lat/long coordinates and census tract\n","\n","def AddLatLongTract(infile):\n","\n","  # Create \"oneline\" address in cleaning \"123 N Main Street Chicago, IL 60000\"\n","  # Field names vary so not bothering to include here\n","\n","  g = geocoders.GoogleV3(api_key='')\n","\n","  def Gv3_latlong(address):\n","    location = g.geocode(address)\n","\n","    if location is not None:\n","        lat = location.latitude\n","        long = location.longitude\n","        # Perform additional steps to obtain census tract from coordinates\n","        # census_tract = get_census_tract_from_coordinates(latitude, longitude)\n","        return lat, long, location\n","    else:\n","        print(\"Unable to geocode the address:\", address)\n","        return None  # or handle the case when location is None in an appropriate way\n","\n","  infile[['lat', 'long', 'Location']] = infile['oneline'].apply(Gv3_latlong).apply(pd.Series)\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID10 to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)"]},{"cell_type":"markdown","metadata":{"id":"7-ghlQqVzNHt"},"source":["# American community survey for denominators"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":8069,"status":"ok","timestamp":1727105958836,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"},"user_tz":300},"id":"YU5LPc_wnLPo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d1440606-78fc-49b0-bdaf-41466364d78c"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-6a91168dee30>:1: DtypeWarning: Columns (286) have mixed types. Specify dtype option on import or set low_memory=False.\n","  acs1519 = pd.read_csv(dir + \"Census Data/ACS/2021 Planning Database/pdb2021trv3_us.csv\", encoding='latin-1')\n"]}],"source":["acs1519 = pd.read_csv(dir + \"Census Data/ACS/2021 Planning Database/pdb2021trv3_us.csv\", encoding='latin-1')\n","acs1519 = acs1519.rename(columns={'GIDTR':'GEOID10'})\n","\n","# Remove suffix\n","acs1519 = acs1519.rename(columns=lambda x: re.sub('_15_19$','',x))\n","\n","# Drop all margin of error (MOE) columns\n","acs1519 = acs1519[acs1519.columns.drop(list(acs1519.filter(regex='MOE')))]\n","\n","# Drop census estimates (CEN) but keep ACS\n","acs1519 = acs1519[acs1519.columns.drop(list(acs1519.filter(regex='CEN')))]\n","\n","# Collect all total, denominator, and relative columns (i.e., remove raw counts)\n","cols1519 = acs1519.filter(regex=\"GEOID10|^LAND|^Tot\").columns.values.tolist()\n","\n","acs1519 = acs1519[cols1519]"]},{"cell_type":"markdown","metadata":{"id":"TxFBUwWvbL25"},"source":["# CACES air pollution\n","\n","https://www.caces.us/data\n","\n","\"These data are free and publicly available for non-commercial purposes, data may not be used for commercial purposes without prior written permission.\""]},{"cell_type":"markdown","metadata":{"id":"rMIkfiHxnp9J"},"source":["## Air pollution: LUR models\n","\n","**CACES Land Use Regression (LUR)**\n","\n","\n","Land Use Regression (LUR)\n","These models provide estimates of outdoor concentrations for six criteria pollutants (four gases: O3, CO, SO2, NO2; two aerosols: PM10, PM2.5) throughout the contiguous U.S.; estimates are also available for four non-criteria pollutants (PNC [particle number concentration], COA [cooking organic aerosol], HOA [hydrocarbon-like organic aerosol], and BC [black carbon]). Model estimates are annual-average values for years 1979 – 2020 (SO2, NO2), 1988 – 2020 (PM10), 1990-2020 (CO), 1999-2020 (PM2.5), 2017 (PNC, COA, HOA, BC), and the average during May through September of the daily maximum 8-hour moving average for years 1979-2019 (O3). When downloading data, concentrations are listed as the variable \"pred_weight\"; units are micrograms per cubic meter for PM2.5, PM10, COA, HOA, and BC; particles per cc for PNC; parts per billion for O3, SO2, and NO2; and parts per million for CO.\n","\n","\n","\n","GEOID10\tbc\tco\tcoa\thoa\tno2\to3\tpm10\tpm25\tpnc\tso2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"huuuEjdmnsQm"},"outputs":[],"source":["c_year = pd.read_csv(dir + 'CACES air pollutants/raw/caces_natl_year_LUR.csv', dtype='string')\n","c_year.rename(columns={'fips': 'GEOID10'}, inplace=True)\n","c_year['pred_wght'] = c_year['pred_wght'].astype(float).round(4)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vHRT8vqensUC"},"outputs":[],"source":["# Pivot wide\n","\n","c_year2  = c_year.pivot_table(index=['GEOID10', 'year'], columns=['pollutant'], values='pred_wght').reset_index()\n","c_year2.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in c_year2.columns]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RK6pkcbcuUD3"},"outputs":[],"source":["# Flatten by tract\n","\n","cols = ['bc', 'co', 'coa', 'hoa', 'no2', 'o3',\t'pm10', 'pm25', 'pnc', 'so2']\n","\n","c_year3 = c_year2.groupby(['GEOID10'])[cols].mean()\n","c_year3 = c_year3.reset_index()"]},{"cell_type":"code","source":["c_year3 = c_year3.drop_duplicates()\n","c_year3 = c_year3.drop_duplicates(subset='GEOID10')"],"metadata":{"id":"OE421aebaYQe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zwyeiN5LoM5B"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lCabYSb9tP_C"},"outputs":[],"source":["# Export year averages\n","with open(dir + 'CACES air pollutants/caces_NATL_pollution_year_LUR.csv', 'w') as f:\n","  c_year2.to_csv(f)\n","\n","\n","# Export flattened averages\n","with open(dir + 'CACES air pollutants/caces_NATL_pollution_avg_LUR.csv', 'w') as f:\n","  c_year3.to_csv(f)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"2WGixDqJvKJl","executionInfo":{"status":"ok","timestamp":1727815760688,"user_tz":300,"elapsed":862,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload flattened by tract\n","\n","caces_lur = pd.read_csv(dir + 'CACES air pollutants/caces_NATL_pollution_avg_LUR.csv')\n","caces_lur.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('caces_lur')"]},{"cell_type":"markdown","metadata":{"id":"3U0ArDljnnBY"},"source":["## Damage: RCM models\n","\n","All at ground level (instead of elevated) by census tract\n","\n","\n","CACES participants have developed three models that estimate human health impacts from emissions of PM2.5, SO2, NOx, NH3, and VOCs:   AP2,   EASIUR, and   InMAP. This page contains results from the three models in terms of economic damages caused by human exposure to air pollution as a function of the location of emissions ($ per U.S. metric ton).\n","\n","\n","\n","GEOID10\tstate_abbr\tpollutant\tmodel\tseason\televated\tdamage"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_UVY2AAixGXb"},"outputs":[],"source":["caces = pd.read_csv(dir + 'CACES air pollutants/raw/caces_national_RCM.csv', dtype='string')\n","caces['damage'] = caces['damage'].astype(float).round(2)\n","caces.rename(columns={'fips':'GEOID10'}, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bXHrCqsIolO1"},"outputs":[],"source":["# Three different models for annual estimates\n","\n","three_models = caces[caces['season'] == 'annual']\n","three_models_w = three_models.pivot_table(index='GEOID10', columns=['pollutant', 'model', 'season'],\n","                                      values='damage').reset_index()\n","three_models_w.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in three_models_w.columns]\n","three_models_w.rename(columns={\"GEOID10__\":\"GEOID10\"}, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pUP1bMKVlDu7"},"outputs":[],"source":["seasonal = caces[caces['season'] != 'annual']\n","\n","# Pivot wide\n","\n","season_wide = seasonal.pivot_table(index='GEOID10', columns=['pollutant', 'season'], values='damage').reset_index()\n","season_wide.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in season_wide.columns]\n","season_wide.rename(columns={\"GEOID10_\":\"GEOID10\"}, inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"2nyzCEMArF38"},"source":["### Merge annual and seasonal"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jVXG0qVjrHj4"},"outputs":[],"source":["caces_damage = pd.merge(three_models_w, season_wide, on='GEOID10', how='outer')"]},{"cell_type":"code","source":["# Make columns alphabetical order\n","\n","caces_damage = caces_damage[sorted(caces_damage.columns)]"],"metadata":{"id":"ffwMouYemROH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vTU_GlQzWZbf"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qTsX5fJIWhWa"},"outputs":[],"source":["# Export\n","with open(dir + 'CACES air pollutants/caces_NATL_damage_RCM.csv', 'w') as f:\n","  caces_damage.to_csv(f)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"8pgnlinld9Qw","executionInfo":{"status":"ok","timestamp":1727815761454,"user_tz":300,"elapsed":767,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload\n","\n","caces_damage_RCM = pd.read_csv(dir + 'CACES air pollutants/caces_NATL_damage_RCM.csv')\n","caces_damage_RCM.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('caces_damage_RCM')"]},{"cell_type":"markdown","source":["## Spatially decomposed\n","\n","This dataset contains source-resolved and speciated outdoor concentrations of PM2.5 across the contiguous U.S. for 2001 and 2010 (annually-averaged). We use geographically weighted regression to predict and then correct for the bias in PM2.5 concentrations (Hernandez et al., 2021) originally simulated from an air quality model (Skyllakou et al., 2021).\n","Observations from speciated ground-level monitors (IMPROVE and CSN) are used to correct simulated ammonium (NH4+), nitrate (NO3-), sulfate (SO42-) elemental carbon (EC) and organic aerosol (OA). The primary and secondary fractions of OA, as predicted by the air quality model, are applied to corrected OA to estimate primary organic aerosol (OA) and secondary organic aerosol (SOA). The air quality model also predicts concentrations of sodium, chloride, and mineral dust, but these are excluded from this dataset due to large uncertainty in the emissions inventory and because speciated monitors for these species are not readily available. Note that total PM2.5 values provided in this dataset are the sum of NH4+, NO3-, SO42-, EC and OA. To account for concentrations of sodium, chloride, and mineral dust, we recommend uniformly adding 2 and 1.5 μg/m3 to the total PM2.5 concentrations for 2001 and 2010, respectively.\n","\n","\n","\n","['ec', 'nh4', 'no3', 'poa', 'soa', 'so4', 'oa', 'pm25']\n","\n","\n","2001, 2010"],"metadata":{"id":"rXrgGifXlMhZ"}},{"cell_type":"code","source":["caces = pd.read_csv(dir + 'CACES air pollutants/raw/gwr-ctm/gwr-ctm_fields.csv', dtype='string')\n","caces.rename(columns={'fips': 'GEOID10'}, inplace=True)\n","caces['concentration'] = caces['concentration'].astype(float).round(4)"],"metadata":{"id":"zi-PWseUlOPx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Different sources\n","\n","year_src = caces.pivot_table(index=['GEOID10', 'year'], columns=['pollutant', 'source'],\n","                                      values='concentration').reset_index()\n","year_src.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in year_src.columns]\n","year_src.rename(columns={\"GEOID10_\":\"GEOID10\", 'year_':'year'}, inplace=True)"],"metadata":{"id":"FtK8R_1Mo2OT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Account for NA, CL, MD in PM 2.5\n","\n","we recommend uniformly adding 2 and 1.5 μg/m3 to the total PM2.5 concentrations for 2001 and 2010, respectively."],"metadata":{"id":"-QWbaNESsI9B"}},{"cell_type":"code","source":["# List of columns to update\n","pm25_columns = [\n","    'pm25_EGU', 'pm25_biogenic', 'pm25_nonEGU',\n","    'pm25_offroad', 'pm25_onroad', 'pm25_other', 'pm25_total'\n","]\n","\n","# Add 2 to the relevant columns for rows where year == '2001'\n","for col in pm25_columns:\n","    year_src[f\"{col}__naclmd\"] = year_src[col]  # Copy original column\n","    year_src.loc[year_src['year'] == '2001', f\"{col}__naclmd\"] += 2  # Add 2 to the new column if year is 2001\n","\n","\n","# Add 1.5 to the relevant columns for rows where year == '2010'\n","for col in pm25_columns:\n","    year_src[f\"{col}__naclmd\"] = year_src[col]  # Copy original column\n","    year_src.loc[year_src['year'] == '2010', f\"{col}__naclmd\"] += 1.5  # Add 1.5 to the new column if year is 2010"],"metadata":{"id":"Mrga0Bt-sPzB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Keep latest year to flatten to tract\n","\n","spat = year_src[year_src['year']=='2010']\n","spat.drop(columns=['year'], inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yg7cJXgBsQBJ","executionInfo":{"status":"ok","timestamp":1727120619287,"user_tz":300,"elapsed":2,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"8a1e196e-3331-4b1d-a47a-1afd828be8f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-12-be47686d2497>:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  spat.drop(columns=['year'], inplace=True)\n"]}]},{"cell_type":"markdown","source":["## Export and reload"],"metadata":{"id":"6N7nZqgLp0Jm"}},{"cell_type":"code","source":["# 2001 and 2010\n","\n","year_src.to_csv(dir + 'CACES air pollutants/caces_NATL_spatial_year.csv')\n","\n","# Flatten to tract\n","\n","spat.to_csv(dir + 'CACES air pollutants/caces_NATL_spatial_2010.csv')"],"metadata":{"id":"atrkBzWLnp7w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reload\n","\n","\n","caces_spat = pd.read_csv(dir + 'CACES air pollutants/caces_NATL_spatial_2010.csv')\n","caces_spat.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('caces_spat')"],"metadata":{"id":"hO24gSOenp_a","executionInfo":{"status":"ok","timestamp":1727815762704,"user_tz":300,"elapsed":1251,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VNz4wDtcRJSz"},"source":["# Climate and economic justice screening tool\n","\n","https://screeningtool.geoplatform.gov/\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2506,"status":"ok","timestamp":1724786602289,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"},"user_tz":300},"id":"QTl6R0l-RLiJ","outputId":"a8f0d769-d60d-4f77-f4c6-ad32ac18cb59"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-13-d15242c1e572>:1: DtypeWarning: Columns (18,26,70,72,85,131) have mixed types. Specify dtype option on import or set low_memory=False.\n","  climate = pd.read_csv(dir + 'Climate and economic justice tool/1.0-communities.csv')\n"]}],"source":["climate = pd.read_csv(dir + 'Climate and economic justice tool/1.0-communities.csv')\n","climate['GEOID10'] = climate['Census tract 2010 ID']\n","climate=climate[['GEOID10',\n","                 'Expected agricultural loss rate (Natural Hazards Risk Index)',\n","                 'Expected agricultural loss rate (Natural Hazards Risk Index) (percentile)',\n","                 'Greater than or equal to the 90th percentile for expected agriculture loss rate and is low income?',\n","\n","                 'Leaky underground storage tanks',\n","                 'Leaky underground storage tanks (percentile)',\n","                 'Greater than or equal to the 90th percentile for leaky underground storage tanks and is low income?',\n","\n","                 'Share of properties at risk of fire in 30 years',\n","                 'Share of properties at risk of fire in 30 years (percentile)',\n","                 'Greater than or equal to the 90th percentile for share of properties at risk of fire in 30 years',\n","                 'Greater than or equal to the 90th percentile for share of properties at risk of fire in 30 years and is low income?',\n","\n","                 'Share of properties at risk of flood in 30 years',\n","                 'Share of properties at risk of flood in 30 years (percentile)',\n","                 'Greater than or equal to the 90th percentile for share of properties at risk of flood in 30 years',\n","                 'Greater than or equal to the 90th percentile for share of properties at risk of flood in 30 years and is low income?',\n","\n","                 \"Share of the tract's land area that is covered by impervious surface or cropland as a percent\",\n","                 \"Share of the tract's land area that is covered by impervious surface or cropland as a percent (percentile)\",\n","                 \"Greater than or equal to the 90th percentile for share of the tract's land area that is covered by impervious surface or cropland as a percent\",\n","                 \"Greater than or equal to the 90th percentile for share of the tract's land area that is covered by impervious surface or cropland as a percent and is low income?\",\n","\n","                 'Is there at least one abandoned mine in this census tract?',\n","                 'Is there at least one abandoned mine in this census tract, where missing data is treated as False?',\n","                 \"There is at least one abandoned mine in this census tract and the tract is low income.\",\n","\n","                 'Is there at least one Formerly Used Defense Site (FUDS) in the tract?',\n","                 'Is there at least one Formerly Used Defense Site (FUDS) in the tract, where missing data is treated as False?',\n","                 \"There is at least one Formerly Used Defense Site (FUDS) in the tract and the tract is low income.\",\n","\n","                 'Traffic proximity and volume',\n","                 'Traffic proximity and volume (percentile)',\n","                 'Greater than or equal to the 90th percentile for traffic proximity and is low income?',\n","\n","                 'PM2.5 in the air',\n","                 'PM2.5 in the air (percentile)',\n","                 'Greater than or equal to the 90th percentile for PM2.5 exposure and is low income?',\n","\n","                 'Diesel particulate matter exposure',\n","                 'Diesel particulate matter exposure (percentile)',\n","                 'Greater than or equal to the 90th percentile for diesel particulate matter and is low income?',\n","\n","                  'Wastewater discharge',\n","                  'Wastewater discharge (percentile)',\n","                  'Greater than or equal to the 90th percentile for wastewater discharge and is low income?',\n","\n","                 'Proximity to hazardous waste sites',\n","                 'Proximity to hazardous waste sites (percentile)',\n","                 'Greater than or equal to the 90th percentile for proximity to hazardous waste facilities and is low income?',\n","\n","                 'Proximity to NPL (Superfund) sites',\n","                 'Proximity to NPL (Superfund) sites (percentile)',\n","                 'Greater than or equal to the 90th percentile for proximity to superfund sites and is low income?',\n","\n","                 'Proximity to Risk Management Plan (RMP) facilities',\n","                 'Proximity to Risk Management Plan (RMP) facilities (percentile)',\n","                 'Greater than or equal to the 90th percentile for proximity to RMP sites and is low income?'\n","\n","                 ]]\n","\n","\n","# Shorter names\n","newnames = {\n","    'Expected agricultural loss rate (Natural Hazards Risk Index)' : 'Aggr_loss_rate_NHRI',\n","    'Expected agricultural loss rate (Natural Hazards Risk Index) (percentile)' : 'Aggr_loss_rate_pctile',\n","    'Greater than or equal to the 90th percentile for expected agriculture loss rate and is low income?' : 'Aggr_loss_rate_ge90pct_lowinc',\n","    'Diesel particulate matter exposure' : 'Diesel',\n"," 'Diesel particulate matter exposure (percentile)' : 'Diesel_pctile',\n"," 'Greater than or equal to the 90th percentile for diesel particulate matter and is low income?' : 'Diesel_ge90pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for leaky underground storage tanks and is low income?' : 'Leaky_ge90pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for PM2.5 exposure and is low income?' : 'PM25_ge90pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for proximity to hazardous waste facilities and is low income?' : 'Hazard_waste_ge90pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for proximity to RMP sites and is low income?' : 'RMP_ge90pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for proximity to superfund sites and is low income?' : 'Superfund_ge90pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for share of properties at risk of fire in 30 years' : 'Fire_ge90pct',\n"," 'Greater than or equal to the 90th percentile for share of properties at risk of fire in 30 years and is low income?' : 'Fire_ge90pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for share of properties at risk of flood in 30 years' : 'Flood_ge90pct',\n"," 'Greater than or equal to the 90th percentile for share of properties at risk of flood in 30 years and is low income?' : 'Flood_ge90pct_lowinc',\n"," \"Greater than or equal to the 90th percentile for share of the tract's land area that is covered by impervious surface or cropland as a percent\" : 'Impervious_or_crop_ge90pct_pct',\n"," \"Greater than or equal to the 90th percentile for share of the tract's land area that is covered by impervious surface or cropland as a percent and is low income?\" : 'Impervious_or_crop_ge90pct_pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for traffic proximity and is low income?' : 'Traffic_ge90pct_lowinc',\n"," 'Greater than or equal to the 90th percentile for wastewater discharge and is low income?' : 'WWater_ge90pct_lowinc',\n"," 'Is there at least one abandoned mine in this census tract, where missing data is treated as False?' : 'Aband_mine_ge1_missing',\n"," 'Is there at least one abandoned mine in this census tract?' : 'Aband_mine_ge1',\n"," 'Is there at least one Formerly Used Defense Site (FUDS) in the tract, where missing data is treated as False?' : 'FUDS_ge1_missing',\n"," 'Is there at least one Formerly Used Defense Site (FUDS) in the tract?' : 'FUDS_ge1',\n"," 'Leaky underground storage tanks' : 'Leaky_under_storage',\n"," 'Leaky underground storage tanks (percentile)' : 'Leaky_under_storage_pctile',\n"," 'PM2.5 in the air' : 'PM25_CEJSCT',\n"," 'PM2.5 in the air (percentile)' : 'PM25_CEJSCT_pctile',\n"," 'Proximity to hazardous waste sites' : 'Hazard_waste_proximity',\n"," 'Proximity to hazardous waste sites (percentile)' : 'Hazard_waste_pctile',\n"," 'Proximity to NPL (Superfund) sites' : 'Superfund_proximity',\n"," 'Proximity to NPL (Superfund) sites (percentile)' : 'Superfund_proximity_pctile',\n"," 'Proximity to Risk Management Plan (RMP) facilities' : 'RMP_proximity',\n"," 'Proximity to Risk Management Plan (RMP) facilities (percentile)' : 'RMP_proximity_pctile',\n"," 'Share of properties at risk of fire in 30 years' : 'Fire_risk_30yrs',\n"," 'Share of properties at risk of fire in 30 years (percentile)' : 'Fire_risk_30yrs_pctile',\n"," 'Share of properties at risk of flood in 30 years' : 'Flood_risk_30yrs',\n"," 'Share of properties at risk of flood in 30 years (percentile)' : 'Flood_risk_30yrs_pctile',\n"," \"Share of the tract's land area that is covered by impervious surface or cropland as a percent\" : 'Impervious_or_crop_pct',\n"," \"Share of the tract's land area that is covered by impervious surface or cropland as a percent (percentile)\" : 'Impervious_or_crop_pct_pctile',\n"," 'There is at least one abandoned mine in this census tract and the tract is low income.' : 'Aband_mine_ge1_lowinc',\n"," 'There is at least one Formerly Used Defense Site (FUDS) in the tract and the tract is low income.' : 'FUDS_ge1_lowinc',\n"," 'Traffic proximity and volume' : 'Traffic_prox_volume',\n"," 'Traffic proximity and volume (percentile)' : 'Traffic_prox_volume_pctile',\n"," 'Wastewater discharge' : 'WWater_discharge',\n"," 'Wastewater discharge (percentile)' : 'WWater_discharge_pctile'\n","}\n","\n","climate.rename(columns=newnames, inplace=True)"]},{"cell_type":"markdown","source":["## Export and reload"],"metadata":{"id":"DIh-iYZiSrMC"}},{"cell_type":"code","source":["# Export\n","with open(dir + 'Climate and economic justice tool/climate_renamed.csv', 'w') as f:\n","  climate.to_csv(f)"],"metadata":{"id":"Usl13sa4SqaE"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":9,"metadata":{"id":"SsxlHvNVRLlA","executionInfo":{"status":"ok","timestamp":1727815763701,"user_tz":300,"elapsed":998,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload\n","\n","climate = pd.read_csv(dir + 'Climate and economic justice tool/climate_renamed.csv')\n","climate.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('climate')"]},{"cell_type":"markdown","metadata":{"id":"Idl7HpUuj6JP"},"source":["# EPA"]},{"cell_type":"markdown","metadata":{"id":"zRxw__fcVcUf"},"source":["## EJScreen - reload\n","\n","https://www.epa.gov/ejscreen/download-ejscreen-data\n","\n","Problems with 2015 file, not processed\n","\n","\n","PRE1960PCT\t% pre-1960 housing (lead paint indicator)\n","\n","DSLPM\tDiesel particulate matter level in air\n","\n","CANCER\tAir toxics cancer risk\n","\n","RESP\tAir toxics respiratory hazard index\n","\n","-- NEURO\tAir toxics neurological hazard index: **Not in data file**\n","\n","PTRAF\tTraffic proximity and volume\n","\n","PWDIS\tIndicator for major direct dischargers to water\n","\n","PNPL\tProximity to National Priorities List (NPL) sites\n","\n","PRMP\tProximity to Risk Management Plan (RMP) facilities\n","\n","PTSDF\tProximity to Treatment Storage\n","and Disposal (TSDF) facilities\n","\n","OZONE\tOzone level in air\n","\n","PM25\tPM2.5 level in air"]},{"cell_type":"markdown","metadata":{"id":"_cem2ddZLo6m"},"source":["### Function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GXi8I_YNLqVH"},"outputs":[],"source":["# Function\n","\n","# Stack API calls for EJScreen\n","def EJstacky(files, indicators):\n","  ej=[]\n","\n","  for filename, year in zip(files, years):\n","      data = pd.read_csv(dir + 'EPA/EJ screen/raw/' + filename, dtype='string')\n","\n","      data['GEOID10'] = data['ID'].astype(str).str[:11]\n","      data['Year'] = year\n","\n","      data = data[['GEOID10', 'Year',\n","         # Lead paint\n","                   'PRE1960PCT',\n","          # Diesel particulate matter\n","                   'DSLPM',\n","          # Traffic proximity\n","                   'PTRAF',\n","          # Water discharges\n","                   'PWDIS',\n","          # Superfund sites\n","                   'PNPL',\n","          # Risk management plan sites\n","                   'PRMP',\n","          # Treatment storage and disposal\n","                   'PTSDF',\n","          # Air pollution: Ozone\n","                   'OZONE',\n","          # PM2.5\n","                   'PM25',\n","         # Air toxics  risk (cancer, respiratory)\n","                   'CANCER',\n","                   'RESP']]\n","\n","      cols_numeric = ['PRE1960PCT', 'DSLPM', 'PTRAF', 'PWDIS', 'PNPL', 'PRMP', 'PTSDF', 'OZONE', 'PM25', 'CANCER', 'RESP']\n","      data[cols_numeric] = data[cols_numeric].apply(pd.to_numeric, errors='coerce')\n","\n","      # Multiple PM2.5 metrics\n","      data = data.rename(columns={'PM25': 'epaPM25'})\n","\n","      ej.append(data)\n","\n","      combined = pd.concat(ej, ignore_index=True)\n","      combined = pd.DataFrame(combined)\n","\n","  return(combined)"]},{"cell_type":"markdown","metadata":{"id":"DJfP-PsaNK89"},"source":["### Process"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VUvtheFsNG80"},"outputs":[],"source":["# Define the files and years\n","\n","files = [\n","# 2016\n","    \"EJSCREEN_Full_V3_USPR_TSDFupdate.csv\",\n","# 2017\n","    \"EJSCREEN_2017_USPR_Public.csv\",\n","# 2018\n","    \"EJSCREEN_Full_USPR_2018.csv\",\n","# 2019\n","    \"EJSCREEN_2019_USPR.csv\",\n","# 2020\n","    \"EJSCREEN_2020_USPR.csv\"\n","    ]\n","\n","years = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":148929,"status":"ok","timestamp":1721839561181,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"},"user_tz":300},"id":"7-7716bxxC1K","outputId":"6872538a-0d25-403c-d11b-d879e5c5d61e"},"outputs":[{"name":"stdout","output_type":"stream","text":["148.5447301864624\n"]}],"source":["import time\n","t0 = time.time()\n","\n","ej_year = EJstacky(files, years)\n","\n","t1 = time.time()\n","total = t1-t0\n","print(total)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q2NI94JEYnWP"},"outputs":[],"source":["# Cross-sectional data\n","\n","ej_avg = ej_year.groupby(['GEOID10']).mean()\n","ej_avg = ej_avg.reset_index()"]},{"cell_type":"markdown","metadata":{"id":"9WGGZ1eJDHg6"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Cv2Bn3MleRA"},"outputs":[],"source":["# Export\n","\n","with open(dir + 'EPA/EJ screen/ej_NATL_year.csv', 'w') as f:\n","  ej_year.to_csv(f)\n","\n","# Cross-sectional\n","with open(dir + 'EPA/EJ screen/ej_NATL_averaged.csv', 'w') as f:\n","  ej_avg.to_csv(f)"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"2UlylfDGyhEq","executionInfo":{"status":"ok","timestamp":1727815766299,"user_tz":300,"elapsed":2600,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload\n","\n","ej = pd.read_csv(dir + 'EPA/EJ screen/ej_NATL_averaged.csv', dtype='string')\n","\n","cols_numeric = ['PRE1960PCT', 'DSLPM', 'PTRAF', 'PWDIS', 'PNPL', 'PRMP', 'PTSDF', 'OZONE', 'epaPM25', 'CANCER', 'RESP']\n","ej[cols_numeric] = ej[cols_numeric].apply(pd.to_numeric, errors='coerce')\n","\n","ej = ej.drop(columns=['Unnamed: 0', 'Year'])\n","\n","frames.append('ej')"]},{"cell_type":"markdown","metadata":{"id":"h2KxVCdA9CJr"},"source":["## x NEEDS WORK Hazardous waste -- NEED TO DOWNLOAD\n","\n","RCRA Resrouce Conservation and Recovery Act Information\n","\n","https://rcrapublic.epa.gov/rcrainfoweb/action/main-menu/view\n","\n","https://enviro.epa.gov/envirofacts/rcrainfo/search\n","\n","https://echo.epa.gov/help/facility-search/hazardous-waste-search-results-help#facility_summary\n","\n","SNC Status [RCRASNC]\n","\n","Yes: Indicates that the facility is currently designated in Significant Noncompliance (SNC) under RCRA. A RCRA site is considered to be in Significant Noncompliance in the most recent compliance quarter of record when there is actual exposure or a substantial likelihood of exposure to hazardous waste/constituents, the facility is a chronic or recalcitrant violator; or a substantial deviation occurred from the terms of a permit, order, agreement or RCRA statutory or regulatory requirements.\n","\n","No: Indicates that the facility is not in SNC under RCRA.\n","\n","\n","Quarters with Noncompliance (3 years) [RCRAQtrsWithNc]\n","\n","Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in noncompliance (NC) status, or in Significant Noncompliance (SNC). A quarter is any of the following 3-month calendar periods: January-March, April-June, July-September, or October-December. Further violation and detailed compliance information can be found on ECHO's Frequently Asked Questions page.\n","\n","\n","Formal Enforcement Actions (5 years) [RCRAFeaCnt]\n","\n","Indicates the total number of enforcement actions taken against the facility within the last five years. This count only includes enforcement actions that have been entered in the national program databases (RCRAInfo).\n","\n","\"--\" indicates that the database shows no formal EPA or state enforcement action. Note that enforcement actions that are in process are not publicly available. For more information, continue to check this site for updates (monthly). The relevant state environmental agency also may have additional information. Also note that all violations do not receive formal enforcement actions. Violations that are minor, short in duration, or quickly corrected by the facility may not warrant formal enforcement action.\n","\n","The full formal enforcement action definition is provided in the Detailed Facility Report Data Dictionary.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KUSKU8CGPO_2"},"outputs":[],"source":["haz = pd.read_csv(dir + 'EPA/Hazardous waste/raw/Cook Co - hazardous waste.csv',\n","                     dtype='string')"]},{"cell_type":"markdown","metadata":{"id":"5vFREO-BRa0t"},"source":["### GIS - geocoding function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ft6lCWWOzRAg"},"outputs":[],"source":["haz['oneline'] = haz['RCRAStreet'] + ' ' + haz['RCRACity']  + ' ' + haz['RCRAState']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z0T1wixLRboz"},"outputs":[],"source":["haz2 = AddLatLongTract(haz)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tKZf0QCnzcFB"},"outputs":[],"source":["# Backup (GIS is slow)\n","#with open(dir + 'CACES air pollutants/haz2_intermediate', 'w') as f:\n","#  haz2.to_csv(f)\n","\n","# Reload\n","haz = pd.read_csv(dir + 'CACES air pollutants/haz2_intermediate', dtype='string')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I34lUjEYzwr3"},"outputs":[],"source":["# Lat long to tract\n","\n","haz2 = LatLongTract(haz, \"RCRALatitude\", \"RCRALongitude\")"]},{"cell_type":"markdown","metadata":{"id":"hIbiTr7QRkni"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uqPW7a4xSP52"},"outputs":[],"source":["haz['NonCompliant'] = haz['RCRASNC'].apply(lambda x: 1 if x ==\"Yes\" else 0)\n","\n","cols = ['NonCompliant', 'RCRAQtrsWithNC', 'RCRAInspCnt', 'RCRAFeaCnt', 'Over80CountUs']\n","\n","haz[cols] = haz[cols].apply(pd.to_numeric, errors='coerce')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BieuZK0RRjsr"},"outputs":[],"source":["records = haz2.groupby('GEOID10').size().reset_index(name='HazardCount')\n","\n","\n","temp = haz2.groupby('GEOID10')[['NonCompliant', 'RCRAQtrsWithNC', 'RCRAInspCnt', 'RCRAFeaCnt',\n","                                      'Over80CountUs']].sum().reset_index()\n","\n","temp = temp.rename(columns={'NonCompliant':'HazNonCompliant', 'RCRAQtrsWithNC':'HazRCRAQtrsWithNC',\n","                            'RCRAInspCnt': 'HazRCRAInspCnt', 'RCRAFeaCnt':'HazRCRAFeaCnt',\n","                                      'Over80CountUs':'HazOver80CountUs'})\n","\n","Haz_Tract = pd.merge(records, temp, on='GEOID10')"]},{"cell_type":"markdown","metadata":{"id":"In5VskL6RmTD"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"WF5a3p4tRkBY"},"outputs":[],"source":["# Export line listing\n","with open(dir + 'EPA/Hazardous waste/Haz_line.csv', 'w') as f:\n","  haz2.to_csv(f)\n","\n","# Export tract summary\n","with open(dir + 'EPA/Hazardous waste/Haz_Tract.csv', 'w') as f:\n","  Haz_Tract.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"40nbHMiURrbv"},"outputs":[],"source":["# Reload line listing\n","\n","# haz_line = pd.read_csv(dir + 'EPA/Hazardous waste/Haz_line.csv',\n","#                      dtype='string')\n","\n","# Reload tract summary\n","\n","haz = pd.read_csv(dir + 'EPA/Hazardous waste/Haz_Tract.csv',\n","                     dtype='string')\n","\n","haz.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('haz')"]},{"cell_type":"markdown","metadata":{"id":"e5u_7BrRxsTM"},"source":["## x Landfills - NEED TO DOWNLOAD (state by state?)\n","\n","https://www.epa.gov/lmop/lmop-landfill-and-project-database\n","\n","https://www.epa.gov/lmop/project-and-landfill-data-state\n","\n","**NEED TO DOWNLOAD STATE BY STATE**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"MCz59hHLxqW0"},"outputs":[],"source":["landfills = pd.read_csv(dir + 'EPA/Landfill/Cook Co landfills - Sheet1.csv',\n","                     dtype='string')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"aN44P813PUog"},"outputs":[],"source":["land = landfills[['Landfill Name', 'Physical Address', 'City', 'State', 'Zip Code', 'Current Landfill Status']]\n","\n","land = land.dropna(subset=['Physical Address'])"]},{"cell_type":"markdown","metadata":{"id":"cbU26_MuPGby"},"source":["### GIS"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"PE0pRo0FPiyf"},"outputs":[],"source":["land['oneline'] = land['Physical Address'] + ' ' + land['City'] + ' ' + land['State'] + ' ' + land['Zip Code']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"z3wJ0ud6xfEN"},"outputs":[],"source":["land2 = AddLatLongTract(land)\n","land2 = land2.dropna(subset=['GEOID10'])"]},{"cell_type":"markdown","metadata":{"id":"dDaooJXFRzdA"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"3yEQnwFmR1ZH"},"outputs":[],"source":["land_tract = land2.groupby(['GEOID10']).size().to_frame('Landfills').reset_index()"]},{"cell_type":"markdown","metadata":{"id":"QBXK_jZIQgdb"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"2bmT84UbQiBT"},"outputs":[],"source":["# Export line listing (with census tract information)\n","\n","with open(dir + 'EPA/Landfill/NATL_tract.csv', 'w') as f:\n","  land2.to_csv(f)\n","\n","# Export tract count\n","with open(dir + 'EPA/Landfill/NATL_tract_agg.csv', 'w') as f:\n","  land_tract.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OvSuy9y3JPIP"},"outputs":[],"source":["# Reload line listing\n","\n","land_line = pd.read_csv(dir + 'EPA/Landfill/NATL_tract.csv', dtype='string')\n","land_line.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","# Reload tract coung\n","\n","land = pd.read_csv(dir + 'EPA/Landfill/NATL_tract_agg.csv', dtype='string')\n","land.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('land')"]},{"cell_type":"markdown","metadata":{"id":"70_6OUMTfUze"},"source":["## x RSEI - NEED TO DOWNLOAD\n","\n","https://www.epa.gov/rsei"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"z4T8sORcxGdW"},"outputs":[],"source":["raw = pd.read_excel(dir + 'EPA/RSEI/2023-10-17_10years_CookCo.xlsx')\n","raw['TRI_FACILITY_ID'] = raw['TRI Facility ID'].astype(pd.StringDtype())\n","raw = raw.drop_duplicates()\n","\n","raw = raw.drop(columns=['TRI Facility ID'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"VsWSiwjsE1nZ"},"outputs":[],"source":["address = pd.read_csv(dir + 'EPA/RSEI/1030923121.CSV', dtype='string')\n","address = address.drop_duplicates()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"LvRb10KYFByl"},"outputs":[],"source":["# merge\n","total_merge = raw.merge(address, on=['TRI_FACILITY_ID'], how='left', indicator=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"eB9yE2c132JV"},"outputs":[],"source":["rsei = R1[['TRI_FACILITY_ID', 'TRI Facility Name', 'PARENT_CO_NAME', 'Submission Year',\n","           'RSEI Media', 'Chemical', '2012 Core Chemical Flag', 'Industry Sector',  'NAICS Code', 'NewIndustryFlag',\n","           'RSEI Score', 'RSEI Score-Cancer',  'RSEI Score-Noncancer', 'RSEI Modeled Hazard',\n","           'RSEI Modeled Pounds',  'STREET_ADDRESS', 'CITY_NAME', 'COUNTY_NAME', 'STATE_ABBR', 'ZIP_CODE',\n","            'LATITUDE', 'LONGITUDE']]"]},{"cell_type":"markdown","metadata":{"id":"riFiirLRyODq"},"source":["### GIS"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"v3iZXIxxyPWA"},"outputs":[],"source":["rsei_line = LatLongTract(rsei, \"LATITUDE\", \"LONGITUDE\")"]},{"cell_type":"markdown","metadata":{"id":"9QrMJ_KuyBuA"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"AhNtwgCE6MMs"},"outputs":[],"source":["rsei_line['2012_Core_Chemical'] = rsei_line['2012 Core Chemical Flag'].apply(lambda x: 1 if x ==\"True\" else 0)\n","rsei_line['NewIndustry'] = rsei_line['NewIndustryFlag'].apply(lambda x: 1 if x ==\"True\" else 0)\n","\n","rsei_line.drop(columns=['2012 Core Chemical Flag', 'NewIndustryFlag'], inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"RyxU_jx1yDo0"},"outputs":[],"source":["columns_to_convert = ['RSEI Score', 'RSEI Score-Cancer', 'RSEI Score-Noncancer', 'RSEI Modeled Hazard', 'RSEI Modeled Pounds']\n","rsei_line[columns_to_convert] = rsei_line[columns_to_convert].apply(lambda x: pd.to_numeric(x, errors='coerce').round(2))\n","\n","# Remove duplicate facility IDs\n","rsei_dedup = rsei_line.drop_duplicates(subset=['GEOID10','Submission Year','TRI_FACILITY_ID'])\n","\n","rsei_tractYr = rsei_dedup.groupby(['GEOID10', 'Submission Year']).agg(\n","    Count=('GEOID10', 'size'),\n","    Avg_RSEI_Score=('RSEI Score', 'mean'),\n","    Avg_RSEI_Cancer=('RSEI Score-Cancer', 'mean'),\n","    Avg_RSEI_Noncancer=('RSEI Score-Noncancer', 'mean'),\n","    Avg_RSEI_Hazard=('RSEI Modeled Hazard', 'mean'),\n","    Avg_RSEI_Pounds=('RSEI Modeled Pounds', 'mean')\n",").reset_index()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"UwWx0_Kv7h9Y"},"outputs":[],"source":["# Remove duplicate facility IDs\n","rsei3 = rsei_line.drop_duplicates(subset=['GEOID10','TRI_FACILITY_ID'])\n","\n","rsei_tract = rsei3.groupby(['GEOID10']).agg(\n","    Count=('GEOID10', 'size'),\n","    Avg_RSEI_Score=('RSEI Score', 'mean'),\n","    Avg_RSEI_Cancer=('RSEI Score-Cancer', 'mean'),\n","    Avg_RSEI_Noncancer=('RSEI Score-Noncancer', 'mean'),\n","    Avg_RSEI_Hazard=('RSEI Modeled Hazard', 'mean'),\n","    Avg_RSEI_Pounds=('RSEI Modeled Pounds', 'mean')\n",").reset_index()"]},{"cell_type":"markdown","metadata":{"id":"6OYNZO8q_c9y"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"EKUPwvw6_Z4J"},"outputs":[],"source":["# Export line listing\n","with open(dir + 'EPA/RSEI/Cook_Co_RSEI_2012_2021.csv', 'w') as f:\n","  rsei2.to_csv(f)\n","\n","# Export tract/year averages\n","with open(dir + 'EPA/RSEI/rsei_tract_yr.csv', 'w') as f:\n","  rsei_tractYr.to_csv(f)\n","\n","# Export tract averages - cross sectional\n","with open(dir + 'EPA/RSEI/rsei_tract.csv', 'w') as f:\n","  rsei_tract.to_csv(f)\n","rsei_tract.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"JiisicDA9EIX"},"outputs":[],"source":["# Reload line listing\n","rsei_line = pd.read_csv(dir + 'EPA/RSEI/Cook_Co_RSEI_2012_2021.csv', dtype='string')\n","rsei.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","# Reload tract average\n","rsei = pd.read_csv(dir + 'EPA/RSEI/rsei_tract.csv', dtype='string')\n","rsei.drop(columns=['Unnamed: 0'], inplace=True)\n","rsei = rsei.rename(columns={'Count': 'RSEICount'})\n","\n","# Convert to numeric\n","cols = ['RSEICount', 'Avg_RSEI_Score', 'Avg_RSEI_Cancer', 'Avg_RSEI_Noncancer', 'Avg_RSEI_Hazard',\n","        'Avg_RSEI_Pounds', 'Avg_RSEI_ScoreStd', 'Avg_RSEI_CancerStd', 'Avg_RSEI_NoncancerStd',\n","        'Avg_RSEI_HazardStd', 'Avg_RSEI_PoundsStd']\n","\n","rsei[cols] =  rsei[cols].apply(lambda x: pd.to_numeric(x, errors='coerce').round(2))\n","\n","frames.append('rsei')"]},{"cell_type":"markdown","metadata":{"id":"flc_Z8d0eSpm"},"source":["## x Superfund - NEED TO DOWNLOAD\n","\n","https://www.epa.gov/superfund/superfund-data-and-reports"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"neNbNGnZxGlT"},"outputs":[],"source":["raw = pd.read_csv(dir + 'EPA/Superfund/raw/Cook Co superfund and not.csv', dtype='string', encoding='latin-1')"]},{"cell_type":"markdown","metadata":{"id":"OwQWR1NAMYsS"},"source":["### GIS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A-UnphVO1tBk"},"outputs":[],"source":["raw['oneline'] = raw['Street Address'] + ' ' + raw['City'] + ' ' + raw['State']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"ACqh7un6MYNi"},"outputs":[],"source":["raw2 = AddLatLongTract(raw)"]},{"cell_type":"markdown","metadata":{"id":"4cUhOo1nq7co"},"source":["### Aggregate"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"kjtTRuV4rDwS"},"outputs":[],"source":["# Brown sites (not on priority list)\n","\n","notsuper = raw2[raw2['NPL Status'].isin(['Not NPL', 'Removed from NPL'])]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"uWYhgBSTL-Uh"},"outputs":[],"source":["# Superfund sites (on priority list)\n","\n","super = raw2[raw2['NPL Status'].isin(['Final NPL', 'Part of NPL Site'])]"]},{"cell_type":"markdown","metadata":{"id":"6dGYsvXKTnGj"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"D-sz7n8ZToPW"},"outputs":[],"source":["super['2012_Core_Chemical'] = super['2012 Core Chemical Flag'].apply(lambda x: 1 if x ==\"Yes\" else 0)\n","\n","super2 = pd.DataFrame(super)\n","\n","super_tract = super2.groupby(['GEOID10']).size().to_frame(\"SuperfundCount\").reset_index()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Mb_9CbsMUARQ"},"outputs":[],"source":["notsuper2 = pd.DataFrame(notsuper)\n","\n","notsuper_tract = notsuper2.groupby(['GEOID10']).size().to_frame(\"NotSuperfundCount\").reset_index()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"tB7x4FGHs0bo"},"outputs":[],"source":["SuperNot = pd.merge(super_tract, notsuper_tract, on=\"GEOID10\", how='outer')\n","SuperNot = SuperNot.fillna(0)"]},{"cell_type":"markdown","metadata":{"id":"O_nvmpEwTiOV"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"kcUyhYuDThzT"},"outputs":[],"source":["# Export line listing\n","with open(dir + 'EPA/Superfund/NATL_all_sites_line.csv', 'w') as f:\n","  raw2.to_csv(f)\n","\n","# Export line listing - superfund\n","with open(dir + 'EPA/Superfund/NATL_Superfund_line.csv', 'w') as f:\n","  super.to_csv(f)\n","\n","# Export line listing - not superfund\n","with open(dir + 'EPA/Superfund/NATL_notsuper_line.csv', 'w') as f:\n","  notsuper.to_csv(f)\n","\n","# Export tract counts\n","with open(dir + 'EPA/Superfund/NATL_SuperNot_tract_agg.csv', 'w') as f:\n","  SuperNot.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"BoLzMTUhUGs2"},"outputs":[],"source":["# Reload tract averages\n","\n","SuperNot = pd.read_csv(dir + 'EPA/Superfund/NATL_SuperNot_tract_agg.csv', dtype='string')\n","SuperNot=SuperNot[SuperNot.columns.drop(list(SuperNot.filter(regex='Unnamed')))]\n","\n","frames.append('SuperNot')"]},{"cell_type":"markdown","metadata":{"id":"nxOOJsGRqltB"},"source":["## x Wastewater - NEED TO DOWNLOAD\n","\n","https://echo.epa.gov/help/facility-search/water-search-results-help"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"FsKgzHCcqm25"},"outputs":[],"source":["ww = pd.read_csv(dir + 'EPA/Wastewater/raw/Cook Co - wastewater stormwater biosolids.csv')\n","\n","ww[['CWPQtrsWithNC', 'CWPE90Cnt', 'CWPInspectionCount', 'CWPFormalEaCnt',\n","   'Over80CountUs']].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"b4R4DGVlbaXq"},"source":["### GIS - geocoding function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D9n9nPw02Kvi"},"outputs":[],"source":["ww = ww.dropna(subset=[\"CWPStreet\"], axis=0)\n","\n","ww['oneline'] = ww['CWPStreet'] + ' ' + ww['CWPCity'] + ' ' + ww['CWPState']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Y7fN6U_sbcGv"},"outputs":[],"source":["ww2 = AddLatLongTract(ww)"]},{"cell_type":"markdown","metadata":{"id":"B6LJPvpDcm22"},"source":["### Summarize"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"uMW2iHqPcnO0"},"outputs":[],"source":["size = ww2.groupby(['GEOID10']).size().to_frame(\"WWBiosolidsCount\").reset_index()\n","\n","\n","temp = ww2.groupby(['GEOID10'])[['CWPQtrsWithNC', 'CWPE90Cnt',\n","                                'CWPInspectionCount', 'CWPFormalEaCnt',\n","                                'Over80CountUs']].sum().round(2)\n","\n","ww_tract = pd.merge(size, temp, on='GEOID10')\n","\n","ww_tract = ww_tract.rename(columns={'CWPQtrsWithNC':'WWCWPQtrsWithNC',\n","                                    'CWPE90Cnt': 'WWCWPE90Cnt',\n","                                    'CWPInspectionCount': 'WWCWPInspectionCount' ,\n","                                    'CWPFormalEaCnt':'WWCWPFormalEaCnt',\n","                                    'Over80CountUs':'WWOver80CountUs'})"]},{"cell_type":"markdown","metadata":{"id":"ciqGEDIncndI"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"rM8yC97qcnrO"},"outputs":[],"source":["# Export line listing\n","with open(dir + 'EPA/Wastewater/CookCoWWStormBiosolids_line.csv', 'w') as f:\n","  ww2.to_csv(f)\n","\n","# tract summary\n","with open(dir + 'EPA/Wastewater/CookCoWWStormBiosolids_tract_agg.csv', 'w') as f:\n","  ww_tract.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"qhkKmRLe2Jch"},"outputs":[],"source":["# Reload line listing\n","wwater_line = pd.read_csv(dir + 'EPA/Wastewater/CookCoWWStormBiosolids_line.csv')\n","wwater_line=wwater_line[wwater.columns.drop(list(wwater.filter(regex='Unnamed')))]\n","\n","# Reload tract summary\n","\n","wwater = pd.read_csv(dir + 'EPA/Wastewater/CookCoWWStormBiosolids_tract_agg.csv', dtype='string')\n","wwater=wwater[wwater.columns.drop(list(wwater.filter(regex='Unnamed')))]\n","\n","frames.append('wwater')"]},{"cell_type":"markdown","source":["# FEMA"],"metadata":{"id":"tnxx-JTB1ln9"}},{"cell_type":"markdown","source":["## National risk index\n","\n","Excluding social vulnerability (CDC SVI) and community resilience (county-level)\n","\n","County level:\n","\n","\n","*   Avalanche\n","*   Riverine flooding\n","\n","https://colab.research.google.com/drive/1Pt491rfjJSx5sDc3Epiqo-QTutHU20Z1#scrollTo=uFu3HS161nLz&line=11&uniqifier=1\n","\n"],"metadata":{"id":"uFu3HS161nLz"}},{"cell_type":"code","source":["NRI = pd.read_csv(dir + 'FEMA/National Risk Hazard Index/NRI_Table_CensusTracts.csv')\n","\n","cols = ['TRACTFIPS', 'EAL_VALT', 'EAL_VALB', 'EAL_VALP', 'EAL_VALPE', 'EAL_VALA',\n","        'ALR_VALB', 'ALR_VALP', 'ALR_VALA', 'ALR_NPCTL',\n","        'CFLD_AFREQ', 'CFLD_EALT', 'CWAV_AFREQ', 'CWAV_EALT',\n","        'DRGT_AFREQ', 'DRGT_EALT', 'ERQK_AFREQ', 'ERQK_EALT', 'HAIL_AFREQ', 'HAIL_EALT',\n","        'HWAV_AFREQ', 'HWAV_EALT', 'HRCN_AFREQ', 'HRCN_EALT', 'ISTM_AFREQ', 'ISTM_EALT',\n","        'LNDS_AFREQ', 'LNDS_EALT', 'LTNG_AFREQ', 'LTNG_EALT',\n","        'SWND_AFREQ', 'SWND_EALT', 'TRND_AFREQ', 'TRND_EALT', 'TSUN_AFREQ', 'TSUN_EALT',\n","        'VLCN_AFREQ', 'VLCN_EALT', 'WFIR_AFREQ', 'WFIR_EALT', 'WNTW_AFREQ', 'WNTW_EALT'\n","          ]\n","\n","NRI = NRI[cols]\n","\n","NRI.rename(columns={'TRACTFIPS': 'GEOID10'}, inplace=True)\n","\n","frames.append('NRI')"],"metadata":{"id":"0Is_CGzk1oYH","executionInfo":{"status":"ok","timestamp":1727815793429,"user_tz":300,"elapsed":16614,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"87-Zfnb-7rSW"},"source":["# Homeland Infrastructure Foundation-Level Data (HIFLD)"]},{"cell_type":"markdown","metadata":{"id":"5k92ukHm_i_Q"},"source":["## Manufacturing -- reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gNzeAQOn9mCG"},"outputs":[],"source":["df = pd.read_csv(dir + 'Homeland infrastructure/HIFLD mfg facilities/General_Manufacturing_Facilities.csv',\n","                 dtype='string')"]},{"cell_type":"markdown","metadata":{"id":"Xyn1_hhd972M"},"source":["### GIS - geocoding function"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10855,"status":"ok","timestamp":1721842075186,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"},"user_tz":300},"id":"wVUE63Gd97U2","outputId":"abf8d701-db68-474d-906d-3ce1e5c89724"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n","/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py:3553: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n","  exec(code_obj, self.user_global_ns, self.user_ns)\n"]}],"source":["df = df.dropna(subset=['LATITUDE'])\n","man = LatLongTract(df, 'LATITUDE', 'LONGITUDE')"]},{"cell_type":"markdown","metadata":{"id":"T5L2W2Gw-3_k"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7PUh8p8t-5N6"},"outputs":[],"source":["mfg_tract = man.groupby(['GEOID10']).size().to_frame(\"MfgCount\").reset_index()"]},{"cell_type":"markdown","metadata":{"id":"63s_52WE-5Xj"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oRM0FubX-6p8"},"outputs":[],"source":["# Line listing\n","with open(dir + 'Homeland infrastructure/HIFLD mfg facilities/NATL_facil_line.csv', 'w') as f:\n","  man.to_csv(f)\n","\n","# Tract summary\n","with open(dir + 'Homeland infrastructure/HIFLD mfg facilities/NATL_facil_tract_agg.csv', 'w') as f:\n","  mfg_tract.to_csv(f)"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"r5Swrt7p_BOZ","executionInfo":{"status":"ok","timestamp":1727815794476,"user_tz":300,"elapsed":1048,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload tract summary\n","\n","mfg = pd.read_csv(dir + 'Homeland infrastructure/HIFLD mfg facilities/NATL_facil_tract_agg.csv', dtype='string')\n","mfg=mfg[mfg.columns.drop(list(mfg.filter(regex='Unnamed')))]\n","\n","frames.append('mfg')"]},{"cell_type":"markdown","metadata":{"id":"I1Sc5pWi9XUE"},"source":["## Power plants - reload\n","\n","https://hifld-geoplatform.opendata.arcgis.com/datasets/power-plants"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"V3v5ppj19YZJ"},"outputs":[],"source":["df = pd.read_csv(dir +\n","                 'Homeland infrastructure/HIFLD EPA FRS power plants/_Environmental_Protection_Agency_(EPA)_Facility_Registry_Service_(FRS)_Power_Plants.csv',\n","                 dtype='string')"]},{"cell_type":"markdown","metadata":{"id":"6HsVIOsWAZ5c"},"source":["### GIS - geocoding function"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"7PrZ9j56Aa4r"},"outputs":[],"source":["power = LatLongTract(df, 'LATITUDE83', 'LONGITUDE8')"]},{"cell_type":"markdown","metadata":{"id":"fxsbpUIYAkel"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"20k5f4edAl0K"},"outputs":[],"source":["power_tract = power.groupby(['GEOID10']).size().to_frame(\"PowerPlantCount\").reset_index()"]},{"cell_type":"markdown","metadata":{"id":"Y9UN0sMuAl-z"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"4zcTlORZAnO2"},"outputs":[],"source":["# Line listing\n","with open(dir + 'Homeland infrastructure/HIFLD EPA FRS power plants/NATL_power_line.csv', 'w') as f:\n","  power.to_csv(f)\n","\n","# Tract summary\n","with open(dir + 'Homeland infrastructure/HIFLD EPA FRS power plants/NATL_power_tract_agg.csv', 'w') as f:\n","  power_tract.to_csv(f)"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"xlbrENDhAyUE","executionInfo":{"status":"ok","timestamp":1727815795327,"user_tz":300,"elapsed":852,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload tract summary\n","\n","power = pd.read_csv(dir + 'Homeland infrastructure/HIFLD EPA FRS power plants/NATL_power_tract_agg.csv', dtype='string')\n","power = power[power.columns.drop(list(power.filter(regex='Unnamed')))]\n","\n","frames.append('power')"]},{"cell_type":"markdown","metadata":{"id":"H_OpP7sC8kNX"},"source":["## Risk Management Plan (RMP) Facilities (originally EPA) -- duplicated effort? Check.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fROm9YyW8r_X"},"outputs":[],"source":["rmp = pd.read_csv(dir +\n","                 'Homeland infrastructure/HIFLD EPA Risk mgmt plan RMP/EPA_Emergency_Response_(ER)_Risk_Management_Plan_(RMP)_Facilities (1).csv',\n","                 dtype='string')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2104,"status":"ok","timestamp":1724269802317,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"},"user_tz":300},"id":"MzylRoFHaN9_","outputId":"2aeac3bd-a623-441e-9d04-2f3038094b0a"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n","/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py:3553: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n","  exec(code_obj, self.user_global_ns, self.user_ns)\n"]}],"source":["# GIS\n","\n","rmp2 = LatLongTract(rmp, 'LATITUDE83', 'LONGITUDE8')"]},{"cell_type":"markdown","metadata":{"id":"2kIQgfNHaiUv"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vJD48JaPaEeZ"},"outputs":[],"source":["rmp_tract = rmp2.groupby(['GEOID10']).size().to_frame(\"RMPCount\").reset_index()"]},{"cell_type":"markdown","metadata":{"id":"NCO9mjfZap0f"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RHMeW9tzagMU"},"outputs":[],"source":["# Tract summary\n","with open(dir + 'Homeland infrastructure/HIFLD EPA Risk mgmt plan RMP/NATL_rmp_tract_agg.csv', 'w') as f:\n","  rmp_tract.to_csv(f)"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"QIE95SxiagVw","executionInfo":{"status":"ok","timestamp":1727815796160,"user_tz":300,"elapsed":835,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload tract summary\n","\n","rmp = pd.read_csv(dir + 'Homeland infrastructure/HIFLD EPA Risk mgmt plan RMP/NATL_rmp_tract_agg.csv', dtype='string')\n","rmp = rmp[rmp.columns.drop(list(rmp.filter(regex='Unnamed')))]\n","\n","frames.append('rmp')"]},{"cell_type":"markdown","metadata":{"id":"PS27TQPm7zqa"},"source":["## Wastewater plants (originally EPA) - reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nd0YmI9J7vHZ"},"outputs":[],"source":["ww = pd.read_csv(dir +\n","                 'Homeland infrastructure/HIFLD EPA Wastewater treatment plants/Wastewater_Treatment_Plants.csv',\n","                 dtype='string')"]},{"cell_type":"markdown","metadata":{"id":"ytHgCz2VER6I"},"source":["### GIS - geocoding function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h6SfuoLMD9Xi"},"outputs":[],"source":["ww['oneline'] = ww['CWP_STREET'] + ' ' + ww['CWP_CITY'] + ' ' + ww['CWP_STATE'] + ' '+ ww['CWP_ZIP']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfZYw6LvxqRD"},"outputs":[],"source":["ww = ww.drop_duplicates(subset=[\"oneline\"])\n","ww = ww.dropna(subset=[\"oneline\"])\n","watertreat = AddLatLongTract(ww)"]},{"cell_type":"markdown","metadata":{"id":"6gG3_nZH8R5U"},"source":["**Errors**\n","Unable to geocode the address:\n","\n","\n","\n","*   Unable to geocode the address: 618 PUBLIC WORKS DR METROPOLIS IL 62960\n","*   Unable to geocode the address: 269-767-1742 SOUTH HAVEN MI 49090\n","*   Unable to geocode the address: 3800 LONGMAN RD EATON OH 45320\n","*   Unable to geocode the address: STATE RTE 3 AND TWP RD 271 MOUNT VERNON OH 43050\n","*   Unable to geocode the address: 3.5 MILS NE OF GARLAND GARLAND OK 00000\n","*   Unable to geocode the address: 200 KIOWA ROAD GREAT BEND KS 67530\n","*   Unable to geocode the address: UNKNOWN UNKNOWN GA 00000\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ERQRhmA2bu0m"},"outputs":[],"source":["watertreat = pd.read_csv(dir + 'Homeland infrastructure/HIFLD EPA Wastewater treatment plants/Wastewater_Treatment_Plants_NATL_line.csv', dtype='string')\n","watertreat=watertreat[watertreat.columns.drop(list(watertreat.filter(regex='Unnamed')))]\n"]},{"cell_type":"markdown","metadata":{"id":"C8RE0YHJE5Bj"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L3jfPCZdwr4o"},"outputs":[],"source":["watertreat2 = watertreat.drop_duplicates(subset=[\"oneline\"])\n","\n","watertreat_tract = watertreat2.groupby(['GEOID10']).size().to_frame(\"WaterTreatCount\").reset_index()"]},{"cell_type":"markdown","metadata":{"id":"0VD6p_Q3EawT"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IhiyrT5Z88Qj"},"outputs":[],"source":["#Line listing\n","with open(dir +\n","          'Homeland infrastructure/HIFLD EPA Wastewater treatment plants/Wastewater_Treatment_Plants_NATL_line.csv',\n","          'w') as f:\n","  watertreat2.to_csv(f)\n","\n","# Tract summary\n","with open(dir +\n","          'Homeland infrastructure/HIFLD EPA Wastewater treatment plants/Wastewater_Treatment_Plants_NATL_tract_agg.csv',\n","          'w') as f:\n","  watertreat_tract.to_csv(f)"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"-QLc0-UGEfgg","executionInfo":{"status":"ok","timestamp":1727815796917,"user_tz":300,"elapsed":758,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload tract summary\n","\n","watertreat = pd.read_csv(dir + 'Homeland infrastructure/HIFLD EPA Wastewater treatment plants/Wastewater_Treatment_Plants_NATL_tract_agg.csv', dtype='string')\n","watertreat=watertreat[watertreat.columns.drop(list(watertreat.filter(regex='Unnamed')))]\n","\n","frames.append('watertreat')"]},{"cell_type":"markdown","source":["# HUD"],"metadata":{"id":"L3PSHm6fwiNH"}},{"cell_type":"code","source":["raw = pd.read_csv(dir + 'HUD/CDBG activity/Community_Development_Block_Grant_Activity_by_Tract.csv')\n","raw['GEOID10'] = raw['GEOID'].astype(str).str[:-2]\n","\n","cols = ['ACQ_COUNT', 'ACQ_FUNDING_AMT']\n","\n","CDBG = raw.groupby(['GEOID10'])[cols].sum()\n","\n","# Add 'CDBG_' prefix to column names\n","new_column_names = ['CDBG_' + col for col in cols]\n","\n","# Rename the columns\n","CDBG.columns = new_column_names\n","\n","CDBG = CDBG.reset_index()\n","\n","frames.append('CDBG')"],"metadata":{"id":"FjQaIhCTwjDD","executionInfo":{"status":"ok","timestamp":1727815843250,"user_tz":300,"elapsed":1077,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xL5YrwxwmhS9"},"source":["# Merge environment data"]},{"cell_type":"code","source":["frames"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ekgq5FZ2Wa8Y","executionInfo":{"status":"ok","timestamp":1727815821594,"user_tz":300,"elapsed":165,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"572f233e-0647-4864-8161-ef433fbd63a1"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['tracts',\n"," 'caces_lur',\n"," 'caces_damage_RCM',\n"," 'caces_spat',\n"," 'climate',\n"," 'ej',\n"," 'NRI',\n"," 'mfg',\n"," 'power',\n"," 'rmp',\n"," 'watertreat',\n"," 'CDBG']"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["print(tracts.shape)\n","print(caces_lur.shape)\n","print(caces_damage_RCM.shape)\n","print(caces_spat.shape)\n","print(climate.shape)\n","print(ej.shape)\n","print(NRI.shape)\n","print(mfg.shape)\n","print(power.shape)\n","print(rmp.shape)\n","print(watertreat.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q7lfL5qrZcBB","executionInfo":{"status":"ok","timestamp":1727815824213,"user_tz":300,"elapsed":157,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"5f969477-b54b-435c-d77c-2e13da0b0799"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["(74002, 1)\n","(85264, 11)\n","(72271, 31)\n","(72042, 64)\n","(74134, 46)\n","(74005, 12)\n","(45746, 42)\n","(36631, 2)\n","(710, 2)\n","(10942, 2)\n","(616, 2)\n"]}]},{"cell_type":"code","execution_count":21,"metadata":{"id":"X_0p-umlfa4q","executionInfo":{"status":"ok","timestamp":1727815848812,"user_tz":300,"elapsed":735,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Convert 'GEOID10' in all DataFrames to numeric\n","\n","for df_name in frames:\n","  # Convert 'GEOID10' to numeric\n","  globals()[df_name]['GEOID10'] = globals()[df_name]['GEOID10'].astype(str)\n","  globals()[df_name]['GEOID10'] = pd.to_numeric(globals()[df_name]['GEOID10'], errors='coerce')"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"M4E5offNfa7z","executionInfo":{"status":"ok","timestamp":1727815854091,"user_tz":300,"elapsed":1613,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Merge all DataFrames on 'GEOID10'\n","\n","merged_df = tracts\n","\n","for df_name in frames:\n","    if df_name != 'tracts':\n","        merged_df = pd.merge(merged_df, globals()[df_name], on='GEOID10', how='left')\n","\n","merged_df = merged_df.drop_duplicates(subset=['GEOID10'])"]},{"cell_type":"code","source":["# Convert the specified columns to numeric, coercing any errors to NaN\n","merged_df[['MfgCount', 'PowerPlantCount', 'WaterTreatCount', 'RMPCount']] = merged_df[['MfgCount', 'PowerPlantCount', 'WaterTreatCount', 'RMPCount']].apply(pd.to_numeric, errors='coerce')\n","\n","# Fill NaN values with 0\n","merged_df[['MfgCount', 'PowerPlantCount', 'WaterTreatCount', 'RMPCount']] = merged_df[['MfgCount', 'PowerPlantCount', 'WaterTreatCount', 'RMPCount']].fillna(0)"],"metadata":{"id":"-RdqwHiUxxU9","executionInfo":{"status":"ok","timestamp":1727815858134,"user_tz":300,"elapsed":168,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4OCf3uD9X1W-"},"source":["## Export and reload final analytic file (census tract)"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"YBKMw0czXzKm","executionInfo":{"status":"ok","timestamp":1727815880968,"user_tz":300,"elapsed":20427,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["with open(curated +  '00030_Environment_pollution_national.csv', 'w') as f:\n","  merged_df.to_csv(f)"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"6AqKVu34XzNv","executionInfo":{"status":"ok","timestamp":1727815886302,"user_tz":300,"elapsed":5335,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}}},"outputs":[],"source":["# Reload\n","\n","env = pd.read_csv(curated +  '00030_Environment_pollution_national.csv', low_memory=False)\n","env = env[env.columns.drop(list(env.filter(regex='Unnamed')))]"]},{"cell_type":"code","source":["cols = env.columns.to_list()\n","print(len(cols))\n","cols"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOHP8c4HkmBR","executionInfo":{"status":"ok","timestamp":1727815886302,"user_tz":300,"elapsed":3,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"312b27e2-8eda-4650-c1df-6075ba76fe10"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["207\n"]},{"output_type":"execute_result","data":{"text/plain":["['GEOID10',\n"," 'bc',\n"," 'co',\n"," 'coa',\n"," 'hoa',\n"," 'no2',\n"," 'o3',\n"," 'pm10',\n"," 'pm25',\n"," 'pnc',\n"," 'so2',\n"," 'nh3_AP2_annual',\n"," 'nh3_EASIUR_annual',\n"," 'nh3_InMAP_annual',\n"," 'nh3_fall',\n"," 'nh3_spring',\n"," 'nh3_summer',\n"," 'nh3_winter',\n"," 'nox_AP2_annual',\n"," 'nox_EASIUR_annual',\n"," 'nox_InMAP_annual',\n"," 'nox_fall',\n"," 'nox_spring',\n"," 'nox_summer',\n"," 'nox_winter',\n"," 'pm25_AP2_annual',\n"," 'pm25_EASIUR_annual',\n"," 'pm25_InMAP_annual',\n"," 'pm25_fall',\n"," 'pm25_spring',\n"," 'pm25_summer',\n"," 'pm25_winter',\n"," 'so2_AP2_annual',\n"," 'so2_EASIUR_annual',\n"," 'so2_InMAP_annual',\n"," 'so2_fall',\n"," 'so2_spring',\n"," 'so2_summer',\n"," 'so2_winter',\n"," 'voc_AP2_annual',\n"," 'voc_InMAP_annual',\n"," 'ec_EGU',\n"," 'ec_biogenic',\n"," 'ec_nonEGU',\n"," 'ec_offroad',\n"," 'ec_onroad',\n"," 'ec_other',\n"," 'ec_total',\n"," 'nh4_EGU',\n"," 'nh4_biogenic',\n"," 'nh4_nonEGU',\n"," 'nh4_offroad',\n"," 'nh4_onroad',\n"," 'nh4_other',\n"," 'nh4_total',\n"," 'no3_EGU',\n"," 'no3_biogenic',\n"," 'no3_nonEGU',\n"," 'no3_offroad',\n"," 'no3_onroad',\n"," 'no3_other',\n"," 'no3_total',\n"," 'oa_EGU',\n"," 'oa_biogenic',\n"," 'oa_nonEGU',\n"," 'oa_offroad',\n"," 'oa_onroad',\n"," 'oa_other',\n"," 'oa_total',\n"," 'pm25_EGU',\n"," 'pm25_biogenic',\n"," 'pm25_nonEGU',\n"," 'pm25_offroad',\n"," 'pm25_onroad',\n"," 'pm25_other',\n"," 'pm25_total',\n"," 'poa_EGU',\n"," 'poa_biogenic',\n"," 'poa_nonEGU',\n"," 'poa_offroad',\n"," 'poa_onroad',\n"," 'poa_other',\n"," 'poa_total',\n"," 'so4_EGU',\n"," 'so4_biogenic',\n"," 'so4_nonEGU',\n"," 'so4_offroad',\n"," 'so4_onroad',\n"," 'so4_other',\n"," 'so4_total',\n"," 'soa_EGU',\n"," 'soa_biogenic',\n"," 'soa_nonEGU',\n"," 'soa_offroad',\n"," 'soa_onroad',\n"," 'soa_other',\n"," 'soa_total',\n"," 'pm25_EGU__naclmd',\n"," 'pm25_biogenic__naclmd',\n"," 'pm25_nonEGU__naclmd',\n"," 'pm25_offroad__naclmd',\n"," 'pm25_onroad__naclmd',\n"," 'pm25_other__naclmd',\n"," 'pm25_total__naclmd',\n"," 'Aggr_loss_rate_NHRI',\n"," 'Aggr_loss_rate_pctile',\n"," 'Aggr_loss_rate_ge90pct_lowinc',\n"," 'Leaky_under_storage',\n"," 'Leaky_under_storage_pctile',\n"," 'Leaky_ge90pct_lowinc',\n"," 'Fire_risk_30yrs',\n"," 'Fire_risk_30yrs_pctile',\n"," 'Fire_ge90pct',\n"," 'Fire_ge90pct_lowinc',\n"," 'Flood_risk_30yrs',\n"," 'Flood_risk_30yrs_pctile',\n"," 'Flood_ge90pct',\n"," 'Flood_ge90pct_lowinc',\n"," 'Impervious_or_crop_pct',\n"," 'Impervious_or_crop_pct_pctile',\n"," 'Impervious_or_crop_ge90pct_pct',\n"," 'Impervious_or_crop_ge90pct_pct_lowinc',\n"," 'Aband_mine_ge1',\n"," 'Aband_mine_ge1_missing',\n"," 'Aband_mine_ge1_lowinc',\n"," 'FUDS_ge1',\n"," 'FUDS_ge1_missing',\n"," 'FUDS_ge1_lowinc',\n"," 'Traffic_prox_volume',\n"," 'Traffic_prox_volume_pctile',\n"," 'Traffic_ge90pct_lowinc',\n"," 'PM25_CEJSCT',\n"," 'PM25_CEJSCT_pctile',\n"," 'PM25_ge90pct_lowinc',\n"," 'Diesel',\n"," 'Diesel_pctile',\n"," 'Diesel_ge90pct_lowinc',\n"," 'WWater_discharge',\n"," 'WWater_discharge_pctile',\n"," 'WWater_ge90pct_lowinc',\n"," 'Hazard_waste_proximity',\n"," 'Hazard_waste_pctile',\n"," 'Hazard_waste_ge90pct_lowinc',\n"," 'Superfund_proximity',\n"," 'Superfund_proximity_pctile',\n"," 'Superfund_ge90pct_lowinc',\n"," 'RMP_proximity',\n"," 'RMP_proximity_pctile',\n"," 'RMP_ge90pct_lowinc',\n"," 'PRE1960PCT',\n"," 'DSLPM',\n"," 'PTRAF',\n"," 'PWDIS',\n"," 'PNPL',\n"," 'PRMP',\n"," 'PTSDF',\n"," 'OZONE',\n"," 'epaPM25',\n"," 'CANCER',\n"," 'RESP',\n"," 'EAL_VALT',\n"," 'EAL_VALB',\n"," 'EAL_VALP',\n"," 'EAL_VALPE',\n"," 'EAL_VALA',\n"," 'ALR_VALB',\n"," 'ALR_VALP',\n"," 'ALR_VALA',\n"," 'ALR_NPCTL',\n"," 'CFLD_AFREQ',\n"," 'CFLD_EALT',\n"," 'CWAV_AFREQ',\n"," 'CWAV_EALT',\n"," 'DRGT_AFREQ',\n"," 'DRGT_EALT',\n"," 'ERQK_AFREQ',\n"," 'ERQK_EALT',\n"," 'HAIL_AFREQ',\n"," 'HAIL_EALT',\n"," 'HWAV_AFREQ',\n"," 'HWAV_EALT',\n"," 'HRCN_AFREQ',\n"," 'HRCN_EALT',\n"," 'ISTM_AFREQ',\n"," 'ISTM_EALT',\n"," 'LNDS_AFREQ',\n"," 'LNDS_EALT',\n"," 'LTNG_AFREQ',\n"," 'LTNG_EALT',\n"," 'SWND_AFREQ',\n"," 'SWND_EALT',\n"," 'TRND_AFREQ',\n"," 'TRND_EALT',\n"," 'TSUN_AFREQ',\n"," 'TSUN_EALT',\n"," 'VLCN_AFREQ',\n"," 'VLCN_EALT',\n"," 'WFIR_AFREQ',\n"," 'WFIR_EALT',\n"," 'WNTW_AFREQ',\n"," 'WNTW_EALT',\n"," 'MfgCount',\n"," 'PowerPlantCount',\n"," 'RMPCount',\n"," 'WaterTreatCount',\n"," 'CDBG_ACQ_COUNT',\n"," 'CDBG_ACQ_FUNDING_AMT']"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["# Restricted"],"metadata":{"id":"tQjI_iNJVr9O"}},{"cell_type":"markdown","metadata":{"id":"gtJilviVVwFB"},"source":["## DEOHS Wash U\n","\n","Must register for access\n","\n","https://deohs.washington.edu/national-transportation-noise-exposure-map"]},{"cell_type":"markdown","source":["### Noise\n","\n","\n","https://deohs.washington.edu/national-transportation-noise-exposure-map\n","\n","Accessed 9/5/2023\n","\n","GEOID - tract ID\n","\n","**Proportions**\n","noise4050p - estimate of proportion of persons exposed to noise LAeq ≥45 to\n","50 dB\n","\n","noise5060p - estimate of proportion of persons exposed to noise LAeq ≥50 to\n","60 dB\n","\n","noise6070p - estimate of proportion of persons exposed to noise LAeq ≥60 to\n","70 dB\n","\n","noise7080p - estimate of proportion of persons exposed to noise LAeq ≥70 to\n","80 dB\n","\n","noise8090p - estimate of proportion of persons exposed to noise LAeq ≥80 to\n","90 dB\n","\n","noise90p - estimate of proportion of persons exposed to noise LAeq ≥90 dB"],"metadata":{"id":"AZQW3zeEVwFB"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMgsEKfsVwFC"},"outputs":[],"source":["# Read the shapefile\n","noise = pd.read_csv(dir + \"Noise/NATL_tract.csv\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zH21n63AVwFC"},"outputs":[],"source":["noise.rename(columns={'GEOID' : 'GEOID10'}, inplace=True)\n","noise.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","# Convert to numeric\n","cols = ['ns4050p', 'ns5060p', 'ns6070p', 'ns7080p', 'ns8090p', 'nois90p', 'ns70_above']\n","noise[cols] = noise[cols].apply(pd.to_numeric, errors='coerce')"]},{"cell_type":"markdown","metadata":{"id":"AZ5FtBzqVwFC"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o6C8OugSVwFC"},"outputs":[],"source":["# Export\n","with open(dir + 'Noise/Noise_NATL.csv', 'w') as f:\n","  noise.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4kUQUZcVVwFC"},"outputs":[],"source":["# Reload\n","noise = pd.read_csv(dir + 'Noise/Noise_NATL.csv')\n","noise.drop(columns=['Unnamed: 0'], inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"4KSDy-obe8_g"},"source":["## IPUMS Environmental summaries\n","\n","Must register for access\n","\n","https://www.nhgis.org/user-resources/environmental-summaries"]},{"cell_type":"markdown","metadata":{"id":"njiVNIAmfE98"},"source":["### Land cover from the National Land Cover Database"]},{"cell_type":"markdown","metadata":{"id":"E8tBWFSuhgub"},"source":["GISJOIN:     GIS Join Match Code\n","AREA:        Tract area\n","  \n","\tPROP11:      Proportion of county covered by land cover class 11, open water\n","\tPROP12:      Proportion of county covered by land cover class 12, perennial ice/snow\n","\tPROP21:      Proportion of county covered by land cover class 21, developed, open space\n","\tPROP22:      Proportion of county covered by land cover class 22, developed, low intensity\n","\tPROP23:      Proportion of county covered by land cover class 23, developed, medium intensity\n","\tPROP24:      Proportion of county covered by land cover class 24, developed, high intensity\n","\tPROP31:      Proportion of county covered by land cover class 31, barren land (rock/sand/clay)\n","\tPROP41:      Proportion of county covered by land cover class 41, deciduous forest\n","\tPROP42:      Proportion of county covered by land cover class 42, evergreen forest\n","\tPROP43:      Proportion of county covered by land cover class 43, mixed forest\n","\tPROP52:      Proportion of county covered by land cover class 52, shrub/scrub\n","\tPROP71:      Proportion of county covered by land cover class 71, grassland/herbaceous   \n","\tPROP81:      Proportion of county covered by land cover class 81, pasture/hay\n","\tPROP82:      Proportion of county covered by land cover class 82, cultivated crops\n","\tPROP90:      Proportion of county covered by land cover class 90, woody wetlands\n","\tPROP95:      Proportion of county covered by land cover class 95, emergent herbaceous wetlands"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mo6Kp91ufDkH"},"outputs":[],"source":["nlcd = pd.read_csv(dir + 'IPUMS/Land cover/us_tract_2010_nlcd_timevariesbyrow/US_tract_2010_nlcd.csv')\n","\n","# Create GEOID10\n","nlcd['GEOID10'] = nlcd['GISJOIN'].astype(str).str[-11:]\n","nlcd['GEOID10'] = pd.to_numeric(nlcd['GEOID10'], errors='coerce')\n","\n","# Keep most recent year (2011)\n","nlcd = nlcd[nlcd['YEAR'] == 2011]\n","\n","# Keep proportion but not area columns\n","\n","droppy = nlcd.filter(regex=r'AREA\\d{2}', axis=1).columns\n","nlcd.drop(columns=droppy, inplace=True)\n","\n","nlcd.drop(columns=['OID', 'GISJOIN', 'YEAR', 'AREA'], inplace=True)\n","\n","# Better names\n","newnames = {\n","  'PROP11' : 'open_water',\n","'PROP12' : 'perennial_ice_snow',\n","'PROP21' : 'developed_open_space',\n","'PROP22' : 'developed_low_intensity',\n","'PROP23' : 'developed_medium_intensity',\n","'PROP24' : 'developed_high_intensity',\n","'PROP31' : 'barren_land _rock_sand_clay',\n","'PROP41' : 'deciduous_forest',\n","'PROP42' : 'evergreen_forest',\n","'PROP43' : 'mixed_forest',\n","'PROP52' : 'shrub_scrub',\n","'PROP71' : 'grassland_herbaceous',\n","'PROP81' : 'pasture_hay',\n","'PROP82' : 'cultivated_crops',\n","'PROP90' : 'woody_wetlands',\n","'PROP95' : 'emergent_herbaceous_wetlands'\n","}\n","\n","nlcd.rename(columns=newnames, inplace=True)"]},{"cell_type":"markdown","source":["## Merge"],"metadata":{"id":"UCrXVrDFV94m"}},{"cell_type":"code","source":["env_rest = pd.merge(merged_df, nlcd, on='GEOID10', how='left')\n","env_rest = pd.merge(env_rest, noise, on='GEOID10', how='left')"],"metadata":{"id":"k1R9hDVJV_Jm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OBVR9k-rgzi7"},"source":["## Export and reload restricted file"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mVMFqww1gyGi"},"outputs":[],"source":["with open(curated +  '00030_Environment_pollution_natl_RESTRICTED.csv', 'w') as f:\n","  env_rest.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XFQp30SMg6Cb"},"outputs":[],"source":["# Reload\n","\n","env = pd.read_csv(curated +  '00030_Environment_pollution_natl_RESTRICTED.csv', low_memory=False)\n","env=env[env.columns.drop(list(env.filter(regex='Unnamed')))]"]},{"cell_type":"markdown","source":["# Data check"],"metadata":{"id":"7S_2OsKHlZ7Q"}},{"cell_type":"markdown","source":["## Identify constants"],"metadata":{"id":"v-zeLPj7leiz"}},{"cell_type":"code","source":["constant_columns = [col for col in env.columns if env[col].nunique() == 1]\n","\n","constant_columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vi5LTv79lgK8","executionInfo":{"status":"ok","timestamp":1727110454618,"user_tz":300,"elapsed":234,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"e2970b21-a819-485e-b041-3f00b820aa4e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['ec_biogenic',\n"," 'nh4_biogenic',\n"," 'no3_biogenic',\n"," 'poa_biogenic',\n"," 'so4_biogenic',\n"," 'Aband_mine_ge1',\n"," 'PowerPlantCount',\n"," 'WaterTreatCount',\n"," 'barren_land _rock_sand_clay',\n"," 'mixed_forest',\n"," 'grassland_herbaceous',\n"," 'pasture_hay',\n"," 'woody_wetlands']"]},"metadata":{},"execution_count":126}]},{"cell_type":"code","source":["# env['Aband_mine_ge1'].value_counts(dropna=False)\n","# env['barren_land _rock_sand_clay'].value_counts(dropna=False)\n","# env['mixed_forest'].value_counts(dropna=False)\n","# env['grassland_herbaceous'].value_counts(dropna=False)\n","# env['pasture_hay'].value_counts(dropna=False)\n","env['woody_wetlands'].value_counts(dropna=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"Homqzt-4l2H5","executionInfo":{"status":"ok","timestamp":1725023112345,"user_tz":300,"elapsed":170,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"49295d7a-0931-451a-d72b-ccbf84362eb5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["woody_wetlands\n","NaN     100799\n","0.01         1\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>woody_wetlands</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>NaN</th>\n","      <td>100799</td>\n","    </tr>\n","    <tr>\n","      <th>0.01</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","source":["For all of the above: there are no False values, only NULLs. Keep the variables"],"metadata":{"id":"eDxehAiOmEdp"}},{"cell_type":"markdown","source":["## Identify duplicated information across variables"],"metadata":{"id":"MFqhwB1Algqx"}},{"cell_type":"code","source":["from itertools import combinations\n","\n","# Get all pairs of columns\n","column_pairs = combinations(env.columns, 2)\n","\n","# Find pairs of columns that are identical\n","identical_pairs = [(col1, col2) for col1, col2 in column_pairs if env[col1].equals(env[col2])]\n","\n","# Display the identical pairs\n","identical_pairs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LTH9tFUmljvV","executionInfo":{"status":"ok","timestamp":1727110459421,"user_tz":300,"elapsed":4807,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"0f762f48-ee10-440d-9bc1-070b83fb09c8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('ec_biogenic', 'nh4_biogenic'),\n"," ('ec_biogenic', 'no3_biogenic'),\n"," ('ec_biogenic', 'poa_biogenic'),\n"," ('ec_biogenic', 'so4_biogenic'),\n"," ('nh4_biogenic', 'no3_biogenic'),\n"," ('nh4_biogenic', 'poa_biogenic'),\n"," ('nh4_biogenic', 'so4_biogenic'),\n"," ('no3_biogenic', 'poa_biogenic'),\n"," ('no3_biogenic', 'so4_biogenic'),\n"," ('oa_biogenic', 'soa_biogenic'),\n"," ('poa_biogenic', 'so4_biogenic'),\n"," ('PowerPlantCount', 'WaterTreatCount'),\n"," ('perennial_ice_snow', 'shrub_scrub'),\n"," ('perennial_ice_snow', 'cultivated_crops'),\n"," ('perennial_ice_snow', 'emergent_herbaceous_wetlands'),\n"," ('shrub_scrub', 'cultivated_crops'),\n"," ('shrub_scrub', 'emergent_herbaceous_wetlands'),\n"," ('cultivated_crops', 'emergent_herbaceous_wetlands')]"]},"metadata":{},"execution_count":127}]},{"cell_type":"markdown","source":["## Duplicated tract rows?"],"metadata":{"id":"IsXucqx2PDTd"}},{"cell_type":"code","source":["len(env['GEOID10'])-len(env['GEOID10'].drop_duplicates())"],"metadata":{"id":"_snV4IEcPGkh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727110459421,"user_tz":300,"elapsed":8,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"d7e21198-242b-4693-e88d-0afd507513ad"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":128}]}],"metadata":{"colab":{"collapsed_sections":["qShwotrtnI7O","h2KxVCdA9CJr","e5u_7BrRxsTM","70_6OUMTfUze","flc_Z8d0eSpm"],"provenance":[{"file_id":"19ijH9TAKV4y69TUZRz4RNdIMGBd7C6Cb","timestamp":1707848781799},{"file_id":"1ZW6tMQc3rYNaGqTCG7-Y_KbR_ml3b8zY","timestamp":1681152703009}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}