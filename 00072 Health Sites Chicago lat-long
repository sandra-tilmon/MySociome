{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Clinical sites, categorized\n","## Sandra Tilmon\n","## 12/14/2023\n","\n","\n","#### Change log:\n","Date        Change\n","\n"],"metadata":{"id":"glVhXZ7TQcQw"}},{"cell_type":"markdown","source":["# Setup"],"metadata":{"id":"w-wFg3vbQhW9"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","import math\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import scipy.stats\n","\n","import seaborn as sns\n","\n","import os\n","import re\n","from functools import reduce\n","import requests\n","\n","import geopandas as gpd\n","from shapely.geometry import shape, Point\n","import geopy\n","from geopy.extra.rate_limiter import RateLimiter\n","from geopy import geocoders\n","from geopy.geocoders import GoogleV3\n","\n","from timeit import default_timer as timer\n","\n","pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)\n","pd.set_option('display.width', None)\n","\n","# No scientific notation\n","pd.options.display.float_format = '{:.2f}'.format\n","\n","%matplotlib inline"],"metadata":{"id":"bTxTigPpQiaa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Mount drive\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cdtRfzGDQidI","executionInfo":{"status":"ok","timestamp":1718999344638,"user_tz":300,"elapsed":1450,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"4d392546-6eb3-49ea-eae3-73c8fad478fc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["!pip install pycodestyle pycodestyle_magic\n","!pip install flake8\n","%load_ext pycodestyle_magic"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pFw3PDP0JxL6","executionInfo":{"status":"ok","timestamp":1718999361272,"user_tz":300,"elapsed":15270,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"710a2386-22cd-48e2-9b17-0866c15430f9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pycodestyle in /usr/local/lib/python3.10/dist-packages (2.12.0)\n","Collecting pycodestyle_magic\n","  Downloading pycodestyle_magic-0.5-py2.py3-none-any.whl (9.5 kB)\n","Installing collected packages: pycodestyle_magic\n","Successfully installed pycodestyle_magic-0.5\n","Requirement already satisfied: flake8 in /usr/local/lib/python3.10/dist-packages (7.1.0)\n","Requirement already satisfied: mccabe<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from flake8) (0.7.0)\n","Requirement already satisfied: pycodestyle<2.13.0,>=2.12.0 in /usr/local/lib/python3.10/dist-packages (from flake8) (2.12.0)\n","Requirement already satisfied: pyflakes<3.3.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from flake8) (3.2.0)\n"]}]},{"cell_type":"code","source":["# Raw data sources\n","dir = '/content/gdrive/My Drive/Sociome_Folder/Data/'\n","print(dir)\n","\n","# Output curated datasets\n","curated = '/content/gdrive/My Drive/Sociome_Folder/Data Commons/Curated datasets/'\n","curated"],"metadata":{"id":"nVizcNs5Qifu","executionInfo":{"status":"ok","timestamp":1718999376926,"user_tz":300,"elapsed":186,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"colab":{"base_uri":"https://localhost:8080/","height":52},"outputId":"482482eb-52fe-4f59-8135-c93ca81e8207"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/gdrive/My Drive/Sociome_Folder/Data/\n"]},{"output_type":"execute_result","data":{"text/plain":["'/content/gdrive/My Drive/Sociome_Folder/Data Commons/Curated datasets/'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UlHplTnJQUkH","executionInfo":{"status":"ok","timestamp":1718999411716,"user_tz":300,"elapsed":280,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f9d05086-3587-44a5-94cd-b78e0c2a523b"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:1: W391 blank line at end of file\n"]}],"source":["%%pycodestyle\n","# Empty list to collect dataframe names\n","frames = []"]},{"cell_type":"markdown","source":["# Functions"],"metadata":{"id":"oqU0nl-2Q00A"}},{"cell_type":"code","source":["%%pycodestyle\n","# Lat/long coordinates to census tract\n","\n","def LatLongTract(infile, lat, long):\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile[long], infile[lat])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)\n","\n","\n","# One line street address to lat/long coordinates and census tract\n","\n","def AddLatLongTract(infile):\n","\n","  # Create \"oneline\" address in cleaning \"123 N Main Street Chicago, IL 60000\"\n","  # Field names vary so not bothering to include here\n","\n","  g = geocoders.GoogleV3(api_key='')\n","\n","  def Gv3_latlong (address):\n","      location = g.geocode(address)\n","      lat = location.latitude\n","      long = location.longitude\n","      # Perform additional steps to obtain census tract from coordinates\n","      # census_tract = get_census_tract_from_coordinates(latitude, longitude)\n","      return lat, long, location\n","\n","  infile[['lat', 'long', 'Location']] = infile['oneline'].apply(Gv3_latlong).apply(pd.Series)\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID10 to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)\n","\n"],"metadata":{"id":"CEu51AzoQvFV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Chicago Data Portal"],"metadata":{"id":"fwcXNQZDRraC"}},{"cell_type":"markdown","source":["## Primary care -- reloaded from 66 Health"],"metadata":{"id":"6w-krPlURsqV"}},{"cell_type":"code","source":["%%pycodestyle\n","# Reload tract summary\n","primary = pd.read_csv(dir + '1 Chicago and Cook County data/PrimaryCare_Line.csv', dtype='string')\n","primary.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","primary = primary[['facility', 'fqhc_look_alike_or_neither_special_notes', 'latitude', 'longitude', 'oneline', 'GEOID10', 'commarea']]\n","primary.head()\n","\n","# Step 3: Run black on the file\n","!black primary_care_data.py\n","\n","# Step 4: Display the formatted code (optional)\n","!cat primary_care_data.py"],"metadata":{"id":"pRrxJw20RuxX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718999388334,"user_tz":300,"elapsed":162,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"f2c4c2ad-695b-4229-ce0c-a78331b1f12d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:3:80: E501 line too long (98 > 79 characters)\n","INFO:pycodestyle:6:80: E501 line too long (134 > 79 characters)\n","INFO:pycodestyle:15:1: W391 blank line at end of file\n"]}]},{"cell_type":"code","source":["%%pycodestyle\n","# pd.set_option('display.max_colwidth', None)\n","primary['fqhc_look_alike_or_neither_special_notes'].value_counts(dropna=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bVNB5J7_TgBF","executionInfo":{"status":"ok","timestamp":1718999465029,"user_tz":300,"elapsed":167,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"34ec9d1e-20c6-4562-a6b6-f6aa3f7ff79b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:1: W391 blank line at end of file\n"]}]},{"cell_type":"code","source":["%%pycodestyle\n","primary['Category'] = np.where(primary['fqhc_look_alike_or_neither_special_notes'].str.contains(\"FQHC\", case=False), \"Primary care: FQHC\", None)\n","primary['Category'] = np.where(primary['fqhc_look_alike_or_neither_special_notes'].str.contains(\"look alike\", case=False), \"Primary care: FQHC\", primary['Category'])\n","primary['Category'] = np.where(primary['fqhc_look_alike_or_neither_special_notes'].str.contains(\"government clinic\", case=False), \"Primary care: Government clinic\", primary['Category'])\n","primary['Category'] = np.where(primary['fqhc_look_alike_or_neither_special_notes'].str.contains(\"free clinic\", case=False), \"Primary care: Free clinic\", primary['Category'])\n","primary['Category'] = primary['Category'].fillna(\"Other\")\n","\n","pd.crosstab(primary['fqhc_look_alike_or_neither_special_notes'], primary['Category'])\n","\n","# Step 3: Run black on the file\n","!black primary_care_data.py\n","\n","# Step 4: Display the formatted code (optional)\n","!cat primary_care_data.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"plEgemX1rYIA","executionInfo":{"status":"ok","timestamp":1718999471357,"user_tz":300,"elapsed":188,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"de88c5e2-b74d-4f39-bba8-2643b5eb7c70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:2:80: E501 line too long (144 > 79 characters)\n","INFO:pycodestyle:3:80: E501 line too long (165 > 79 characters)\n","INFO:pycodestyle:4:80: E501 line too long (185 > 79 characters)\n","INFO:pycodestyle:5:80: E501 line too long (173 > 79 characters)\n","INFO:pycodestyle:8:80: E501 line too long (85 > 79 characters)\n","INFO:pycodestyle:15:1: W391 blank line at end of file\n"]}]},{"cell_type":"markdown","source":["lic = lic[['Category', 'Name', 'Address', 'LATITUDE', 'LONGITUDE', 'GEOID10', 'commarea']]"],"metadata":{"id":"WAB5zuWYtTDM"}},{"cell_type":"code","source":["%%pycodestyle\n","primary = primary.rename(columns={'facility': 'Name', 'oneline': 'Address',\n","                                  'latitude': 'LATITUDE', 'longitude': 'LONGITUDE'})\n","# Reorder\n","primary = primary[['Category', 'Name', 'Address', 'LATITUDE', 'LONGITUDE', 'GEOID10', 'commarea']]\n","primary.head()\n","\n","# Step 3: Run black on the file\n","!black primary_care_data.py\n","\n","# Step 4: Display the formatted code (optional)\n","!cat primary_care_data.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vDQMSCx2tEIS","executionInfo":{"status":"ok","timestamp":1718999488026,"user_tz":300,"elapsed":147,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"a0cc87c9-95bf-41d0-b27c-28a8e7060030"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:80: E501 line too long (84 > 79 characters)\n","INFO:pycodestyle:6:80: E501 line too long (98 > 79 characters)\n","INFO:pycodestyle:14:1: W391 blank line at end of file\n"]}]},{"cell_type":"code","source":["%%pycodestyle\n","frames.append('primary')\n","frames"],"metadata":{"id":"EAbsZFMbRu0n","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718999510596,"user_tz":300,"elapsed":157,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"5b68854e-e910-48d5-8d87-0522cf80972c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:1: W391 blank line at end of file\n"]}]},{"cell_type":"markdown","source":["# HIFLD"],"metadata":{"id":"m2nHNSKkQ-2D"}},{"cell_type":"markdown","source":["## Hospitals - reloaded from 66 Health"],"metadata":{"id":"srX7sCqoRCSO"}},{"cell_type":"code","source":["%%pycodestyle\n","# Reload line listings\n","hosp = pd.read_csv(dir + 'Homeland infrastructure/HIFLD Hospitals/HospCookLine.csv', dtype='string')\n","hosp.drop(columns=['Unnamed: 0'], inplace=True)\n","hosp.head()"],"metadata":{"id":"k4KKImI5QvIl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718999528461,"user_tz":300,"elapsed":158,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"f5a35d5f-40fb-42c2-a7fc-c73ee3573795"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:3:80: E501 line too long (100 > 79 characters)\n","INFO:pycodestyle:6:1: W391 blank line at end of file\n"]}]},{"cell_type":"code","source":["%%pycodestyle\n","hosp['TYPE'].value_counts(dropna=False)\n","hosp['Category'] = 'Hospital: ' + hosp['TYPE']"],"metadata":{"id":"XUKj3fykt7L_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718999595778,"user_tz":300,"elapsed":144,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"162cb675-9269-49e7-d7b8-be78ae92dd33"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:1: W391 blank line at end of file\n"]}]},{"cell_type":"code","source":["# Reorder\n","hosp = hosp.rename(columns={'NAME': 'Name', 'ADDRESS':'Address'})\n","hosp = hosp[['Category', 'Name', 'Address', 'LATITUDE', 'LONGITUDE', 'GEOID10', 'commarea']]"],"metadata":{"id":"-0cCqEwOtruT","colab":{"base_uri":"https://localhost:8080/","height":367},"executionInfo":{"status":"error","timestamp":1718999607597,"user_tz":300,"elapsed":160,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"e8cc3490-81d4-4858-f4e7-c5df7be620c6"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"too many values to unpack (expected 3)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-42-adcfa0d48490>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pycodestyle'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"\\n# Reorder\\nhosp = hosp.rename(columns={'NAME': 'Name', 'ADDRESS':'Address'})\\nhosp = hosp[['Category', 'Name', 'Address', 'LATITUDE', 'LONGITUDE', 'GEOID10', 'commarea']]\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_shell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m    332\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m       \u001b[0mcell\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m' '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2471\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2472\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2473\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2474\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2475\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycodestyle_magic.py\u001b[0m in \u001b[0;36mpycodestyle\u001b[0;34m(line, cell, auto)\u001b[0m\n\u001b[1;32m    173\u001b[0m         \u001b[0;31m#logger.info(line)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m         \u001b[0;31m# on windows drive path also contains :\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 175\u001b[0;31m         \u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m':'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    176\u001b[0m         \u001b[0;31m# do not subtract 1 for line for %%pycodestyle, inc pre py3.6 string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mauto\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 3)"]}]},{"cell_type":"code","source":["%%pycodestyle\n","frames.append('hosp')\n","frames"],"metadata":{"id":"3uCt38xZRNJS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718999619743,"user_tz":300,"elapsed":144,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"870abf4b-7be5-407b-9c55-18e8491ec685"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:1: W391 blank line at end of file\n"]}]},{"cell_type":"markdown","source":["## Rx -- reloaded from 66 Health"],"metadata":{"id":"GBiywgSLROg8"}},{"cell_type":"code","source":["%%pycodestyle\n","\n","# Reload\n","rx = pd.read_csv(dir + 'Homeland infrastructure/RX open facilities/ChicagoRx_line.csv', dtype='string')\n","\n","rx['Zip'] = rx['Zip'].str[:5]\n","\n","rx['Address2'] = rx['Address'] + ' ' + rx['City'] + ' ' + rx['State'] + ' ' + rx['Zip']\n","rx = rx.rename(columns={'Address':'Boop'})\n","rx = rx.rename(columns={'Address2': 'Address', 'latitude': 'LATITUDE', 'longitude': 'LONGITUDE'})\n","rx['Category'] = 'Pharmacy'\n","\n","rx = rx[['Category', 'Name', 'Address', 'LATITUDE', 'LONGITUDE', 'GEOID10', 'commarea']]\n","\n","rx.head()"],"metadata":{"id":"gSRTPM28RQRz","executionInfo":{"status":"error","timestamp":1718999628264,"user_tz":300,"elapsed":192,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"colab":{"base_uri":"https://localhost:8080/","height":469},"outputId":"87f76df0-3f46-4f53-8cca-7414a3a8e1ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:80: E501 line too long (103 > 79 characters)\n","INFO:pycodestyle:8:80: E501 line too long (87 > 79 characters)\n"]},{"output_type":"error","ename":"ValueError","evalue":"too many values to unpack (expected 3)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-45-890aa82b7faf>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pycodestyle'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"\\n# Reload\\nrx = pd.read_csv(dir + 'Homeland infrastructure/RX open facilities/ChicagoRx_line.csv', dtype='string')\\n\\nrx['Zip'] = rx['Zip'].str[:5]\\n\\nrx['Address2'] = rx['Address'] + ' ' + rx['City'] + ' ' + rx['State'] + ' ' + rx['Zip']\\nrx = rx.rename(columns={'Address':'Boop'})\\nrx = rx.rename(columns={'Address2': 'Address', 'latitude': 'LATITUDE', 'longitude': 'LONGITUDE'})\\nrx['Category'] = 'Pharmacy'\\n\\nrx = rx[['Category', 'Name', 'Address', 'LATITUDE', 'LONGITUDE', 'GEOID10', 'commarea']]\\n\\nrx.head()\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_shell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m    332\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m       \u001b[0mcell\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m' '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2471\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2472\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2473\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2474\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2475\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycodestyle_magic.py\u001b[0m in \u001b[0;36mpycodestyle\u001b[0;34m(line, cell, auto)\u001b[0m\n\u001b[1;32m    173\u001b[0m         \u001b[0;31m#logger.info(line)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m         \u001b[0;31m# on windows drive path also contains :\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 175\u001b[0;31m         \u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m':'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    176\u001b[0m         \u001b[0;31m# do not subtract 1 for line for %%pycodestyle, inc pre py3.6 string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mauto\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 3)"]}]},{"cell_type":"code","source":["%%pycodestyle\n","frames.append('rx')\n","frames"],"metadata":{"id":"0T18IICtRZgU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718999632799,"user_tz":300,"elapsed":171,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"ff200af2-fac7-408e-e409-e500a442c058"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:1: W391 blank line at end of file\n"]}]},{"cell_type":"markdown","source":["# HRSA"],"metadata":{"id":"pbBJ2ZqdRk9I"}},{"cell_type":"markdown","source":["## FQHCs -- reloaded from 66 Health"],"metadata":{"id":"0zQOwRyJRaoj"}},{"cell_type":"code","source":["%%pycodestyle\n","# Reload tract summary\n","fqhc = pd.read_csv(dir + 'HRSA/FQHC_ChicagoLine.csv', dtype='string')\n","\n","fqhc = fqhc.rename(columns={'Category': 'Cat', 'lat':'LATITUDE', 'long': 'LONGITUDE',\n","                            'oneline': 'Address'})\n","\n","fqhc['Category'] = 'FQHC: ' + fqhc['Cat']\n","\n","# Reorder\n","fqhc = fqhc[['Category', 'Name', 'Address', 'LATITUDE', 'LONGITUDE', 'GEOID10', 'commarea']]\n","\n","fqhc.head()"],"metadata":{"id":"mc4efBziRfNq","colab":{"base_uri":"https://localhost:8080/","height":418},"executionInfo":{"status":"error","timestamp":1718999666027,"user_tz":300,"elapsed":151,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"61d5df86-c1bb-45b0-8a89-e762754d1ee6"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"too many values to unpack (expected 3)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-2262933f64d7>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pycodestyle'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"# Reload tract summary\\nfqhc = pd.read_csv(dir + 'HRSA/FQHC_ChicagoLine.csv', dtype='string')\\n\\nfqhc = fqhc.rename(columns={'Category': 'Cat', 'lat':'LATITUDE', 'long': 'LONGITUDE',\\n                            'oneline': 'Address'})\\n\\nfqhc['Category'] = 'FQHC: ' + fqhc['Cat']\\n\\n# Reorder\\nfqhc = fqhc[['Category', 'Name', 'Address', 'LATITUDE', 'LONGITUDE', 'GEOID10', 'commarea']]\\n\\nfqhc.head()\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_shell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m    332\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m       \u001b[0mcell\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m' '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2471\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2472\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2473\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2474\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2475\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycodestyle_magic.py\u001b[0m in \u001b[0;36mpycodestyle\u001b[0;34m(line, cell, auto)\u001b[0m\n\u001b[1;32m    173\u001b[0m         \u001b[0;31m#logger.info(line)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m         \u001b[0;31m# on windows drive path also contains :\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 175\u001b[0;31m         \u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m':'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    176\u001b[0m         \u001b[0;31m# do not subtract 1 for line for %%pycodestyle, inc pre py3.6 string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mauto\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 3)"]}]},{"cell_type":"code","source":["%%pycodestyle\n","frames.append('fqhc')\n","frames"],"metadata":{"id":"ytufSR6IRmkY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718999672133,"user_tz":300,"elapsed":200,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"ae5de359-97b3-43fd-c761-0213ed09a6ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:1: W391 blank line at end of file\n"]}]},{"cell_type":"markdown","source":["# Merge"],"metadata":{"id":"6JVP0LZsv6DC"}},{"cell_type":"code","source":["%%pycodestyle\n","# frames\n","frames2 = [primary, hosp, rx, fqhc]"],"metadata":{"id":"ASXCBQzXv66J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718999680169,"user_tz":300,"elapsed":288,"user":{"displayName":"Alicia Severiano","userId":"08178484405510010935"}},"outputId":"cfef76e5-8772-4d12-f173-afd032e18468"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:pycodestyle:4:1: W391 blank line at end of file\n"]}]},{"cell_type":"code","source":["Health_sites66 = pd.concat(frames2, axis=0)\n","Health_sites66.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"qJ_ECbIkv97Q","executionInfo":{"status":"ok","timestamp":1718993235487,"user_tz":300,"elapsed":147,"user":{"displayName":"Evan Hart","userId":"09923212880057092266"}},"outputId":"6a9351ce-db49-429c-d83a-8d6ad3d41ce3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                        Category                                            Name  \\\n","185  FQHC: Service Delivery Site  Esperanza Academy for Global Citizenship Annex   \n","186  FQHC: Service Delivery Site               Esperanza at Cultivate Collective   \n","187  FQHC: Service Delivery Site           IMAN - Youth and Family Health Center   \n","188  FQHC: Service Delivery Site                                  IMAN-Main Site   \n","189  FQHC: Service Delivery Site                       IMAN Mobile  Health  Unit   \n","\n","                                               Address    LATITUDE           LONGITUDE  \\\n","185  4941 W 46th St RM 100 Chicago, IL           60...  41.8091394  -87.74684549999999   \n","186     4350 S Laporte Ave Chicago, IL           60638   41.813403           -87.74739   \n","187    2749 W 63rd St Chicago, IL           60629-2342  41.7788903         -87.6929145   \n","188    2744 W 63rd St Chicago, IL           60629-2343   41.779335  -87.69281819999999   \n","189    2744 W 63rd St Chicago, IL           60629-2343   41.779335  -87.69281819999999   \n","\n","         GEOID10 commarea  \n","185  17031560200       56  \n","186  17031560200       56  \n","187  17031660600       66  \n","188  17031835000       66  \n","189  17031835000       66  "],"text/html":["\n","  <div id=\"df-4a1325d1-13a3-4e4b-ae51-44f7e1fb6d71\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Category</th>\n","      <th>Name</th>\n","      <th>Address</th>\n","      <th>LATITUDE</th>\n","      <th>LONGITUDE</th>\n","      <th>GEOID10</th>\n","      <th>commarea</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>185</th>\n","      <td>FQHC: Service Delivery Site</td>\n","      <td>Esperanza Academy for Global Citizenship Annex</td>\n","      <td>4941 W 46th St RM 100 Chicago, IL           60...</td>\n","      <td>41.8091394</td>\n","      <td>-87.74684549999999</td>\n","      <td>17031560200</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>186</th>\n","      <td>FQHC: Service Delivery Site</td>\n","      <td>Esperanza at Cultivate Collective</td>\n","      <td>4350 S Laporte Ave Chicago, IL           60638</td>\n","      <td>41.813403</td>\n","      <td>-87.74739</td>\n","      <td>17031560200</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>187</th>\n","      <td>FQHC: Service Delivery Site</td>\n","      <td>IMAN - Youth and Family Health Center</td>\n","      <td>2749 W 63rd St Chicago, IL           60629-2342</td>\n","      <td>41.7788903</td>\n","      <td>-87.6929145</td>\n","      <td>17031660600</td>\n","      <td>66</td>\n","    </tr>\n","    <tr>\n","      <th>188</th>\n","      <td>FQHC: Service Delivery Site</td>\n","      <td>IMAN-Main Site</td>\n","      <td>2744 W 63rd St Chicago, IL           60629-2343</td>\n","      <td>41.779335</td>\n","      <td>-87.69281819999999</td>\n","      <td>17031835000</td>\n","      <td>66</td>\n","    </tr>\n","    <tr>\n","      <th>189</th>\n","      <td>FQHC: Service Delivery Site</td>\n","      <td>IMAN Mobile  Health  Unit</td>\n","      <td>2744 W 63rd St Chicago, IL           60629-2343</td>\n","      <td>41.779335</td>\n","      <td>-87.69281819999999</td>\n","      <td>17031835000</td>\n","      <td>66</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a1325d1-13a3-4e4b-ae51-44f7e1fb6d71')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4a1325d1-13a3-4e4b-ae51-44f7e1fb6d71 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4a1325d1-13a3-4e4b-ae51-44f7e1fb6d71');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-acc19697-f25a-4e0f-8ccd-0cc7f0bc4696\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-acc19697-f25a-4e0f-8ccd-0cc7f0bc4696')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-acc19697-f25a-4e0f-8ccd-0cc7f0bc4696 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"Health_sites66\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"FQHC: Service Delivery Site\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Esperanza at Cultivate Collective\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"4350 S Laporte Ave Chicago, IL           60638\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LATITUDE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"41.813403\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LONGITUDE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"-87.74739\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID10\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"17031560200\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"commarea\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"66\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["# Export and reload"],"metadata":{"id":"PrlcpL0IxWtx"}},{"cell_type":"code","source":["with open(curated +  '00072_Health_sites_Chicago_lat_long.csv', 'w') as f:\n","  Health_sites66.to_csv(f)"],"metadata":{"id":"DZFSF0SCxX_Z"},"execution_count":null,"outputs":[]}]}