{"cells":[{"cell_type":"markdown","metadata":{"id":"GUZfQbsoQH-Y"},"source":["# Making public environment/pollution file for Chicago\n","## Sandra Tilmon\n","## 4/10/2023\n","\n","\n","#### Change log:\n","\n","Date        Change\n","\n","\n","**Future work**\n","\n","* Environmental inspections https://data.cityofchicago.org/Environment-Sustainable-Development/CDPH-Environmental-Inspections/i9rk-duva\n","\n"]},{"cell_type":"markdown","metadata":{"id":"yiWW2iv3QW-K"},"source":["# Setup"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4Tq7gpEVQaPr"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","\n","# Utilities\n","import datetime\n","import math\n","import os\n","import re\n","from functools import reduce\n","from timeit import default_timer as timer\n","\n","from sklearn.preprocessing import StandardScaler\n","\n","import ast\n","import json\n","import requests\n","\n","# Visualization\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# GIS\n","import geopandas as gpd\n","from shapely import geometry\n","from shapely.geometry import Point, shape\n","from geopy import geocoders\n","from geopy.geocoders import GoogleV3\n","\n","pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)\n","pd.set_option('display.width', None)\n","pd.set_option('display.max_colwidth', None)\n","\n","pd.options.display.float_format = '{:.2f}'.format\n","\n","%matplotlib inline"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20009,"status":"ok","timestamp":1734104383930,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"},"user_tz":360},"id":"XlLhWh5HPpOf","outputId":"3c5b6823-9543-46d3-cdaa-5ad3b24e3b7b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["# Mount drive\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cRe762enQa9v"},"outputs":[],"source":["# Raw data sources\n","dir = '/content/gdrive/My Drive/Sociome_Folder/Data/'\n","\n","# Output curated datasets\n","curated = '/content/gdrive/My Drive/Sociome_Folder/Data Commons/Curated datasets/'"]},{"cell_type":"code","source":["# Empty list for dataframes later\n","\n","frames = []"],"metadata":{"id":"0n8BLrA2OJkk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"P6lswaJDh8w4"},"source":["# GIS"]},{"cell_type":"markdown","metadata":{"id":"Ihydkv9NnAnv"},"source":["## Set CRS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"odMMv2GInCA5"},"outputs":[],"source":["crs = {'init' :'epsg:3435'}"]},{"cell_type":"markdown","metadata":{"id":"xeqcgHnfd4-x"},"source":["## Import census tract shapefile"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2230,"status":"ok","timestamp":1727121007628,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"},"user_tz":300},"id":"tnVIDiv0m7z6","outputId":"b06988e3-66c6-482f-ae93-bc1f910f9376"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n"]}],"source":["# Census tracts\n","\n","r = requests.get(\"https://data.cityofchicago.org/resource/74p9-q2aq.json\")\n","r.raise_for_status()\n","\n","data = r.json()\n","for d in data:\n","    d['the_geom'] = shape(d['the_geom'])\n","\n","tracts_shp = gpd.GeoDataFrame(data).set_geometry('the_geom', crs=crs)\n","\n","tracts_shp = tracts_shp.drop(columns=['statefp10', 'countyfp10', 'tractce10',\t'name10', 'namelsad10',\n","                                      'notes', 'commarea_n'])\n","\n","tracts_shp.rename(columns={'geoid10' : 'GEOID10'}, inplace=True)\n","\n","tracts_shp['GEOID10'] = pd.to_numeric(tracts_shp['GEOID10'])"]},{"cell_type":"code","source":["tractsdf = pd.DataFrame(tracts_shp)\n","tractsdf.drop(columns=['the_geom'], inplace=True)\n","tractsdf = tractsdf.rename(columns={'geoid10':'GEOID10'})\n","\n","frames.append('tractsdf')"],"metadata":{"id":"jVCaQsBMOPjS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WB8zCYTLaclQ"},"source":["## Functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nYgeZb_Oad5H"},"outputs":[],"source":["# Lat/long coordinates to census tract\n","\n","def LatLongTract(infile, lat, long):\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile[long], infile[lat])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)\n","\n","\n","\n","# One line street address to lat/long coordinates and census tract\n","\n","def AddLatLongTract(infile):\n","\n","  # Create \"oneline\" address in cleaning \"123 N Main Street Chicago, IL 60000\"\n","  # Field names vary so not bothering to include here\n","\n","  g = geocoders.GoogleV3(api_key='')\n","\n","  def Gv3_latlong (address):\n","      location = g.geocode(address)\n","      lat = location.latitude\n","      long = location.longitude\n","      # Perform additional steps to obtain census tract from coordinates\n","      # census_tract = get_census_tract_from_coordinates(latitude, longitude)\n","      return lat, long, location\n","\n","  infile[['lat', 'long', 'Location']] = infile['oneline'].apply(Gv3_latlong).apply(pd.Series)\n","\n","  # establish lat/long point geometry\n","  geometry = [Point(xy) for xy in zip(infile['long'], infile['lat'])]\n","\n","  # Make a geo dataframe, set CRS\n","  gdf = gpd.GeoDataFrame(infile, geometry=geometry)\n","  gdf = gdf.set_crs(crs)\n","\n","  # Intersect lat/long points and census tract\n","  result=gpd.sjoin(gdf, tracts_shp, how='left', op='within')\n","\n","  result.drop(columns=['index_right'], inplace=True)\n","\n","  # Standardize census tract GEOID10 to uppercase throughout notebooks\n","  result.rename(columns={\"geoid10\" : \"GEOID10\"}, inplace=True)\n","  return(result)"]},{"cell_type":"markdown","source":["# ACS denominator"],"metadata":{"id":"qShwotrtnI7O"}},{"cell_type":"code","source":["acs1519 = pd.read_csv(dir + \"Census Data/ACS/2021 Planning Database/pdb2021trv3_us.csv\", encoding='latin-1')\n","\n","# Limit to Cook County for speed\n","acs1519 = acs1519[(acs1519['State']==17) & (acs1519['County']==31)]\n","\n","# Rename\n","acs1519 = acs1519.rename(columns={'GIDTR':'GEOID10'})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YU5LPc_wnLPo","executionInfo":{"status":"ok","timestamp":1726517627519,"user_tz":300,"elapsed":7783,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"8063d90e-3e0d-4b80-9d72-e252854a4ebc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-139-9543e3f9da9f>:1: DtypeWarning: Columns (286) have mixed types. Specify dtype option on import or set low_memory=False.\n","  acs1519 = pd.read_csv(dir + \"Census Data/ACS/2021 Planning Database/pdb2021trv3_us.csv\", encoding='latin-1')\n"]}]},{"cell_type":"markdown","metadata":{"id":"8tVQlqFja-G1"},"source":["# Import national file and limit to Chicago"]},{"cell_type":"code","source":["# Import national dataset as df\n","\n","df = pd.read_csv(curated + \"00030_Environment_pollution_national.csv\",\n","                 encoding='latin-1',\n","                 low_memory=False)\n","\n","# Convert 'GEOID10' to numeric\n","df['GEOID10'] = pd.to_numeric(df['GEOID10'], errors='coerce')\n","\n","# Join to Chicago tracts to limit to the city\n","natl = pd.merge(df, tractsdf, on=['GEOID10'], how='right')\n","\n","frames.append('natl')"],"metadata":{"id":"CzTjWsx6P3bL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XPMRHQ1nSg_8"},"source":["# *1 Chicago datamart*"]},{"cell_type":"markdown","metadata":{"id":"pVVlAfO6qZxD"},"source":["## Asbestos - reload\n","\n","https://data.cityofchicago.org/Environment-Sustainable-Development/CDPH-Asbestos-and-Demolition-Notification/qhb4-qx8k/about_data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BJOYQWBFqc7T"},"outputs":[],"source":["raw = pd.read_csv(dir + '1 Chicago datamart/CDPH_Asbestos_and_Demolition_Notification.csv',\n","                  dtype='string')"]},{"cell_type":"markdown","metadata":{"id":"Kf9YPvMatcn_"},"source":["### GIS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u0KufVF5tj1j"},"outputs":[],"source":["# Dataset has mixed information: latitude/longitude is missing\n","temp1 = raw[raw['LATITUDE'].isnull()]\n","\n","# Rows have latitude/longitude\n","temp2 = raw[raw['LATITUDE'].notnull()]"]},{"cell_type":"markdown","source":["#### Geocode from address"],"metadata":{"id":"k2_BTf09R5uR"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"urIJtd6ztj98"},"outputs":[],"source":["temp1['oneline'] = temp1['ADDRESS'] + ' ' + 'CHICAGO, IL'\n","temp1 = AddLatLongTract(temp1)"]},{"cell_type":"markdown","source":["#### Geocode from lat/long"],"metadata":{"id":"cnt4jgS5SEuJ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"s8blGcrXvWEq"},"outputs":[],"source":["temp2 = LatLongTract(temp2, \"LATITUDE\", \"LONGITUDE\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IflsLC4ZvlBu"},"outputs":[],"source":["cols = ['NOTIFICATION TYPE', 'ADDRESS',  'OWNER/APPLICANT', 'START DATE', 'END DATE',\n","        'DATA SOURCE', 'LATITUDE', 'LONGITUDE', 'geometry', 'GEOID10', 'commarea']\n","\n","temp1_ = temp1.drop(columns=['LATITUDE', 'LONGITUDE'])\n","temp1_.rename(columns={'lat': 'LATITUDE', 'long': 'LONGITUDE'}, inplace=True)\n","\n","temp1_ = pd.DataFrame(temp1_[cols])\n","\n","temp2_ = pd.DataFrame(temp2[cols])\n","\n","frames = [temp1_, temp2_]\n","\n","asb = pd.concat(frames)"]},{"cell_type":"markdown","metadata":{"id":"Ft07a4jhx0vG"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v0x3RAevtkJT"},"outputs":[],"source":["asb['date'] = pd.to_datetime(asb['START DATE'])\n","asb['year'] = asb['date'].dt.year\n","asb['month'] = asb['date'].dt.month\n","\n","# Tract and year\n","asb_tractYr = asb.groupby(['GEOID10', 'year']).size().to_frame('asb_counts').reset_index()\n","\n","# Tract, year, and month\n","asb_tractYrMo = asb.groupby(['GEOID10', 'year', 'month']).size().to_frame('asb_counts').reset_index()\n","\n","# Tract, no time\n","asb_tract = asb.groupby(['GEOID10']).size().to_frame('asb_counts').reset_index()"]},{"cell_type":"markdown","metadata":{"id":"Up20iYAqyo2G"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2OR6SF5NyoO1"},"outputs":[],"source":["# Export line listing\n","with open(dir + '1 Chicago datamart/asbestos_line.csv', 'w') as f:\n","  asb.to_csv(f)\n","\n"," # Export tract averages\n","with open(dir + '1 Chicago datamart/asbestos_tract.csv', 'w') as f:\n","  asb_tract.to_csv(f)\n","\n","# Export tract/year averages\n","with open(dir + '1 Chicago datamart/asbestos_tract_yr.csv', 'w') as f:\n","  asb_tractYr.to_csv(f)\n","\n","# Export tract/year/month averages\n","with open(dir + '1 Chicago datamart/asbestos_tract_yrmo.csv', 'w') as f:\n","  asb_tractYrMo.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b1cmUJHny1xO"},"outputs":[],"source":["# Reload tract average\n","asb = pd.read_csv(dir + '1 Chicago datamart/asbestos_tract.csv', dtype='string')\n","asb = asb.rename(columns={'asb_counts': 'asbestosN'})\n","asb.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('asb')"]},{"cell_type":"markdown","metadata":{"id":"KKEPOHn91sIZ"},"source":["## Environmental complaints - reload\n","\n","https://data.cityofchicago.org/Environment-Sustainable-Development/CDPH-Environmental-Complaints/fypr-ksnz"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KwZWr63BVX_B"},"outputs":[],"source":["raw = pd.read_csv(dir + '1 Chicago datamart/CDPH_Environmental_Complaints_20231117.csv', dtype='string')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oFA0x3er-jEc"},"outputs":[],"source":["# Custom function to extract latitude and longitude\n","def extract_lat_lon(location):\n","    # Check if the location format is valid\n","    if isinstance(location, str) and location.startswith(\"POINT (\") and location.endswith(\")\"):\n","        # Extract latitude and longitude\n","        lat_lon = location.strip('POINT ()').split(' ')\n","        if len(lat_lon) == 2:\n","            return lat_lon[1], lat_lon[0]  # returning lat, long (in that order)\n","\n","    # Return None for invalid or unexpected formats\n","    return None, None\n","\n","# Create new columns 'lat' and 'long'\n","raw[['lat', 'long']] = pd.DataFrame(raw['LOCATION'].apply(lambda x: pd.Series(extract_lat_lon(x))))"]},{"cell_type":"markdown","metadata":{"id":"mwj4LT6YqtOy"},"source":["### GIS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T7N_CWgiquo5"},"outputs":[],"source":["env = LatLongTract(raw, \"lat\", \"long\")"]},{"cell_type":"markdown","metadata":{"id":"1h0FGB-2qv5x"},"source":["### Summarize by tract"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4IdsXKN6Hm9k"},"outputs":[],"source":["env['date'] = pd.to_datetime(env['COMPLAINT DATE'])\n","env['year'] = env['date'].dt.year\n","env['month'] = env['date'].dt.month\n","\n","# Categorize\n","env['comp_air'] = env['COMPLAINT TYPE'].str.contains(\"air\", case=False).astype(int)\n","env['comp_noise'] = env['COMPLAINT TYPE'].str.contains(\"noise\", case=False).astype(int)\n","env['comp_dumping'] = env['COMPLAINT TYPE'].str.contains(\"dumping\", case=False).astype(int)\n","env['comp_hazard'] = env['COMPLAINT TYPE'].str.contains(\"hazardous\", case=False).astype(int)\n","env['comp_asbestos'] = env['COMPLAINT TYPE'].str.contains(\"asbestos\", case=False).astype(int)\n","env['comp_construction'] = env['COMPLAINT TYPE'].str.contains(\"construction\", case=False).astype(int)\n","env['comp_recycling'] = env['COMPLAINT TYPE'].str.contains(\"recycling\", case=False).astype(int)\n","env['comp_water'] = env['COMPLAINT TYPE'].str.contains(\"water\", case=False).astype(int)\n","env['comp_serv_stat'] = env['COMPLAINT TYPE'].str.contains(\"service stations\", case=False).astype(int)\n","env['comp_idling'] = env['COMPLAINT TYPE'].str.contains(\"idling\", case=False).astype(int)\n","env['comp_abandon'] = env['COMPLAINT TYPE'].str.contains(\"abandoned\", case=False).astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"40qh0BGbqnMg"},"outputs":[],"source":["# Tract and year\n","env_tractYr = env.groupby(['GEOID10', 'year'])[['comp_air', 'comp_noise', 'comp_dumping', 'comp_hazard',\n","                                               'comp_asbestos', 'comp_construction', 'comp_recycling', 'comp_water',\n","                                               'comp_serv_stat', 'comp_idling', 'comp_abandon']].sum().reset_index()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1LrncOD8rTcN"},"outputs":[],"source":["# Tract, year, and month\n","env_tractYrMo = env.groupby(['GEOID10', 'year', 'month'])[['comp_air', 'comp_noise', 'comp_dumping', 'comp_hazard',\n","                                               'comp_asbestos', 'comp_construction', 'comp_recycling', 'comp_water',\n","                                               'comp_serv_stat', 'comp_idling', 'comp_abandon']].sum().reset_index()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mJ1N1HNjqnVK"},"outputs":[],"source":["# Tract only, no time\n","env_tract = env.groupby(['GEOID10'])[['comp_air', 'comp_noise', 'comp_dumping', 'comp_hazard',\n","                                               'comp_asbestos', 'comp_construction', 'comp_recycling', 'comp_water',\n","                                               'comp_serv_stat', 'comp_idling', 'comp_abandon']].sum().reset_index()"]},{"cell_type":"markdown","metadata":{"id":"AW2iAJRWsQIz"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FLCTq_O4qncv"},"outputs":[],"source":["# Export line listing\n","with open(dir + '1 Chicago datamart/env_complaints_line.csv', 'w') as f:\n","  env.to_csv(f)\n","\n"," # Export tract averages\n","with open(dir + '1 Chicago datamart/env_complaints_tract.csv', 'w') as f:\n","  env_tract.to_csv(f)\n","\n","# Export tract/year averages\n","with open(dir + '1 Chicago datamart/env_complaints_tract_yr.csv', 'w') as f:\n","  env_tractYr.to_csv(f)\n","\n","# Export tract/year/month averages\n","with open(dir + '1 Chicago datamart/env_complaints_tract_yrmo.csv', 'w') as f:\n","  env_tractYrMo.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6PORqeERshJP"},"outputs":[],"source":["# Reload tract average\n","env = pd.read_csv(dir + '1 Chicago datamart/env_complaints_tract.csv', dtype='string')\n","env.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('env')"]},{"cell_type":"markdown","metadata":{"id":"x6OMompfxp2i"},"source":["## Take industrial sites only from  business licenses\n","\n","Processed in business and economy file"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jydX-GwGxqN7"},"outputs":[],"source":["# Reload census tract counts of categorized business licenses\n","licagg = pd.read_csv(dir + '1 Chicago datamart/Business licenses/Chicago_bus_lic_tract_agg.csv',\n","                     dtype='string')\n","licagg.drop(columns=['Unnamed: 0'], inplace=True)\n","licagg = licagg.rename(columns={'Count': 'BusLicCount', 'Manufacturing': 'MfgLicCount', 'Hazardous': 'HazLicCount',\n","                                'ETOH': 'ETOHLicCount', 'Childcare':'ChildcareLicCount'})\n","\n","# Keep only hazardous count for the environment/pollution file\n","licagg = licagg[['GEOID10', 'HazLicCount']]\n","\n","frames.append('licagg')"]},{"cell_type":"markdown","metadata":{"id":"k3969HRIwsQN"},"source":["## Parks - reload\n","\n","581 parks\n","\n","https://data.cityofchicago.org/resource/2eaw-bdhe"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vF58dVWPxqfI"},"outputs":[],"source":["url = 'https://data.cityofchicago.org/resource/2eaw-bdhe.json'\n","parks = pd.read_json(url)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7niUvraHiZHE"},"outputs":[],"source":["# Remove columns containing \"computed\" in column name\n","filtered_columns = [col for col in parks.columns if 'computed' not in col]\n","parks = parks[filtered_columns]"]},{"cell_type":"code","source":["select = ['wheelchair_accessible_ball_fields',\n","          'baseball_jr_softball_t_ball', 'baseball_sr',\n","          'baseball_batting_cages', 'fitness_center', 'community_garden',\n","          'gymnasium', 'pool_outdoor', 'basketball_backboards',\n","          'basketball_courts','playground','fitness_courses', 'track',\n","          'garden']\n","\n","temp = parks.groupby(['park_name'])[select].sum().reset_index()"],"metadata":{"id":"49SlOGlekAtI"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-7Yb-ciSWROh"},"outputs":[],"source":["# Count amenities vs. columns to keep\n","cols = parks.columns.to_list()\n","\n","# Non-amenities\n","nonamen = ['park_name', 'park_class','location','ward','zip',\n","           'street_address','acres', 'street_address',\n","           'park_number', 'label']\n","\n","# Amenities\n","amen = [item for item in cols if item not in nonamen]\n","\n","selecty = select + amen\n","\n","# Count amenities\n","parks['amenities_n'] = parks[amen].sum(axis=1)\n","parks.drop(columns=amen, inplace=True)\n","\n","# Join with select columns\n","parks2 = parks.merge(temp, on='park_name')"]},{"cell_type":"markdown","metadata":{"id":"bLtRDQqBmlif"},"source":["### GIS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yaDF6ONbjLxm"},"outputs":[],"source":["parks2['location'] = parks2['location'].astype(str)\n","\n","# Extracting specific lat/long patterns into different columns\n","parks2[['latitude']] = parks2['location'].str.extract(r\"'latitude': '(.*?)'\")\n","parks2[['longitude']] = parks2['location'].str.extract(r\"'longitude': '(.*?)'\")\n","\n","parks2.drop(columns=['location'], inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0rsRoJKIaVBR","executionInfo":{"status":"ok","timestamp":1726517188162,"user_tz":300,"elapsed":139,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6f0ce484-8fb8-4280-e874-2604122fbcc1"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n","  in_crs_string = _prepare_from_proj_string(in_crs_string)\n","/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py:3553: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n","  exec(code_obj, self.user_global_ns, self.user_ns)\n"]}],"source":["parks2 =  LatLongTract(parks2, \"latitude\", \"longitude\")"]},{"cell_type":"markdown","metadata":{"id":"K5LhgNKpzIDH"},"source":["### Summarize by tract"]},{"cell_type":"code","source":["parks2['GEOID10'] = pd.to_numeric(parks2['GEOID10'], errors='coerce')"],"metadata":{"id":"JDN-eJz7o4oh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["parks2.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RB-GbRi-cbAf","executionInfo":{"status":"ok","timestamp":1726517200731,"user_tz":300,"elapsed":146,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"f8a74e79-c22f-4712-e1c2-5cad9ef9642a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(581, 28)"]},"metadata":{},"execution_count":120}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zTMcbUBozHWA","executionInfo":{"status":"ok","timestamp":1726517635042,"user_tz":300,"elapsed":154,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e21984da-fcda-4e2c-eea1-b12715311c35"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-140-6515478fa877>:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  denom['Land_acres'] = denom['LAND_AREA'] * 640\n","<ipython-input-140-6515478fa877>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  denom.drop(columns=['LAND_AREA'], inplace=True)\n"]}],"source":["denom = acs1519[['GEOID10', 'LAND_AREA']]\n","\n","# Convert ACS square miles to acres\n","denom['Land_acres'] = denom['LAND_AREA'] * 640\n","denom.drop(columns=['LAND_AREA'], inplace=True)\n","\n","parks2['ParkAcres'] = parks2['acres'].astype(float)\n","parks2['ParksAmenitiesN'] = parks2['amenities_n'].astype(float)\n","\n","parksn = parks2.groupby(['GEOID10']).size().to_frame(\"ParkCount\").reset_index()\n","\n","parks_desc = parks2.groupby(['GEOID10'])[[\n","    'ParkAcres', 'ParksAmenitiesN', 'wheelchair_accessible_ball_fields',\n","    'baseball_jr_softball_t_ball', 'baseball_sr', 'baseball_batting_cages',\n","    'fitness_center', 'community_garden', 'gymnasium', 'pool_outdoor',\n","    'basketball_backboards','basketball_courts','playground',\n","    'fitness_courses', 'track', 'garden']].sum().round(2)\n","\n","# Merge\n","merged_parks = tractsdf\n","merged_parks = pd.merge(merged_parks, parksn, on='GEOID10', how='left')\n","merged_parks = pd.merge(merged_parks, denom, on='GEOID10', how='left')\n","merged_parks = pd.merge(merged_parks, parks_desc, on='GEOID10', how='left')"]},{"cell_type":"code","source":["# Relative parks to area\n","merged_parks['ParkAcres_land'] = (\n","    merged_parks['ParkAcres'] / merged_parks['Land_acres'])\n","merged_parks['Parks_per_acre'] = (\n","    merged_parks['ParkCount'] / merged_parks['ParkAcres'])\n","\n","# Reorder\n","parks_agg_tract2 = merged_parks[[\n","    'GEOID10', 'ParkCount', 'Land_acres', 'ParkAcres',  'ParkAcres_land',\n","    'Parks_per_acre', 'ParksAmenitiesN','wheelchair_accessible_ball_fields',\n","    'baseball_jr_softball_t_ball', 'baseball_sr', 'baseball_batting_cages',\n","    'fitness_center', 'community_garden', 'gymnasium', 'pool_outdoor',\n","    'basketball_backboards', 'basketball_courts', 'playground',\n","    'fitness_courses', 'track', 'garden']]"],"metadata":{"id":"QBSqynJOpuL9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sRKNc-lmnKVx"},"source":["### Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kTKKxFtvnLj6"},"outputs":[],"source":["# # Export line listing\n","with open(dir + '1 Chicago datamart/parks_tract.csv', 'w') as f:\n","  parks2.to_csv(f)\n","\n","# Export tract summary\n","with open(dir + '1 Chicago datamart/parks_agg_tract.csv', 'w') as f:\n","  parks_agg_tract2.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cT39c-J60Fe4"},"outputs":[],"source":["# Reload line listing\n","parks_line = pd.read_csv(dir + '1 Chicago datamart/parks_tract.csv', dtype='string')\n","parks_line.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","# Reload tract summary\n","parks = pd.read_csv(dir + '1 Chicago datamart/parks_agg_tract.csv', dtype='string')\n","parks=parks[parks.columns.drop(list(parks.filter(regex='Unnamed')))]\n","\n","frames.append('parks')"]},{"cell_type":"markdown","metadata":{"id":"vx7Hr9IdgOiF"},"source":["# ChiVes: Tree cover, NDVI -- reload\n","\n","https://chichives.com/\n","\n","https://www.usgs.gov/landsat-missions/landsat-normalized-difference-vegetation-index"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UOfsGQDMxGit"},"outputs":[],"source":["chives = pd.read_csv(dir + '1 Chicago datamart/ChiVes/chives-data-minusNU.csv',\n","                     dtype='string')\n","\n","cols = chives.columns\n","\n","chives.rename(columns={'geoid': 'GEOID10'}, inplace=True)\n","\n","chives = chives[[\n","    'GEOID10', 'zip_code', 'commarea_n', 'aland',\n","    # Blue space\n","    'awater',\n","    # Green space details\n","    'trees_n', 'trees_area', 'trees_den', 'trees_crown_den',\n","    'simpson', 'specCt', 'uniqSp', 'ndvi',\n","    # Flooding\n","    'urban_flood_suscep',\n","    # Heat islad\n","    'heatisl',\n","    # Traffic\n","    'logtraf', 'logtrafScld',\n","    # Summer PM2.5\n","    'nn_q3_pm2_5',\n","    # Housing\n","    'HPRICETIER', 'median_rent', 'median_home_value',\n","    'cost_burdened_total','cost_burdened_owners_renters',\n","    # Crowding\n","    'pop_density (sq.mi.)', 'percentage_overcrowding',\n","    # Property type\n","    'city_property_tot', 'hardship', 'prop_comm', 'prop_plndev',\n","    'prop_resdntl',\n","    # Redlining\n","    'proportionA', 'proportionB', 'proportionC', 'proportionD',\n","    'proportionCorD','primary_grade_4levels',\t'primary_grade_3levels'\n","    ]]\n","\n","c = ['proportionA', 'proportionB', 'proportionC', 'proportionD', 'proportionCorD',\n","     'primary_grade_4levels',\t'primary_grade_3levels']\n","\n","chives[c] = chives[c].fillna('0')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a4qfP9jFZPkk"},"outputs":[],"source":["ChivesPollution = chives[[\n","    'GEOID10', 'zip_code', 'commarea_n',\n","    'trees_n', 'trees_area', 'trees_den', 'trees_crown_den',\n","    'heatisl', 'ndvi',\n","    'logtraf', 'logtrafScld', 'nn_q3_pm2_5',\n","    'aland', 'awater']]"]},{"cell_type":"code","source":["# Standardize select variables\n","\n","from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","\n","cols = ['trees_den', 'trees_crown_den']\n","ChivesPollution[cols] =  ChivesPollution[cols].apply(pd.to_numeric)\n","\n","ChivesPollution['trees_denStd'] = scaler.fit_transform(\n","    ChivesPollution['trees_den'].values.reshape(-1,1))\n","ChivesPollution['trees_crown_denStd'] = scaler.fit_transform(\n","    ChivesPollution['trees_crown_den'].values.reshape(-1,1))"],"metadata":{"id":"PcrnY45AwVVT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F81ACgIuFRHF"},"source":["## Export and reload"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"owPpPZ0NVs8C"},"outputs":[],"source":["# Export\n","with open(dir + '1 Chicago datamart/ChiVes/ChivesPollution.csv', 'w') as f:\n","  ChivesPollution.to_csv(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RNuIWqeegZ1G"},"outputs":[],"source":["# Reload pollution (and green space)\n","ChivesPollution = pd.read_csv(dir + '1 Chicago datamart/ChiVes/ChivesPollution.csv', dtype='string')\n","ChivesPollution.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","frames.append('ChivesPollution')"]},{"cell_type":"markdown","metadata":{"id":"xL5YrwxwmhS9"},"source":["# Merge pollution data"]},{"cell_type":"code","source":["frames"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LcTM0rWA3f10","executionInfo":{"status":"ok","timestamp":1727121046450,"user_tz":300,"elapsed":178,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"8856c93c-ec69-41af-94de-6eea40496047"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['tractsdf', 'natl', 'asb', 'env', 'licagg', 'parks', 'ChivesPollution']"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4E5offNfa7z"},"outputs":[],"source":["tractsdf['GEOID10'] = pd.to_numeric(tractsdf['GEOID10'], errors='coerce')\n","\n","# Convert 'GEOID10' in all DataFrames to numeric\n","for df_name in frames:\n","  # Convert 'GEOID10' to  numeric\n","  globals()[df_name]['GEOID10'] = pd.to_numeric(globals()[df_name]['GEOID10'], errors='coerce')\n","\n","# Merge all DataFrames on 'GEOID10'\n","\n","merged_df = tractsdf\n","\n","for df_name in frames:\n","    if df_name != 'tractsdf':\n","        merged_df = pd.merge(merged_df, globals()[df_name],\n","                             on='GEOID10',\n","                             how='outer')"]},{"cell_type":"markdown","source":["# Bring in spatial clusters"],"metadata":{"id":"veg9teTb46eH"}},{"cell_type":"code","source":["filenames = ['diesel_4_clus.csv', 'heat_5q.csv', 'ndvi_4_clus.csv', 'epapm25_5q_clus.csv',\n","             'resp_3_clus.csv', 'ptsdf_5_clus.csv', 'prmp_6_clus.csv', 'pnlp_3_clus.csv',\n","             'pwdis_3_clus.csv', 'ptraf_4_clus.csv', 'so2_9_clus.csv', 'tree_5_clus.csv',\n","             'no2_9_clus.csv']\n","\n","dfs = []\n","\n","# Importing and cleaning each CSV file\n","for filename in filenames:\n","    df = pd.read_csv(dir + filename)\n","\n","    # Remove \"Unnamed: 0\" column if present\n","    if 'Unnamed: 0' in df.columns:\n","        df.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","    # Convert GEOID10 to int\n","    if 'GEOID10' in df.columns:\n","        df['GEOID10'] = df['GEOID10'].astype(int)\n","\n","    # Append cleaned dataframe to list\n","    dfs.append(df)\n","\n","# Merge dataframes on GEOID10\n","clus = pd.concat(dfs, ignore_index=True).groupby('GEOID10').sum()\n","clus.drop(columns=['PTSDFStd'], inplace=True)"],"metadata":{"id":"rTDIgOjQ6hgh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["poll2 = pd.merge(merged_df, clus, on='GEOID10', how='left')"],"metadata":{"id":"LJHNh3KN6iKr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Data check"],"metadata":{"id":"7S_2OsKHlZ7Q"}},{"cell_type":"markdown","source":["## Remove columns which are completely missing"],"metadata":{"id":"q6nwh09Fg6Ht"}},{"cell_type":"code","source":["poll2 = poll2.dropna(axis=1, how='all')"],"metadata":{"id":"ha4O-Nrlg8Xn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Identify constants"],"metadata":{"id":"v-zeLPj7leiz"}},{"cell_type":"code","source":["constant_columns = [col for col in poll2.columns if poll2[col].nunique() == 1]\n","\n","# Inspect\n","for col in constant_columns:\n","    print(f\"Value counts for {col}:\")\n","    print(poll2[col].value_counts(dropna=False))\n","    print(\"\\n\")  # Add a new line"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vi5LTv79lgK8","executionInfo":{"status":"ok","timestamp":1727110944528,"user_tz":300,"elapsed":241,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"b4c2229c-71e5-45d1-9c8d-ce7d8a349eb1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Value counts for nh3_AP2_annual:\n","nh3_AP2_annual\n","1797312.63    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nh3_EASIUR_annual:\n","nh3_EASIUR_annual\n","262210.29    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nh3_fall:\n","nh3_fall\n","222186.80    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nh3_spring:\n","nh3_spring\n","243458.61    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nh3_summer:\n","nh3_summer\n","193478.57    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nh3_winter:\n","nh3_winter\n","389717.18    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nox_AP2_annual:\n","nox_AP2_annual\n","9156.24    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nox_EASIUR_annual:\n","nox_EASIUR_annual\n","32742.37    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nox_fall:\n","nox_fall\n","25009.83    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nox_spring:\n","nox_spring\n","63531.37    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nox_summer:\n","nox_summer\n","16422.90    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for nox_winter:\n","nox_winter\n","26005.39    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for pm25_AP2_annual:\n","pm25_AP2_annual\n","459557.54    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for pm25_EASIUR_annual:\n","pm25_EASIUR_annual\n","496335.68    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for pm25_fall:\n","pm25_fall\n","403762.21    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for pm25_spring:\n","pm25_spring\n","593736.81    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for pm25_summer:\n","pm25_summer\n","505801.71    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for pm25_winter:\n","pm25_winter\n","482042.00    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for so2_AP2_annual:\n","so2_AP2_annual\n","66227.63    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for so2_EASIUR_annual:\n","so2_EASIUR_annual\n","35547.12    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for so2_fall:\n","so2_fall\n","20621.80    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for so2_spring:\n","so2_spring\n","61406.77    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for so2_summer:\n","so2_summer\n","40625.43    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for so2_winter:\n","so2_winter\n","19534.49    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for voc_AP2_annual:\n","voc_AP2_annual\n","43952.42    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for ec_biogenic:\n","ec_biogenic\n","0.00    797\n","NaN       4\n","Name: count, dtype: int64\n","\n","\n","Value counts for nh4_biogenic:\n","nh4_biogenic\n","0.00    797\n","NaN       4\n","Name: count, dtype: int64\n","\n","\n","Value counts for no3_biogenic:\n","no3_biogenic\n","0.00    797\n","NaN       4\n","Name: count, dtype: int64\n","\n","\n","Value counts for poa_biogenic:\n","poa_biogenic\n","0.00    797\n","NaN       4\n","Name: count, dtype: int64\n","\n","\n","Value counts for so4_biogenic:\n","so4_biogenic\n","0.00    797\n","NaN       4\n","Name: count, dtype: int64\n","\n","\n","Value counts for Aggr_loss_rate_ge90pct_lowinc:\n","Aggr_loss_rate_ge90pct_lowinc\n","False    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for Aband_mine_ge1_missing:\n","Aband_mine_ge1_missing\n","False    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for Aband_mine_ge1_lowinc:\n","Aband_mine_ge1_lowinc\n","False    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for PowerPlantCount:\n","PowerPlantCount\n","0.00    801\n","Name: count, dtype: int64\n","\n","\n","Value counts for WaterTreatCount:\n","WaterTreatCount\n","0.00    801\n","Name: count, dtype: int64\n","\n","\n"]}]},{"cell_type":"markdown","source":["### Drop"],"metadata":{"id":"IH_zB7IkfwtM"}},{"cell_type":"code","source":["# Drop constants\n","# poll2.drop(columns=constant_columns, inplace=True)"],"metadata":{"id":"to920i9nfxpy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Identify duplicated information across variables"],"metadata":{"id":"MFqhwB1Algqx"}},{"cell_type":"code","source":["from itertools import combinations\n","\n","# Get all pairs of columns\n","column_pairs = combinations(poll2.columns, 2)\n","\n","# Find pairs of columns that are identical\n","identical_pairs = [(col1, col2) for col1, col2 in column_pairs if poll2[col1].equals(poll2[col2])]\n","\n","# Display the identical pairs\n","identical_pairs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LTH9tFUmljvV","executionInfo":{"status":"ok","timestamp":1727110962514,"user_tz":300,"elapsed":1360,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"bd06bff9-b8c8-4d93-b0df-cb18f4559f09"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('commarea_x', 'commarea_y'),\n"," ('ec_biogenic', 'nh4_biogenic'),\n"," ('ec_biogenic', 'no3_biogenic'),\n"," ('ec_biogenic', 'poa_biogenic'),\n"," ('ec_biogenic', 'so4_biogenic'),\n"," ('nh4_biogenic', 'no3_biogenic'),\n"," ('nh4_biogenic', 'poa_biogenic'),\n"," ('nh4_biogenic', 'so4_biogenic'),\n"," ('no3_biogenic', 'poa_biogenic'),\n"," ('no3_biogenic', 'so4_biogenic'),\n"," ('oa_biogenic', 'soa_biogenic'),\n"," ('poa_biogenic', 'so4_biogenic'),\n"," ('Aggr_loss_rate_ge90pct_lowinc', 'Aband_mine_ge1_missing'),\n"," ('Aggr_loss_rate_ge90pct_lowinc', 'Aband_mine_ge1_lowinc'),\n"," ('Aband_mine_ge1_missing', 'Aband_mine_ge1_lowinc'),\n"," ('PowerPlantCount', 'WaterTreatCount'),\n"," ('trees_den', 'trees_denStd'),\n"," ('trees_crown_den', 'trees_crown_denStd')]"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["poll2.drop(columns=['Unnamed: 0', 'commarea_y',  'zip_code',\n"," 'commarea_n',\n"," 'community'], inplace=True)\n","poll2.columns.to_list()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"12tTwfEA00kF","executionInfo":{"status":"ok","timestamp":1727121083332,"user_tz":300,"elapsed":356,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"a66b0014-c41b-4fea-ac2b-e7510fff7b0f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['GEOID10',\n"," 'commarea_x',\n"," 'bc',\n"," 'co',\n"," 'coa',\n"," 'hoa',\n"," 'no2',\n"," 'o3',\n"," 'pm10',\n"," 'pm25',\n"," 'pnc',\n"," 'so2',\n"," 'nh3_AP2_annual',\n"," 'nh3_EASIUR_annual',\n"," 'nh3_InMAP_annual',\n"," 'nh3_fall',\n"," 'nh3_spring',\n"," 'nh3_summer',\n"," 'nh3_winter',\n"," 'nox_AP2_annual',\n"," 'nox_EASIUR_annual',\n"," 'nox_InMAP_annual',\n"," 'nox_fall',\n"," 'nox_spring',\n"," 'nox_summer',\n"," 'nox_winter',\n"," 'pm25_AP2_annual',\n"," 'pm25_EASIUR_annual',\n"," 'pm25_InMAP_annual',\n"," 'pm25_fall',\n"," 'pm25_spring',\n"," 'pm25_summer',\n"," 'pm25_winter',\n"," 'so2_AP2_annual',\n"," 'so2_EASIUR_annual',\n"," 'so2_InMAP_annual',\n"," 'so2_fall',\n"," 'so2_spring',\n"," 'so2_summer',\n"," 'so2_winter',\n"," 'voc_AP2_annual',\n"," 'voc_InMAP_annual',\n"," 'ec_EGU',\n"," 'ec_biogenic',\n"," 'ec_nonEGU',\n"," 'ec_offroad',\n"," 'ec_onroad',\n"," 'ec_other',\n"," 'ec_total',\n"," 'nh4_EGU',\n"," 'nh4_biogenic',\n"," 'nh4_nonEGU',\n"," 'nh4_offroad',\n"," 'nh4_onroad',\n"," 'nh4_other',\n"," 'nh4_total',\n"," 'no3_EGU',\n"," 'no3_biogenic',\n"," 'no3_nonEGU',\n"," 'no3_offroad',\n"," 'no3_onroad',\n"," 'no3_other',\n"," 'no3_total',\n"," 'oa_EGU',\n"," 'oa_biogenic',\n"," 'oa_nonEGU',\n"," 'oa_offroad',\n"," 'oa_onroad',\n"," 'oa_other',\n"," 'oa_total',\n"," 'pm25_EGU',\n"," 'pm25_biogenic',\n"," 'pm25_nonEGU',\n"," 'pm25_offroad',\n"," 'pm25_onroad',\n"," 'pm25_other',\n"," 'pm25_total',\n"," 'poa_EGU',\n"," 'poa_biogenic',\n"," 'poa_nonEGU',\n"," 'poa_offroad',\n"," 'poa_onroad',\n"," 'poa_other',\n"," 'poa_total',\n"," 'so4_EGU',\n"," 'so4_biogenic',\n"," 'so4_nonEGU',\n"," 'so4_offroad',\n"," 'so4_onroad',\n"," 'so4_other',\n"," 'so4_total',\n"," 'soa_EGU',\n"," 'soa_biogenic',\n"," 'soa_nonEGU',\n"," 'soa_offroad',\n"," 'soa_onroad',\n"," 'soa_other',\n"," 'soa_total',\n"," 'pm25_EGU__naclmd',\n"," 'pm25_biogenic__naclmd',\n"," 'pm25_nonEGU__naclmd',\n"," 'pm25_offroad__naclmd',\n"," 'pm25_onroad__naclmd',\n"," 'pm25_other__naclmd',\n"," 'pm25_total__naclmd',\n"," 'Aggr_loss_rate_NHRI',\n"," 'Aggr_loss_rate_pctile',\n"," 'Aggr_loss_rate_ge90pct_lowinc',\n"," 'Leaky_under_storage',\n"," 'Leaky_under_storage_pctile',\n"," 'Leaky_ge90pct_lowinc',\n"," 'Fire_risk_30yrs',\n"," 'Fire_risk_30yrs_pctile',\n"," 'Fire_ge90pct',\n"," 'Fire_ge90pct_lowinc',\n"," 'Flood_risk_30yrs',\n"," 'Flood_risk_30yrs_pctile',\n"," 'Flood_ge90pct',\n"," 'Flood_ge90pct_lowinc',\n"," 'Impervious_or_crop_pct',\n"," 'Impervious_or_crop_pct_pctile',\n"," 'Impervious_or_crop_ge90pct_pct',\n"," 'Impervious_or_crop_ge90pct_pct_lowinc',\n"," 'Aband_mine_ge1_missing',\n"," 'Aband_mine_ge1_lowinc',\n"," 'FUDS_ge1',\n"," 'FUDS_ge1_missing',\n"," 'FUDS_ge1_lowinc',\n"," 'Traffic_prox_volume',\n"," 'Traffic_prox_volume_pctile',\n"," 'Traffic_ge90pct_lowinc',\n"," 'PM25_CEJSCT',\n"," 'PM25_CEJSCT_pctile',\n"," 'PM25_ge90pct_lowinc',\n"," 'Diesel',\n"," 'Diesel_pctile',\n"," 'Diesel_ge90pct_lowinc',\n"," 'WWater_discharge',\n"," 'WWater_discharge_pctile',\n"," 'WWater_ge90pct_lowinc',\n"," 'Hazard_waste_proximity',\n"," 'Hazard_waste_pctile',\n"," 'Hazard_waste_ge90pct_lowinc',\n"," 'Superfund_proximity',\n"," 'Superfund_proximity_pctile',\n"," 'Superfund_ge90pct_lowinc',\n"," 'RMP_proximity',\n"," 'RMP_proximity_pctile',\n"," 'RMP_ge90pct_lowinc',\n"," 'PRE1960PCT',\n"," 'DSLPM',\n"," 'PTRAF',\n"," 'PWDIS',\n"," 'PNPL',\n"," 'PRMP',\n"," 'PTSDF',\n"," 'OZONE',\n"," 'epaPM25',\n"," 'CANCER',\n"," 'RESP',\n"," 'EAL_VALT',\n"," 'EAL_VALB',\n"," 'EAL_VALP',\n"," 'EAL_VALPE',\n"," 'EAL_VALA',\n"," 'ALR_VALB',\n"," 'ALR_VALP',\n"," 'ALR_VALA',\n"," 'ALR_NPCTL',\n"," 'CFLD_AFREQ',\n"," 'CFLD_EALT',\n"," 'CWAV_AFREQ',\n"," 'CWAV_EALT',\n"," 'DRGT_AFREQ',\n"," 'DRGT_EALT',\n"," 'ERQK_AFREQ',\n"," 'ERQK_EALT',\n"," 'HAIL_AFREQ',\n"," 'HAIL_EALT',\n"," 'HWAV_AFREQ',\n"," 'HWAV_EALT',\n"," 'HRCN_AFREQ',\n"," 'HRCN_EALT',\n"," 'ISTM_AFREQ',\n"," 'ISTM_EALT',\n"," 'LNDS_AFREQ',\n"," 'LNDS_EALT',\n"," 'LTNG_AFREQ',\n"," 'LTNG_EALT',\n"," 'SWND_AFREQ',\n"," 'SWND_EALT',\n"," 'TRND_AFREQ',\n"," 'TRND_EALT',\n"," 'WFIR_AFREQ',\n"," 'WFIR_EALT',\n"," 'WNTW_AFREQ',\n"," 'WNTW_EALT',\n"," 'MfgCount',\n"," 'PowerPlantCount',\n"," 'RMPCount',\n"," 'WaterTreatCount',\n"," 'asbestosN',\n"," 'comp_air',\n"," 'comp_noise',\n"," 'comp_dumping',\n"," 'comp_hazard',\n"," 'comp_asbestos',\n"," 'comp_construction',\n"," 'comp_recycling',\n"," 'comp_water',\n"," 'comp_serv_stat',\n"," 'comp_idling',\n"," 'comp_abandon',\n"," 'HazLicCount',\n"," 'ParkCount',\n"," 'Land_acres',\n"," 'ParkAcres',\n"," 'ParkAcres_land',\n"," 'Parks_per_acre',\n"," 'ParksAmenitiesN',\n"," 'wheelchair_accessible_ball_fields',\n"," 'baseball_jr_softball_t_ball',\n"," 'baseball_sr',\n"," 'baseball_batting_cages',\n"," 'fitness_center',\n"," 'community_garden',\n"," 'gymnasium',\n"," 'pool_outdoor',\n"," 'basketball_backboards',\n"," 'basketball_courts',\n"," 'playground',\n"," 'fitness_courses',\n"," 'track',\n"," 'garden',\n"," 'trees_n',\n"," 'trees_area',\n"," 'trees_den',\n"," 'trees_crown_den',\n"," 'heatisl',\n"," 'ndvi',\n"," 'logtraf',\n"," 'logtrafScld',\n"," 'nn_q3_pm2_5',\n"," 'aland',\n"," 'awater',\n"," 'trees_denStd',\n"," 'trees_crown_denStd',\n"," 'diesel_4_clus',\n"," 'heat_5q_clus',\n"," 'ndvi_4_clus',\n"," 'epapm25_5q_clus',\n"," 'resp_3_clus',\n"," 'prmp_6_clus',\n"," 'pnlp_3_clus',\n"," 'pwdis_3_clus',\n"," 'ptraf_4_clus',\n"," 'so2_9_clus',\n"," 'tree_5_clus',\n"," 'no2_9_clus']"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# poll2.drop(columns=['commarea_y'], inplace=True)"],"metadata":{"id":"O3fW8mA_gR5O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Duplicated tract rows?"],"metadata":{"id":"IsXucqx2PDTd"}},{"cell_type":"code","source":["len(poll2['GEOID10'])-len(poll2['GEOID10'].drop_duplicates())"],"metadata":{"id":"_snV4IEcPGkh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727111123134,"user_tz":300,"elapsed":253,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"b760b30b-f22c-49ae-964f-2413792bae33"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","source":["# Export/import"],"metadata":{"id":"GlGVJphagHNn"}},{"cell_type":"code","source":["with open(curated +  '00031_Environment_pollution_Chicago.csv', 'w') as f:\n","  poll2.to_csv(f)"],"metadata":{"id":"VezRYCO6hRxL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Import\n","\n","poll = pd.read_csv(curated + '00031_Environment_pollution_Chicago.csv', dtype='string')\n","poll.drop(columns=['Unnamed: 0'], inplace=True)"],"metadata":{"id":"LXVzD9yMhWt9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["poll.columns.to_list()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BWmCbR9q0d5z","executionInfo":{"status":"ok","timestamp":1727121092366,"user_tz":300,"elapsed":200,"user":{"displayName":"Sandra Tilmon","userId":"02128196715661756059"}},"outputId":"467412f4-053a-4be5-c7ec-20f5c8d9b88b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['GEOID10',\n"," 'commarea_x',\n"," 'bc',\n"," 'co',\n"," 'coa',\n"," 'hoa',\n"," 'no2',\n"," 'o3',\n"," 'pm10',\n"," 'pm25',\n"," 'pnc',\n"," 'so2',\n"," 'nh3_AP2_annual',\n"," 'nh3_EASIUR_annual',\n"," 'nh3_InMAP_annual',\n"," 'nh3_fall',\n"," 'nh3_spring',\n"," 'nh3_summer',\n"," 'nh3_winter',\n"," 'nox_AP2_annual',\n"," 'nox_EASIUR_annual',\n"," 'nox_InMAP_annual',\n"," 'nox_fall',\n"," 'nox_spring',\n"," 'nox_summer',\n"," 'nox_winter',\n"," 'pm25_AP2_annual',\n"," 'pm25_EASIUR_annual',\n"," 'pm25_InMAP_annual',\n"," 'pm25_fall',\n"," 'pm25_spring',\n"," 'pm25_summer',\n"," 'pm25_winter',\n"," 'so2_AP2_annual',\n"," 'so2_EASIUR_annual',\n"," 'so2_InMAP_annual',\n"," 'so2_fall',\n"," 'so2_spring',\n"," 'so2_summer',\n"," 'so2_winter',\n"," 'voc_AP2_annual',\n"," 'voc_InMAP_annual',\n"," 'ec_EGU',\n"," 'ec_biogenic',\n"," 'ec_nonEGU',\n"," 'ec_offroad',\n"," 'ec_onroad',\n"," 'ec_other',\n"," 'ec_total',\n"," 'nh4_EGU',\n"," 'nh4_biogenic',\n"," 'nh4_nonEGU',\n"," 'nh4_offroad',\n"," 'nh4_onroad',\n"," 'nh4_other',\n"," 'nh4_total',\n"," 'no3_EGU',\n"," 'no3_biogenic',\n"," 'no3_nonEGU',\n"," 'no3_offroad',\n"," 'no3_onroad',\n"," 'no3_other',\n"," 'no3_total',\n"," 'oa_EGU',\n"," 'oa_biogenic',\n"," 'oa_nonEGU',\n"," 'oa_offroad',\n"," 'oa_onroad',\n"," 'oa_other',\n"," 'oa_total',\n"," 'pm25_EGU',\n"," 'pm25_biogenic',\n"," 'pm25_nonEGU',\n"," 'pm25_offroad',\n"," 'pm25_onroad',\n"," 'pm25_other',\n"," 'pm25_total',\n"," 'poa_EGU',\n"," 'poa_biogenic',\n"," 'poa_nonEGU',\n"," 'poa_offroad',\n"," 'poa_onroad',\n"," 'poa_other',\n"," 'poa_total',\n"," 'so4_EGU',\n"," 'so4_biogenic',\n"," 'so4_nonEGU',\n"," 'so4_offroad',\n"," 'so4_onroad',\n"," 'so4_other',\n"," 'so4_total',\n"," 'soa_EGU',\n"," 'soa_biogenic',\n"," 'soa_nonEGU',\n"," 'soa_offroad',\n"," 'soa_onroad',\n"," 'soa_other',\n"," 'soa_total',\n"," 'pm25_EGU__naclmd',\n"," 'pm25_biogenic__naclmd',\n"," 'pm25_nonEGU__naclmd',\n"," 'pm25_offroad__naclmd',\n"," 'pm25_onroad__naclmd',\n"," 'pm25_other__naclmd',\n"," 'pm25_total__naclmd',\n"," 'Aggr_loss_rate_NHRI',\n"," 'Aggr_loss_rate_pctile',\n"," 'Aggr_loss_rate_ge90pct_lowinc',\n"," 'Leaky_under_storage',\n"," 'Leaky_under_storage_pctile',\n"," 'Leaky_ge90pct_lowinc',\n"," 'Fire_risk_30yrs',\n"," 'Fire_risk_30yrs_pctile',\n"," 'Fire_ge90pct',\n"," 'Fire_ge90pct_lowinc',\n"," 'Flood_risk_30yrs',\n"," 'Flood_risk_30yrs_pctile',\n"," 'Flood_ge90pct',\n"," 'Flood_ge90pct_lowinc',\n"," 'Impervious_or_crop_pct',\n"," 'Impervious_or_crop_pct_pctile',\n"," 'Impervious_or_crop_ge90pct_pct',\n"," 'Impervious_or_crop_ge90pct_pct_lowinc',\n"," 'Aband_mine_ge1_missing',\n"," 'Aband_mine_ge1_lowinc',\n"," 'FUDS_ge1',\n"," 'FUDS_ge1_missing',\n"," 'FUDS_ge1_lowinc',\n"," 'Traffic_prox_volume',\n"," 'Traffic_prox_volume_pctile',\n"," 'Traffic_ge90pct_lowinc',\n"," 'PM25_CEJSCT',\n"," 'PM25_CEJSCT_pctile',\n"," 'PM25_ge90pct_lowinc',\n"," 'Diesel',\n"," 'Diesel_pctile',\n"," 'Diesel_ge90pct_lowinc',\n"," 'WWater_discharge',\n"," 'WWater_discharge_pctile',\n"," 'WWater_ge90pct_lowinc',\n"," 'Hazard_waste_proximity',\n"," 'Hazard_waste_pctile',\n"," 'Hazard_waste_ge90pct_lowinc',\n"," 'Superfund_proximity',\n"," 'Superfund_proximity_pctile',\n"," 'Superfund_ge90pct_lowinc',\n"," 'RMP_proximity',\n"," 'RMP_proximity_pctile',\n"," 'RMP_ge90pct_lowinc',\n"," 'PRE1960PCT',\n"," 'DSLPM',\n"," 'PTRAF',\n"," 'PWDIS',\n"," 'PNPL',\n"," 'PRMP',\n"," 'PTSDF',\n"," 'OZONE',\n"," 'epaPM25',\n"," 'CANCER',\n"," 'RESP',\n"," 'EAL_VALT',\n"," 'EAL_VALB',\n"," 'EAL_VALP',\n"," 'EAL_VALPE',\n"," 'EAL_VALA',\n"," 'ALR_VALB',\n"," 'ALR_VALP',\n"," 'ALR_VALA',\n"," 'ALR_NPCTL',\n"," 'CFLD_AFREQ',\n"," 'CFLD_EALT',\n"," 'CWAV_AFREQ',\n"," 'CWAV_EALT',\n"," 'DRGT_AFREQ',\n"," 'DRGT_EALT',\n"," 'ERQK_AFREQ',\n"," 'ERQK_EALT',\n"," 'HAIL_AFREQ',\n"," 'HAIL_EALT',\n"," 'HWAV_AFREQ',\n"," 'HWAV_EALT',\n"," 'HRCN_AFREQ',\n"," 'HRCN_EALT',\n"," 'ISTM_AFREQ',\n"," 'ISTM_EALT',\n"," 'LNDS_AFREQ',\n"," 'LNDS_EALT',\n"," 'LTNG_AFREQ',\n"," 'LTNG_EALT',\n"," 'SWND_AFREQ',\n"," 'SWND_EALT',\n"," 'TRND_AFREQ',\n"," 'TRND_EALT',\n"," 'WFIR_AFREQ',\n"," 'WFIR_EALT',\n"," 'WNTW_AFREQ',\n"," 'WNTW_EALT',\n"," 'MfgCount',\n"," 'PowerPlantCount',\n"," 'RMPCount',\n"," 'WaterTreatCount',\n"," 'asbestosN',\n"," 'comp_air',\n"," 'comp_noise',\n"," 'comp_dumping',\n"," 'comp_hazard',\n"," 'comp_asbestos',\n"," 'comp_construction',\n"," 'comp_recycling',\n"," 'comp_water',\n"," 'comp_serv_stat',\n"," 'comp_idling',\n"," 'comp_abandon',\n"," 'HazLicCount',\n"," 'ParkCount',\n"," 'Land_acres',\n"," 'ParkAcres',\n"," 'ParkAcres_land',\n"," 'Parks_per_acre',\n"," 'ParksAmenitiesN',\n"," 'wheelchair_accessible_ball_fields',\n"," 'baseball_jr_softball_t_ball',\n"," 'baseball_sr',\n"," 'baseball_batting_cages',\n"," 'fitness_center',\n"," 'community_garden',\n"," 'gymnasium',\n"," 'pool_outdoor',\n"," 'basketball_backboards',\n"," 'basketball_courts',\n"," 'playground',\n"," 'fitness_courses',\n"," 'track',\n"," 'garden',\n"," 'trees_n',\n"," 'trees_area',\n"," 'trees_den',\n"," 'trees_crown_den',\n"," 'heatisl',\n"," 'ndvi',\n"," 'logtraf',\n"," 'logtrafScld',\n"," 'nn_q3_pm2_5',\n"," 'aland',\n"," 'awater',\n"," 'trees_denStd',\n"," 'trees_crown_denStd',\n"," 'diesel_4_clus',\n"," 'heat_5q_clus',\n"," 'ndvi_4_clus',\n"," 'epapm25_5q_clus',\n"," 'resp_3_clus',\n"," 'prmp_6_clus',\n"," 'pnlp_3_clus',\n"," 'pwdis_3_clus',\n"," 'ptraf_4_clus',\n"," 'so2_9_clus',\n"," 'tree_5_clus',\n"," 'no2_9_clus']"]},"metadata":{},"execution_count":24}]}],"metadata":{"colab":{"collapsed_sections":["WB8zCYTLaclQ"],"provenance":[{"file_id":"1ZW6tMQc3rYNaGqTCG7-Y_KbR_ml3b8zY","timestamp":1681152703009}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}